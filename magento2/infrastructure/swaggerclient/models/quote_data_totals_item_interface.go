// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuoteDataTotalsItemInterface Interface TotalsItemInterface
// swagger:model quote-data-totals-item-interface
type QuoteDataTotalsItemInterface struct {

	// Discount amount in base currency. Otherwise, null.
	BaseDiscountAmount float64 `json:"base_discount_amount,omitempty"`

	// Item price in base currency.
	// Required: true
	BasePrice *float64 `json:"base_price"`

	// Price including tax in base currency. Otherwise, null.
	BasePriceInclTax float64 `json:"base_price_incl_tax,omitempty"`

	// Row total in base currency.
	// Required: true
	BaseRowTotal *float64 `json:"base_row_total"`

	// Row total including tax in base currency. Otherwise, null.
	BaseRowTotalInclTax float64 `json:"base_row_total_incl_tax,omitempty"`

	// Tax amount in base currency. Otherwise, null.
	BaseTaxAmount float64 `json:"base_tax_amount,omitempty"`

	// Discount amount in quote currency. Otherwise, null.
	DiscountAmount float64 `json:"discount_amount,omitempty"`

	// Discount percent. Otherwise, null.
	DiscountPercent float64 `json:"discount_percent,omitempty"`

	// extension attributes
	ExtensionAttributes *QuoteDataTotalsItemExtensionInterface `json:"extension_attributes,omitempty"`

	// Item id
	// Required: true
	ItemID *int64 `json:"item_id"`

	// Product name. Otherwise, null.
	Name string `json:"name,omitempty"`

	// Item price in quote currency.
	// Required: true
	Options *string `json:"options"`

	// Item price in quote currency.
	// Required: true
	Price *float64 `json:"price"`

	// Price including tax in quote currency. Otherwise, null.
	PriceInclTax float64 `json:"price_incl_tax,omitempty"`

	// Item quantity.
	// Required: true
	Qty *float64 `json:"qty"`

	// Row total in quote currency.
	// Required: true
	RowTotal *float64 `json:"row_total"`

	// Row total including tax in quote currency. Otherwise, null.
	RowTotalInclTax float64 `json:"row_total_incl_tax,omitempty"`

	// Row total with discount in quote currency. Otherwise, null.
	RowTotalWithDiscount float64 `json:"row_total_with_discount,omitempty"`

	// Tax amount in quote currency. Otherwise, null.
	TaxAmount float64 `json:"tax_amount,omitempty"`

	// Tax percent. Otherwise, null.
	TaxPercent float64 `json:"tax_percent,omitempty"`

	// Item weee tax applied in quote currency.
	// Required: true
	WeeeTaxApplied *string `json:"weee_tax_applied"`

	// Item weee tax applied amount in quote currency.
	// Required: true
	WeeeTaxAppliedAmount *float64 `json:"weee_tax_applied_amount"`
}

// Validate validates this quote data totals item interface
func (m *QuoteDataTotalsItemInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBasePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseRowTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRowTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeeeTaxApplied(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeeeTaxAppliedAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuoteDataTotalsItemInterface) validateBasePrice(formats strfmt.Registry) error {

	if err := validate.Required("base_price", "body", m.BasePrice); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataTotalsItemInterface) validateBaseRowTotal(formats strfmt.Registry) error {

	if err := validate.Required("base_row_total", "body", m.BaseRowTotal); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataTotalsItemInterface) validateExtensionAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtensionAttributes) { // not required
		return nil
	}

	if m.ExtensionAttributes != nil {
		if err := m.ExtensionAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *QuoteDataTotalsItemInterface) validateItemID(formats strfmt.Registry) error {

	if err := validate.Required("item_id", "body", m.ItemID); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataTotalsItemInterface) validateOptions(formats strfmt.Registry) error {

	if err := validate.Required("options", "body", m.Options); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataTotalsItemInterface) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataTotalsItemInterface) validateQty(formats strfmt.Registry) error {

	if err := validate.Required("qty", "body", m.Qty); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataTotalsItemInterface) validateRowTotal(formats strfmt.Registry) error {

	if err := validate.Required("row_total", "body", m.RowTotal); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataTotalsItemInterface) validateWeeeTaxApplied(formats strfmt.Registry) error {

	if err := validate.Required("weee_tax_applied", "body", m.WeeeTaxApplied); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataTotalsItemInterface) validateWeeeTaxAppliedAmount(formats strfmt.Registry) error {

	if err := validate.Required("weee_tax_applied_amount", "body", m.WeeeTaxAppliedAmount); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuoteDataTotalsItemInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuoteDataTotalsItemInterface) UnmarshalBinary(b []byte) error {
	var res QuoteDataTotalsItemInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
