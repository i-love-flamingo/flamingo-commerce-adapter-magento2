// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalesDataOrderInterface Order interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.
// swagger:model sales-data-order-interface
type SalesDataOrderInterface struct {

	// Negative adjustment value.
	AdjustmentNegative float64 `json:"adjustment_negative,omitempty"`

	// Positive adjustment value.
	AdjustmentPositive float64 `json:"adjustment_positive,omitempty"`

	// Applied rule IDs.
	AppliedRuleIds string `json:"applied_rule_ids,omitempty"`

	// Base negative adjustment value.
	BaseAdjustmentNegative float64 `json:"base_adjustment_negative,omitempty"`

	// Base positive adjustment value.
	BaseAdjustmentPositive float64 `json:"base_adjustment_positive,omitempty"`

	// Base currency code.
	BaseCurrencyCode string `json:"base_currency_code,omitempty"`

	// Base discount amount.
	BaseDiscountAmount float64 `json:"base_discount_amount,omitempty"`

	// Base discount canceled.
	BaseDiscountCanceled float64 `json:"base_discount_canceled,omitempty"`

	// Base discount invoiced.
	BaseDiscountInvoiced float64 `json:"base_discount_invoiced,omitempty"`

	// Base discount refunded.
	BaseDiscountRefunded float64 `json:"base_discount_refunded,omitempty"`

	// Base discount tax compensation amount.
	BaseDiscountTaxCompensationAmount float64 `json:"base_discount_tax_compensation_amount,omitempty"`

	// Base discount tax compensation invoiced.
	BaseDiscountTaxCompensationInvoiced float64 `json:"base_discount_tax_compensation_invoiced,omitempty"`

	// Base discount tax compensation refunded.
	BaseDiscountTaxCompensationRefunded float64 `json:"base_discount_tax_compensation_refunded,omitempty"`

	// Base grand total.
	// Required: true
	BaseGrandTotal *float64 `json:"base_grand_total"`

	// Base shipping amount.
	BaseShippingAmount float64 `json:"base_shipping_amount,omitempty"`

	// Base shipping canceled.
	BaseShippingCanceled float64 `json:"base_shipping_canceled,omitempty"`

	// Base shipping discount amount.
	BaseShippingDiscountAmount float64 `json:"base_shipping_discount_amount,omitempty"`

	// Base shipping discount tax compensation amount.
	BaseShippingDiscountTaxCompensationAmnt float64 `json:"base_shipping_discount_tax_compensation_amnt,omitempty"`

	// Base shipping including tax.
	BaseShippingInclTax float64 `json:"base_shipping_incl_tax,omitempty"`

	// Base shipping invoiced.
	BaseShippingInvoiced float64 `json:"base_shipping_invoiced,omitempty"`

	// Base shipping refunded.
	BaseShippingRefunded float64 `json:"base_shipping_refunded,omitempty"`

	// Base shipping tax amount.
	BaseShippingTaxAmount float64 `json:"base_shipping_tax_amount,omitempty"`

	// Base shipping tax refunded.
	BaseShippingTaxRefunded float64 `json:"base_shipping_tax_refunded,omitempty"`

	// Base subtotal.
	BaseSubtotal float64 `json:"base_subtotal,omitempty"`

	// Base subtotal canceled.
	BaseSubtotalCanceled float64 `json:"base_subtotal_canceled,omitempty"`

	// Base subtotal including tax.
	BaseSubtotalInclTax float64 `json:"base_subtotal_incl_tax,omitempty"`

	// Base subtotal invoiced.
	BaseSubtotalInvoiced float64 `json:"base_subtotal_invoiced,omitempty"`

	// Base subtotal refunded.
	BaseSubtotalRefunded float64 `json:"base_subtotal_refunded,omitempty"`

	// Base tax amount.
	BaseTaxAmount float64 `json:"base_tax_amount,omitempty"`

	// Base tax canceled.
	BaseTaxCanceled float64 `json:"base_tax_canceled,omitempty"`

	// Base tax invoiced.
	BaseTaxInvoiced float64 `json:"base_tax_invoiced,omitempty"`

	// Base tax refunded.
	BaseTaxRefunded float64 `json:"base_tax_refunded,omitempty"`

	// Base-to-global rate.
	BaseToGlobalRate float64 `json:"base_to_global_rate,omitempty"`

	// Base-to-order rate.
	BaseToOrderRate float64 `json:"base_to_order_rate,omitempty"`

	// Base total canceled.
	BaseTotalCanceled float64 `json:"base_total_canceled,omitempty"`

	// Base total due.
	BaseTotalDue float64 `json:"base_total_due,omitempty"`

	// Base total invoiced.
	BaseTotalInvoiced float64 `json:"base_total_invoiced,omitempty"`

	// Base total invoiced cost.
	BaseTotalInvoicedCost float64 `json:"base_total_invoiced_cost,omitempty"`

	// Base total offline refunded.
	BaseTotalOfflineRefunded float64 `json:"base_total_offline_refunded,omitempty"`

	// Base total online refunded.
	BaseTotalOnlineRefunded float64 `json:"base_total_online_refunded,omitempty"`

	// Base total paid.
	BaseTotalPaid float64 `json:"base_total_paid,omitempty"`

	// Base total quantity ordered.
	BaseTotalQtyOrdered float64 `json:"base_total_qty_ordered,omitempty"`

	// Base total refunded.
	BaseTotalRefunded float64 `json:"base_total_refunded,omitempty"`

	// billing address
	BillingAddress *SalesDataOrderAddressInterface `json:"billing_address,omitempty"`

	// Billing address ID.
	BillingAddressID int64 `json:"billing_address_id,omitempty"`

	// Can-ship-partially flag value.
	CanShipPartially int64 `json:"can_ship_partially,omitempty"`

	// Can-ship-partially-item flag value.
	CanShipPartiallyItem int64 `json:"can_ship_partially_item,omitempty"`

	// Coupon code.
	CouponCode string `json:"coupon_code,omitempty"`

	// Created-at timestamp.
	CreatedAt string `json:"created_at,omitempty"`

	// Customer date-of-birth (DOB).
	CustomerDob string `json:"customer_dob,omitempty"`

	// Customer email address.
	// Required: true
	CustomerEmail *string `json:"customer_email"`

	// Customer first name.
	CustomerFirstname string `json:"customer_firstname,omitempty"`

	// Customer gender.
	CustomerGender int64 `json:"customer_gender,omitempty"`

	// Customer group ID.
	CustomerGroupID int64 `json:"customer_group_id,omitempty"`

	// Customer ID.
	CustomerID int64 `json:"customer_id,omitempty"`

	// Customer-is-guest flag value.
	CustomerIsGuest int64 `json:"customer_is_guest,omitempty"`

	// Customer last name.
	CustomerLastname string `json:"customer_lastname,omitempty"`

	// Customer middle name.
	CustomerMiddlename string `json:"customer_middlename,omitempty"`

	// Customer note.
	CustomerNote string `json:"customer_note,omitempty"`

	// Customer-note-notify flag value.
	CustomerNoteNotify int64 `json:"customer_note_notify,omitempty"`

	// Customer prefix.
	CustomerPrefix string `json:"customer_prefix,omitempty"`

	// Customer suffix.
	CustomerSuffix string `json:"customer_suffix,omitempty"`

	// Customer value-added tax (VAT).
	CustomerTaxvat string `json:"customer_taxvat,omitempty"`

	// Discount amount.
	DiscountAmount float64 `json:"discount_amount,omitempty"`

	// Discount canceled.
	DiscountCanceled float64 `json:"discount_canceled,omitempty"`

	// Discount description.
	DiscountDescription string `json:"discount_description,omitempty"`

	// Discount invoiced.
	DiscountInvoiced float64 `json:"discount_invoiced,omitempty"`

	// Discount refunded amount.
	DiscountRefunded float64 `json:"discount_refunded,omitempty"`

	// Discount tax compensation amount.
	DiscountTaxCompensationAmount float64 `json:"discount_tax_compensation_amount,omitempty"`

	// Discount tax compensation invoiced amount.
	DiscountTaxCompensationInvoiced float64 `json:"discount_tax_compensation_invoiced,omitempty"`

	// Discount tax compensation refunded amount.
	DiscountTaxCompensationRefunded float64 `json:"discount_tax_compensation_refunded,omitempty"`

	// Edit increment value.
	EditIncrement int64 `json:"edit_increment,omitempty"`

	// Email-sent flag value.
	EmailSent int64 `json:"email_sent,omitempty"`

	// Order ID.
	EntityID int64 `json:"entity_id,omitempty"`

	// External customer ID.
	ExtCustomerID string `json:"ext_customer_id,omitempty"`

	// External order ID.
	ExtOrderID string `json:"ext_order_id,omitempty"`

	// extension attributes
	ExtensionAttributes *SalesDataOrderExtensionInterface `json:"extension_attributes,omitempty"`

	// Forced-shipment-with-invoice flag value.
	ForcedShipmentWithInvoice int64 `json:"forced_shipment_with_invoice,omitempty"`

	// Global currency code.
	GlobalCurrencyCode string `json:"global_currency_code,omitempty"`

	// Grand total.
	// Required: true
	GrandTotal *float64 `json:"grand_total"`

	// Hold before state.
	HoldBeforeState string `json:"hold_before_state,omitempty"`

	// Hold before status.
	HoldBeforeStatus string `json:"hold_before_status,omitempty"`

	// Increment ID.
	IncrementID string `json:"increment_id,omitempty"`

	// Is-virtual flag value.
	IsVirtual int64 `json:"is_virtual,omitempty"`

	// Array of items.
	// Required: true
	Items []*SalesDataOrderItemInterface `json:"items"`

	// Order currency code.
	OrderCurrencyCode string `json:"order_currency_code,omitempty"`

	// Original increment ID.
	OriginalIncrementID string `json:"original_increment_id,omitempty"`

	// payment
	Payment *SalesDataOrderPaymentInterface `json:"payment,omitempty"`

	// Payment authorization expiration date.
	PaymentAuthExpiration int64 `json:"payment_auth_expiration,omitempty"`

	// Payment authorization amount.
	PaymentAuthorizationAmount float64 `json:"payment_authorization_amount,omitempty"`

	// Protect code.
	ProtectCode string `json:"protect_code,omitempty"`

	// Quote address ID.
	QuoteAddressID int64 `json:"quote_address_id,omitempty"`

	// Quote ID.
	QuoteID int64 `json:"quote_id,omitempty"`

	// Relation child ID.
	RelationChildID string `json:"relation_child_id,omitempty"`

	// Relation child real ID.
	RelationChildRealID string `json:"relation_child_real_id,omitempty"`

	// Relation parent ID.
	RelationParentID string `json:"relation_parent_id,omitempty"`

	// Relation parent real ID.
	RelationParentRealID string `json:"relation_parent_real_id,omitempty"`

	// Remote IP address.
	RemoteIP string `json:"remote_ip,omitempty"`

	// Shipping amount.
	ShippingAmount float64 `json:"shipping_amount,omitempty"`

	// Shipping canceled amount.
	ShippingCanceled float64 `json:"shipping_canceled,omitempty"`

	// Shipping description.
	ShippingDescription string `json:"shipping_description,omitempty"`

	// Shipping discount amount.
	ShippingDiscountAmount float64 `json:"shipping_discount_amount,omitempty"`

	// Shipping discount tax compensation amount.
	ShippingDiscountTaxCompensationAmount float64 `json:"shipping_discount_tax_compensation_amount,omitempty"`

	// Shipping including tax amount.
	ShippingInclTax float64 `json:"shipping_incl_tax,omitempty"`

	// Shipping invoiced amount.
	ShippingInvoiced float64 `json:"shipping_invoiced,omitempty"`

	// Shipping refunded amount.
	ShippingRefunded float64 `json:"shipping_refunded,omitempty"`

	// Shipping tax amount.
	ShippingTaxAmount float64 `json:"shipping_tax_amount,omitempty"`

	// Shipping tax refunded amount.
	ShippingTaxRefunded float64 `json:"shipping_tax_refunded,omitempty"`

	// State.
	State string `json:"state,omitempty"`

	// Status.
	Status string `json:"status,omitempty"`

	// Array of status histories.
	StatusHistories []*SalesDataOrderStatusHistoryInterface `json:"status_histories"`

	// Store currency code.
	StoreCurrencyCode string `json:"store_currency_code,omitempty"`

	// Store ID.
	StoreID int64 `json:"store_id,omitempty"`

	// Store name.
	StoreName string `json:"store_name,omitempty"`

	// Store-to-base rate.
	StoreToBaseRate float64 `json:"store_to_base_rate,omitempty"`

	// Store-to-order rate.
	StoreToOrderRate float64 `json:"store_to_order_rate,omitempty"`

	// Subtotal.
	Subtotal float64 `json:"subtotal,omitempty"`

	// Subtotal canceled amount.
	SubtotalCanceled float64 `json:"subtotal_canceled,omitempty"`

	// Subtotal including tax amount.
	SubtotalInclTax float64 `json:"subtotal_incl_tax,omitempty"`

	// Subtotal invoiced amount.
	SubtotalInvoiced float64 `json:"subtotal_invoiced,omitempty"`

	// Subtotal refunded amount.
	SubtotalRefunded float64 `json:"subtotal_refunded,omitempty"`

	// Tax amount.
	TaxAmount float64 `json:"tax_amount,omitempty"`

	// Tax canceled amount.
	TaxCanceled float64 `json:"tax_canceled,omitempty"`

	// Tax invoiced amount.
	TaxInvoiced float64 `json:"tax_invoiced,omitempty"`

	// Tax refunded amount.
	TaxRefunded float64 `json:"tax_refunded,omitempty"`

	// Total canceled.
	TotalCanceled float64 `json:"total_canceled,omitempty"`

	// Total due.
	TotalDue float64 `json:"total_due,omitempty"`

	// Total invoiced amount.
	TotalInvoiced float64 `json:"total_invoiced,omitempty"`

	// Total item count.
	TotalItemCount int64 `json:"total_item_count,omitempty"`

	// Total offline refunded amount.
	TotalOfflineRefunded float64 `json:"total_offline_refunded,omitempty"`

	// Total online refunded amount.
	TotalOnlineRefunded float64 `json:"total_online_refunded,omitempty"`

	// Total paid.
	TotalPaid float64 `json:"total_paid,omitempty"`

	// Total quantity ordered.
	TotalQtyOrdered float64 `json:"total_qty_ordered,omitempty"`

	// Total amount refunded.
	TotalRefunded float64 `json:"total_refunded,omitempty"`

	// Updated-at timestamp.
	UpdatedAt string `json:"updated_at,omitempty"`

	// Weight.
	Weight float64 `json:"weight,omitempty"`

	// X-Forwarded-For field value.
	XForwardedFor string `json:"x_forwarded_for,omitempty"`
}

// Validate validates this sales data order interface
func (m *SalesDataOrderInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseGrandTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrandTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusHistories(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesDataOrderInterface) validateBaseGrandTotal(formats strfmt.Registry) error {

	if err := validate.Required("base_grand_total", "body", m.BaseGrandTotal); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataOrderInterface) validateBillingAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingAddress) { // not required
		return nil
	}

	if m.BillingAddress != nil {
		if err := m.BillingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing_address")
			}
			return err
		}
	}

	return nil
}

func (m *SalesDataOrderInterface) validateCustomerEmail(formats strfmt.Registry) error {

	if err := validate.Required("customer_email", "body", m.CustomerEmail); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataOrderInterface) validateExtensionAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtensionAttributes) { // not required
		return nil
	}

	if m.ExtensionAttributes != nil {
		if err := m.ExtensionAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *SalesDataOrderInterface) validateGrandTotal(formats strfmt.Registry) error {

	if err := validate.Required("grand_total", "body", m.GrandTotal); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataOrderInterface) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("items", "body", m.Items); err != nil {
		return err
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalesDataOrderInterface) validatePayment(formats strfmt.Registry) error {

	if swag.IsZero(m.Payment) { // not required
		return nil
	}

	if m.Payment != nil {
		if err := m.Payment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment")
			}
			return err
		}
	}

	return nil
}

func (m *SalesDataOrderInterface) validateStatusHistories(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusHistories) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusHistories); i++ {
		if swag.IsZero(m.StatusHistories[i]) { // not required
			continue
		}

		if m.StatusHistories[i] != nil {
			if err := m.StatusHistories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("status_histories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesDataOrderInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesDataOrderInterface) UnmarshalBinary(b []byte) error {
	var res SalesDataOrderInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
