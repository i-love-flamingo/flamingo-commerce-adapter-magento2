// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RmaDataRmaInterface Interface RmaInterface
// swagger:model rma-data-rma-interface
type RmaDataRmaInterface struct {

	// Comments list
	// Required: true
	Comments []*RmaDataCommentInterface `json:"comments"`

	// Custom attributes values.
	CustomAttributes []*FrameworkAttributeInterface `json:"custom_attributes"`

	// Customer_custom_email
	// Required: true
	CustomerCustomEmail *string `json:"customer_custom_email"`

	// Customer_id
	// Required: true
	CustomerID *int64 `json:"customer_id"`

	// Date_requested
	// Required: true
	DateRequested *string `json:"date_requested"`

	// Entity_id
	// Required: true
	EntityID *int64 `json:"entity_id"`

	// extension attributes
	ExtensionAttributes RmaDataRmaExtensionInterface `json:"extension_attributes,omitempty"`

	// Entity_id
	// Required: true
	IncrementID *string `json:"increment_id"`

	// Items
	// Required: true
	Items []*RmaDataItemInterface `json:"items"`

	// Order_id
	// Required: true
	OrderID *int64 `json:"order_id"`

	// Order_increment_id
	// Required: true
	OrderIncrementID *string `json:"order_increment_id"`

	// Status
	// Required: true
	Status *string `json:"status"`

	// Store_id
	// Required: true
	StoreID *int64 `json:"store_id"`

	// Tracks list
	// Required: true
	Tracks []*RmaDataTrackInterface `json:"tracks"`
}

// Validate validates this rma data rma interface
func (m *RmaDataRmaInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerCustomEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateRequested(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderIncrementID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTracks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RmaDataRmaInterface) validateComments(formats strfmt.Registry) error {

	if err := validate.Required("comments", "body", m.Comments); err != nil {
		return err
	}

	for i := 0; i < len(m.Comments); i++ {
		if swag.IsZero(m.Comments[i]) { // not required
			continue
		}

		if m.Comments[i] != nil {
			if err := m.Comments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("comments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RmaDataRmaInterface) validateCustomAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomAttributes); i++ {
		if swag.IsZero(m.CustomAttributes[i]) { // not required
			continue
		}

		if m.CustomAttributes[i] != nil {
			if err := m.CustomAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RmaDataRmaInterface) validateCustomerCustomEmail(formats strfmt.Registry) error {

	if err := validate.Required("customer_custom_email", "body", m.CustomerCustomEmail); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataRmaInterface) validateCustomerID(formats strfmt.Registry) error {

	if err := validate.Required("customer_id", "body", m.CustomerID); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataRmaInterface) validateDateRequested(formats strfmt.Registry) error {

	if err := validate.Required("date_requested", "body", m.DateRequested); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataRmaInterface) validateEntityID(formats strfmt.Registry) error {

	if err := validate.Required("entity_id", "body", m.EntityID); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataRmaInterface) validateIncrementID(formats strfmt.Registry) error {

	if err := validate.Required("increment_id", "body", m.IncrementID); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataRmaInterface) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("items", "body", m.Items); err != nil {
		return err
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RmaDataRmaInterface) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("order_id", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataRmaInterface) validateOrderIncrementID(formats strfmt.Registry) error {

	if err := validate.Required("order_increment_id", "body", m.OrderIncrementID); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataRmaInterface) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataRmaInterface) validateStoreID(formats strfmt.Registry) error {

	if err := validate.Required("store_id", "body", m.StoreID); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataRmaInterface) validateTracks(formats strfmt.Registry) error {

	if err := validate.Required("tracks", "body", m.Tracks); err != nil {
		return err
	}

	for i := 0; i < len(m.Tracks); i++ {
		if swag.IsZero(m.Tracks[i]) { // not required
			continue
		}

		if m.Tracks[i] != nil {
			if err := m.Tracks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tracks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RmaDataRmaInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RmaDataRmaInterface) UnmarshalBinary(b []byte) error {
	var res RmaDataRmaInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
