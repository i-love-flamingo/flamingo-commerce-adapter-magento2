// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FrameworkSearchCriteriaInterface Search criteria interface.
// swagger:model framework-search-criteria-interface
type FrameworkSearchCriteriaInterface struct {

	// Current page.
	CurrentPage int64 `json:"current_page,omitempty"`

	// A list of filter groups.
	// Required: true
	FilterGroups []*FrameworkSearchFilterGroup `json:"filter_groups"`

	// Page size.
	PageSize int64 `json:"page_size,omitempty"`

	// Sort order.
	SortOrders []*FrameworkSortOrder `json:"sort_orders"`
}

// Validate validates this framework search criteria interface
func (m *FrameworkSearchCriteriaInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilterGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortOrders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FrameworkSearchCriteriaInterface) validateFilterGroups(formats strfmt.Registry) error {

	if err := validate.Required("filter_groups", "body", m.FilterGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.FilterGroups); i++ {
		if swag.IsZero(m.FilterGroups[i]) { // not required
			continue
		}

		if m.FilterGroups[i] != nil {
			if err := m.FilterGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filter_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FrameworkSearchCriteriaInterface) validateSortOrders(formats strfmt.Registry) error {

	if swag.IsZero(m.SortOrders) { // not required
		return nil
	}

	for i := 0; i < len(m.SortOrders); i++ {
		if swag.IsZero(m.SortOrders[i]) { // not required
			continue
		}

		if m.SortOrders[i] != nil {
			if err := m.SortOrders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sort_orders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FrameworkSearchCriteriaInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FrameworkSearchCriteriaInterface) UnmarshalBinary(b []byte) error {
	var res FrameworkSearchCriteriaInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
