// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RmaDataItemInterface Interface CategoryInterface
// swagger:model rma-data-item-interface
type RmaDataItemInterface struct {

	// Condition
	// Required: true
	Condition *string `json:"condition"`

	// Id
	// Required: true
	EntityID *int64 `json:"entity_id"`

	// extension attributes
	ExtensionAttributes RmaDataItemExtensionInterface `json:"extension_attributes,omitempty"`

	// Order_item_id
	// Required: true
	OrderItemID *int64 `json:"order_item_id"`

	// Qty_approved
	// Required: true
	QtyApproved *int64 `json:"qty_approved"`

	// Qty_authorized
	// Required: true
	QtyAuthorized *int64 `json:"qty_authorized"`

	// Qty_requested
	// Required: true
	QtyRequested *int64 `json:"qty_requested"`

	// Qty_returned
	// Required: true
	QtyReturned *int64 `json:"qty_returned"`

	// Reason
	// Required: true
	Reason *string `json:"reason"`

	// Resolution
	// Required: true
	Resolution *string `json:"resolution"`

	// RMA id
	// Required: true
	RmaEntityID *int64 `json:"rma_entity_id"`

	// Status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this rma data item interface
func (m *RmaDataItemInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQtyApproved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQtyAuthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQtyRequested(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQtyReturned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRmaEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RmaDataItemInterface) validateCondition(formats strfmt.Registry) error {

	if err := validate.Required("condition", "body", m.Condition); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataItemInterface) validateEntityID(formats strfmt.Registry) error {

	if err := validate.Required("entity_id", "body", m.EntityID); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataItemInterface) validateOrderItemID(formats strfmt.Registry) error {

	if err := validate.Required("order_item_id", "body", m.OrderItemID); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataItemInterface) validateQtyApproved(formats strfmt.Registry) error {

	if err := validate.Required("qty_approved", "body", m.QtyApproved); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataItemInterface) validateQtyAuthorized(formats strfmt.Registry) error {

	if err := validate.Required("qty_authorized", "body", m.QtyAuthorized); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataItemInterface) validateQtyRequested(formats strfmt.Registry) error {

	if err := validate.Required("qty_requested", "body", m.QtyRequested); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataItemInterface) validateQtyReturned(formats strfmt.Registry) error {

	if err := validate.Required("qty_returned", "body", m.QtyReturned); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataItemInterface) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataItemInterface) validateResolution(formats strfmt.Registry) error {

	if err := validate.Required("resolution", "body", m.Resolution); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataItemInterface) validateRmaEntityID(formats strfmt.Registry) error {

	if err := validate.Required("rma_entity_id", "body", m.RmaEntityID); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataItemInterface) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RmaDataItemInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RmaDataItemInterface) UnmarshalBinary(b []byte) error {
	var res RmaDataItemInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
