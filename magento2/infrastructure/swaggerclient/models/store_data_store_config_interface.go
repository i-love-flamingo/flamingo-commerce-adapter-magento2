// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoreDataStoreConfigInterface StoreConfig interface
// swagger:model store-data-store-config-interface
type StoreDataStoreConfigInterface struct {

	// Base currency code
	// Required: true
	BaseCurrencyCode *string `json:"base_currency_code"`

	// Base link URL for the store
	// Required: true
	BaseLinkURL *string `json:"base_link_url"`

	// Base media URL for the store
	// Required: true
	BaseMediaURL *string `json:"base_media_url"`

	// Base static URL for the store
	// Required: true
	BaseStaticURL *string `json:"base_static_url"`

	// Base URL for the store
	// Required: true
	BaseURL *string `json:"base_url"`

	// Store code
	// Required: true
	Code *string `json:"code"`

	// Default display currency code
	// Required: true
	DefaultDisplayCurrencyCode *string `json:"default_display_currency_code"`

	// extension attributes
	ExtensionAttributes StoreDataStoreConfigExtensionInterface `json:"extension_attributes,omitempty"`

	// Store id
	// Required: true
	ID *int64 `json:"id"`

	// Store locale
	// Required: true
	Locale *string `json:"locale"`

	// Secure base link URL for the store
	// Required: true
	SecureBaseLinkURL *string `json:"secure_base_link_url"`

	// Secure base media URL for the store
	// Required: true
	SecureBaseMediaURL *string `json:"secure_base_media_url"`

	// Secure base static URL for the store
	// Required: true
	SecureBaseStaticURL *string `json:"secure_base_static_url"`

	// Secure base URL for the store
	// Required: true
	SecureBaseURL *string `json:"secure_base_url"`

	// Timezone of the store
	// Required: true
	Timezone *string `json:"timezone"`

	// Website id of the store
	// Required: true
	WebsiteID *int64 `json:"website_id"`

	// The unit of weight
	// Required: true
	WeightUnit *string `json:"weight_unit"`
}

// Validate validates this store data store config interface
func (m *StoreDataStoreConfigInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseCurrencyCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseLinkURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseMediaURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseStaticURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultDisplayCurrencyCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecureBaseLinkURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecureBaseMediaURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecureBaseStaticURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecureBaseURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebsiteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeightUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoreDataStoreConfigInterface) validateBaseCurrencyCode(formats strfmt.Registry) error {

	if err := validate.Required("base_currency_code", "body", m.BaseCurrencyCode); err != nil {
		return err
	}

	return nil
}

func (m *StoreDataStoreConfigInterface) validateBaseLinkURL(formats strfmt.Registry) error {

	if err := validate.Required("base_link_url", "body", m.BaseLinkURL); err != nil {
		return err
	}

	return nil
}

func (m *StoreDataStoreConfigInterface) validateBaseMediaURL(formats strfmt.Registry) error {

	if err := validate.Required("base_media_url", "body", m.BaseMediaURL); err != nil {
		return err
	}

	return nil
}

func (m *StoreDataStoreConfigInterface) validateBaseStaticURL(formats strfmt.Registry) error {

	if err := validate.Required("base_static_url", "body", m.BaseStaticURL); err != nil {
		return err
	}

	return nil
}

func (m *StoreDataStoreConfigInterface) validateBaseURL(formats strfmt.Registry) error {

	if err := validate.Required("base_url", "body", m.BaseURL); err != nil {
		return err
	}

	return nil
}

func (m *StoreDataStoreConfigInterface) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *StoreDataStoreConfigInterface) validateDefaultDisplayCurrencyCode(formats strfmt.Registry) error {

	if err := validate.Required("default_display_currency_code", "body", m.DefaultDisplayCurrencyCode); err != nil {
		return err
	}

	return nil
}

func (m *StoreDataStoreConfigInterface) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *StoreDataStoreConfigInterface) validateLocale(formats strfmt.Registry) error {

	if err := validate.Required("locale", "body", m.Locale); err != nil {
		return err
	}

	return nil
}

func (m *StoreDataStoreConfigInterface) validateSecureBaseLinkURL(formats strfmt.Registry) error {

	if err := validate.Required("secure_base_link_url", "body", m.SecureBaseLinkURL); err != nil {
		return err
	}

	return nil
}

func (m *StoreDataStoreConfigInterface) validateSecureBaseMediaURL(formats strfmt.Registry) error {

	if err := validate.Required("secure_base_media_url", "body", m.SecureBaseMediaURL); err != nil {
		return err
	}

	return nil
}

func (m *StoreDataStoreConfigInterface) validateSecureBaseStaticURL(formats strfmt.Registry) error {

	if err := validate.Required("secure_base_static_url", "body", m.SecureBaseStaticURL); err != nil {
		return err
	}

	return nil
}

func (m *StoreDataStoreConfigInterface) validateSecureBaseURL(formats strfmt.Registry) error {

	if err := validate.Required("secure_base_url", "body", m.SecureBaseURL); err != nil {
		return err
	}

	return nil
}

func (m *StoreDataStoreConfigInterface) validateTimezone(formats strfmt.Registry) error {

	if err := validate.Required("timezone", "body", m.Timezone); err != nil {
		return err
	}

	return nil
}

func (m *StoreDataStoreConfigInterface) validateWebsiteID(formats strfmt.Registry) error {

	if err := validate.Required("website_id", "body", m.WebsiteID); err != nil {
		return err
	}

	return nil
}

func (m *StoreDataStoreConfigInterface) validateWeightUnit(formats strfmt.Registry) error {

	if err := validate.Required("weight_unit", "body", m.WeightUnit); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoreDataStoreConfigInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoreDataStoreConfigInterface) UnmarshalBinary(b []byte) error {
	var res StoreDataStoreConfigInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
