// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TaxDataOrderTaxDetailsItemInterface Interface OrderTaxDetailsItemInterface
// swagger:model tax-data-order-tax-details-item-interface
type TaxDataOrderTaxDetailsItemInterface struct {

	// Applied taxes
	AppliedTaxes []*TaxDataOrderTaxDetailsAppliedTaxInterface `json:"applied_taxes"`

	// Associated item id if this item is associated with another item, null otherwise
	AssociatedItemID int64 `json:"associated_item_id,omitempty"`

	// extension attributes
	ExtensionAttributes TaxDataOrderTaxDetailsItemExtensionInterface `json:"extension_attributes,omitempty"`

	// Item id if this item is a product
	ItemID int64 `json:"item_id,omitempty"`

	// Type (shipping, product, weee, gift wrapping, etc)
	Type string `json:"type,omitempty"`
}

// Validate validates this tax data order tax details item interface
func (m *TaxDataOrderTaxDetailsItemInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedTaxes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaxDataOrderTaxDetailsItemInterface) validateAppliedTaxes(formats strfmt.Registry) error {

	if swag.IsZero(m.AppliedTaxes) { // not required
		return nil
	}

	for i := 0; i < len(m.AppliedTaxes); i++ {
		if swag.IsZero(m.AppliedTaxes[i]) { // not required
			continue
		}

		if m.AppliedTaxes[i] != nil {
			if err := m.AppliedTaxes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applied_taxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaxDataOrderTaxDetailsItemInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaxDataOrderTaxDetailsItemInterface) UnmarshalBinary(b []byte) error {
	var res TaxDataOrderTaxDetailsItemInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
