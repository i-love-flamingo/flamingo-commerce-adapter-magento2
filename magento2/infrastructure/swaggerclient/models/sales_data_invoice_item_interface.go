// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalesDataInvoiceItemInterface Invoice item interface. An invoice is a record of the receipt of payment for an order. An invoice item is a purchased item in an invoice.
// swagger:model sales-data-invoice-item-interface
type SalesDataInvoiceItemInterface struct {

	// Additional data.
	AdditionalData string `json:"additional_data,omitempty"`

	// Base cost.
	BaseCost float64 `json:"base_cost,omitempty"`

	// Base discount amount.
	BaseDiscountAmount float64 `json:"base_discount_amount,omitempty"`

	// Base discount tax compensation amount.
	BaseDiscountTaxCompensationAmount float64 `json:"base_discount_tax_compensation_amount,omitempty"`

	// Base price.
	BasePrice float64 `json:"base_price,omitempty"`

	// Base price including tax.
	BasePriceInclTax float64 `json:"base_price_incl_tax,omitempty"`

	// Base row total.
	BaseRowTotal float64 `json:"base_row_total,omitempty"`

	// Base row total including tax.
	BaseRowTotalInclTax float64 `json:"base_row_total_incl_tax,omitempty"`

	// Base tax amount.
	BaseTaxAmount float64 `json:"base_tax_amount,omitempty"`

	// Description.
	Description string `json:"description,omitempty"`

	// Discount amount.
	DiscountAmount float64 `json:"discount_amount,omitempty"`

	// Discount tax compensation amount.
	DiscountTaxCompensationAmount float64 `json:"discount_tax_compensation_amount,omitempty"`

	// Invoice item ID.
	EntityID int64 `json:"entity_id,omitempty"`

	// extension attributes
	ExtensionAttributes SalesDataInvoiceItemExtensionInterface `json:"extension_attributes,omitempty"`

	// Name.
	Name string `json:"name,omitempty"`

	// Order item ID.
	// Required: true
	OrderItemID *int64 `json:"order_item_id"`

	// Parent ID.
	ParentID int64 `json:"parent_id,omitempty"`

	// Price.
	Price float64 `json:"price,omitempty"`

	// Price including tax.
	PriceInclTax float64 `json:"price_incl_tax,omitempty"`

	// Product ID.
	ProductID int64 `json:"product_id,omitempty"`

	// Quantity.
	// Required: true
	Qty *float64 `json:"qty"`

	// Row total.
	RowTotal float64 `json:"row_total,omitempty"`

	// Row total including tax.
	RowTotalInclTax float64 `json:"row_total_incl_tax,omitempty"`

	// SKU.
	// Required: true
	Sku *string `json:"sku"`

	// Tax amount.
	TaxAmount float64 `json:"tax_amount,omitempty"`
}

// Validate validates this sales data invoice item interface
func (m *SalesDataInvoiceItemInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrderItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSku(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesDataInvoiceItemInterface) validateOrderItemID(formats strfmt.Registry) error {

	if err := validate.Required("order_item_id", "body", m.OrderItemID); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataInvoiceItemInterface) validateQty(formats strfmt.Registry) error {

	if err := validate.Required("qty", "body", m.Qty); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataInvoiceItemInterface) validateSku(formats strfmt.Registry) error {

	if err := validate.Required("sku", "body", m.Sku); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesDataInvoiceItemInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesDataInvoiceItemInterface) UnmarshalBinary(b []byte) error {
	var res SalesDataInvoiceItemInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
