// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalesDataShipmentTrackInterface Shipment track interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. Merchants and customers can track shipments.
// swagger:model sales-data-shipment-track-interface
type SalesDataShipmentTrackInterface struct {

	// Carrier code.
	// Required: true
	CarrierCode *string `json:"carrier_code"`

	// Created-at timestamp.
	CreatedAt string `json:"created_at,omitempty"`

	// Description.
	// Required: true
	Description *string `json:"description"`

	// Shipment package ID.
	EntityID int64 `json:"entity_id,omitempty"`

	// extension attributes
	ExtensionAttributes SalesDataShipmentTrackExtensionInterface `json:"extension_attributes,omitempty"`

	// The order_id for the shipment package.
	// Required: true
	OrderID *int64 `json:"order_id"`

	// Parent ID.
	// Required: true
	ParentID *int64 `json:"parent_id"`

	// Quantity.
	// Required: true
	Qty *float64 `json:"qty"`

	// Title.
	// Required: true
	Title *string `json:"title"`

	// Track number.
	// Required: true
	TrackNumber *string `json:"track_number"`

	// Updated-at timestamp.
	UpdatedAt string `json:"updated_at,omitempty"`

	// Weight.
	// Required: true
	Weight *float64 `json:"weight"`
}

// Validate validates this sales data shipment track interface
func (m *SalesDataShipmentTrackInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarrierCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesDataShipmentTrackInterface) validateCarrierCode(formats strfmt.Registry) error {

	if err := validate.Required("carrier_code", "body", m.CarrierCode); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataShipmentTrackInterface) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataShipmentTrackInterface) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("order_id", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataShipmentTrackInterface) validateParentID(formats strfmt.Registry) error {

	if err := validate.Required("parent_id", "body", m.ParentID); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataShipmentTrackInterface) validateQty(formats strfmt.Registry) error {

	if err := validate.Required("qty", "body", m.Qty); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataShipmentTrackInterface) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataShipmentTrackInterface) validateTrackNumber(formats strfmt.Registry) error {

	if err := validate.Required("track_number", "body", m.TrackNumber); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataShipmentTrackInterface) validateWeight(formats strfmt.Registry) error {

	if err := validate.Required("weight", "body", m.Weight); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesDataShipmentTrackInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesDataShipmentTrackInterface) UnmarshalBinary(b []byte) error {
	var res SalesDataShipmentTrackInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
