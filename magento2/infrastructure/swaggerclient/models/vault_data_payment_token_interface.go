// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VaultDataPaymentTokenInterface Gateway vault payment token interface.
// swagger:model vault-data-payment-token-interface
type VaultDataPaymentTokenInterface struct {

	// Token creation timestamp
	CreatedAt string `json:"created_at,omitempty"`

	// Customer ID.
	CustomerID int64 `json:"customer_id,omitempty"`

	// Entity ID.
	EntityID int64 `json:"entity_id,omitempty"`

	// Token expiration timestamp
	ExpiresAt string `json:"expires_at,omitempty"`

	// Gateway token ID
	// Required: true
	GatewayToken *string `json:"gateway_token"`

	// Is active.
	// Required: true
	IsActive *bool `json:"is_active"`

	// Is visible.
	// Required: true
	IsVisible *bool `json:"is_visible"`

	// Payment method code
	// Required: true
	PaymentMethodCode *string `json:"payment_method_code"`

	// Public hash
	// Required: true
	PublicHash *string `json:"public_hash"`

	// Token details
	// Required: true
	TokenDetails *string `json:"token_details"`

	// Type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this vault data payment token interface
func (m *VaultDataPaymentTokenInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGatewayToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsVisible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethodCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VaultDataPaymentTokenInterface) validateGatewayToken(formats strfmt.Registry) error {

	if err := validate.Required("gateway_token", "body", m.GatewayToken); err != nil {
		return err
	}

	return nil
}

func (m *VaultDataPaymentTokenInterface) validateIsActive(formats strfmt.Registry) error {

	if err := validate.Required("is_active", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

func (m *VaultDataPaymentTokenInterface) validateIsVisible(formats strfmt.Registry) error {

	if err := validate.Required("is_visible", "body", m.IsVisible); err != nil {
		return err
	}

	return nil
}

func (m *VaultDataPaymentTokenInterface) validatePaymentMethodCode(formats strfmt.Registry) error {

	if err := validate.Required("payment_method_code", "body", m.PaymentMethodCode); err != nil {
		return err
	}

	return nil
}

func (m *VaultDataPaymentTokenInterface) validatePublicHash(formats strfmt.Registry) error {

	if err := validate.Required("public_hash", "body", m.PublicHash); err != nil {
		return err
	}

	return nil
}

func (m *VaultDataPaymentTokenInterface) validateTokenDetails(formats strfmt.Registry) error {

	if err := validate.Required("token_details", "body", m.TokenDetails); err != nil {
		return err
	}

	return nil
}

func (m *VaultDataPaymentTokenInterface) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VaultDataPaymentTokenInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VaultDataPaymentTokenInterface) UnmarshalBinary(b []byte) error {
	var res VaultDataPaymentTokenInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
