// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalesDataInvoiceInterface Invoice interface. An invoice is a record of the receipt of payment for an order.
// swagger:model sales-data-invoice-interface
type SalesDataInvoiceInterface struct {

	// Base currency code.
	BaseCurrencyCode string `json:"base_currency_code,omitempty"`

	// Base discount amount.
	BaseDiscountAmount float64 `json:"base_discount_amount,omitempty"`

	// Base discount tax compensation amount.
	BaseDiscountTaxCompensationAmount float64 `json:"base_discount_tax_compensation_amount,omitempty"`

	// Base grand total.
	BaseGrandTotal float64 `json:"base_grand_total,omitempty"`

	// Base shipping amount.
	BaseShippingAmount float64 `json:"base_shipping_amount,omitempty"`

	// Base shipping discount tax compensation amount.
	BaseShippingDiscountTaxCompensationAmnt float64 `json:"base_shipping_discount_tax_compensation_amnt,omitempty"`

	// Base shipping including tax.
	BaseShippingInclTax float64 `json:"base_shipping_incl_tax,omitempty"`

	// Base shipping tax amount.
	BaseShippingTaxAmount float64 `json:"base_shipping_tax_amount,omitempty"`

	// Base subtotal.
	BaseSubtotal float64 `json:"base_subtotal,omitempty"`

	// Base subtotal including tax.
	BaseSubtotalInclTax float64 `json:"base_subtotal_incl_tax,omitempty"`

	// Base tax amount.
	BaseTaxAmount float64 `json:"base_tax_amount,omitempty"`

	// Base-to-global rate.
	BaseToGlobalRate float64 `json:"base_to_global_rate,omitempty"`

	// Base-to-order rate.
	BaseToOrderRate float64 `json:"base_to_order_rate,omitempty"`

	// Base total refunded.
	BaseTotalRefunded float64 `json:"base_total_refunded,omitempty"`

	// Billing address ID.
	BillingAddressID int64 `json:"billing_address_id,omitempty"`

	// Can void flag value.
	CanVoidFlag int64 `json:"can_void_flag,omitempty"`

	// Array of any invoice comments. Otherwise, null.
	Comments []*SalesDataInvoiceCommentInterface `json:"comments"`

	// Created-at timestamp.
	CreatedAt string `json:"created_at,omitempty"`

	// Discount amount.
	DiscountAmount float64 `json:"discount_amount,omitempty"`

	// Discount description.
	DiscountDescription string `json:"discount_description,omitempty"`

	// Discount tax compensation amount.
	DiscountTaxCompensationAmount float64 `json:"discount_tax_compensation_amount,omitempty"`

	// Email-sent flag value.
	EmailSent int64 `json:"email_sent,omitempty"`

	// Invoice ID.
	EntityID int64 `json:"entity_id,omitempty"`

	// extension attributes
	ExtensionAttributes *SalesDataInvoiceExtensionInterface `json:"extension_attributes,omitempty"`

	// Global currency code.
	GlobalCurrencyCode string `json:"global_currency_code,omitempty"`

	// Grand total.
	GrandTotal float64 `json:"grand_total,omitempty"`

	// Increment ID.
	IncrementID string `json:"increment_id,omitempty"`

	// Is-used-for-refund flag value.
	IsUsedForRefund int64 `json:"is_used_for_refund,omitempty"`

	// Array of invoice items.
	// Required: true
	Items []*SalesDataInvoiceItemInterface `json:"items"`

	// Order currency code.
	OrderCurrencyCode string `json:"order_currency_code,omitempty"`

	// Order ID.
	// Required: true
	OrderID *int64 `json:"order_id"`

	// Shipping address ID.
	ShippingAddressID int64 `json:"shipping_address_id,omitempty"`

	// Shipping amount.
	ShippingAmount float64 `json:"shipping_amount,omitempty"`

	// Shipping discount tax compensation amount.
	ShippingDiscountTaxCompensationAmount float64 `json:"shipping_discount_tax_compensation_amount,omitempty"`

	// Shipping including tax.
	ShippingInclTax float64 `json:"shipping_incl_tax,omitempty"`

	// Shipping tax amount.
	ShippingTaxAmount float64 `json:"shipping_tax_amount,omitempty"`

	// State.
	State int64 `json:"state,omitempty"`

	// Store currency code.
	StoreCurrencyCode string `json:"store_currency_code,omitempty"`

	// Store ID.
	StoreID int64 `json:"store_id,omitempty"`

	// Store-to-base rate.
	StoreToBaseRate float64 `json:"store_to_base_rate,omitempty"`

	// Store-to-order rate.
	StoreToOrderRate float64 `json:"store_to_order_rate,omitempty"`

	// Subtotal.
	Subtotal float64 `json:"subtotal,omitempty"`

	// Subtotal including tax.
	SubtotalInclTax float64 `json:"subtotal_incl_tax,omitempty"`

	// Tax amount.
	TaxAmount float64 `json:"tax_amount,omitempty"`

	// Total quantity.
	// Required: true
	TotalQty *float64 `json:"total_qty"`

	// Transaction ID.
	TransactionID string `json:"transaction_id,omitempty"`

	// Updated-at timestamp.
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this sales data invoice interface
func (m *SalesDataInvoiceInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalQty(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesDataInvoiceInterface) validateComments(formats strfmt.Registry) error {

	if swag.IsZero(m.Comments) { // not required
		return nil
	}

	for i := 0; i < len(m.Comments); i++ {
		if swag.IsZero(m.Comments[i]) { // not required
			continue
		}

		if m.Comments[i] != nil {
			if err := m.Comments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("comments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalesDataInvoiceInterface) validateExtensionAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtensionAttributes) { // not required
		return nil
	}

	if m.ExtensionAttributes != nil {
		if err := m.ExtensionAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *SalesDataInvoiceInterface) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("items", "body", m.Items); err != nil {
		return err
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalesDataInvoiceInterface) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("order_id", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataInvoiceInterface) validateTotalQty(formats strfmt.Registry) error {

	if err := validate.Required("total_qty", "body", m.TotalQty); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesDataInvoiceInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesDataInvoiceInterface) UnmarshalBinary(b []byte) error {
	var res SalesDataInvoiceInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
