// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalesRuleDataRuleInterface Interface RuleInterface
// swagger:model sales-rule-data-rule-interface
type SalesRuleDataRuleInterface struct {

	// action condition
	ActionCondition *SalesRuleDataConditionInterface `json:"action_condition,omitempty"`

	// The rule applies to shipping
	// Required: true
	ApplyToShipping *bool `json:"apply_to_shipping"`

	// condition
	Condition *SalesRuleDataConditionInterface `json:"condition,omitempty"`

	// Coupon type
	// Required: true
	CouponType *string `json:"coupon_type"`

	// Ids of customer groups that the rule applies to
	// Required: true
	CustomerGroupIds []int64 `json:"customer_group_ids"`

	// Description
	Description string `json:"description,omitempty"`

	// Discount amount
	// Required: true
	DiscountAmount *float64 `json:"discount_amount"`

	// Maximum qty discount is applied
	DiscountQty float64 `json:"discount_qty,omitempty"`

	// Discount step
	// Required: true
	DiscountStep *int64 `json:"discount_step"`

	// extension attributes
	ExtensionAttributes *SalesRuleDataRuleExtensionInterface `json:"extension_attributes,omitempty"`

	// The start date when the coupon is active
	FromDate string `json:"from_date,omitempty"`

	// The coupon is active
	// Required: true
	IsActive *bool `json:"is_active"`

	// Is this field needed
	// Required: true
	IsAdvanced *bool `json:"is_advanced"`

	// Whether the rule is in RSS
	// Required: true
	IsRss *bool `json:"is_rss"`

	// Rule name
	Name string `json:"name,omitempty"`

	// Product ids
	ProductIds []int64 `json:"product_ids"`

	// Rule id
	RuleID int64 `json:"rule_id,omitempty"`

	// Simple action of the rule
	SimpleAction string `json:"simple_action,omitempty"`

	// To grant free shipping
	SimpleFreeShipping string `json:"simple_free_shipping,omitempty"`

	// Sort order
	// Required: true
	SortOrder *int64 `json:"sort_order"`

	// To stop rule processing
	// Required: true
	StopRulesProcessing *bool `json:"stop_rules_processing"`

	// Display label
	StoreLabels []*SalesRuleDataRuleLabelInterface `json:"store_labels"`

	// How many times the rule has been used
	// Required: true
	TimesUsed *int64 `json:"times_used"`

	// The end date when the coupon is active
	ToDate string `json:"to_date,omitempty"`

	// To auto generate coupon
	// Required: true
	UseAutoGeneration *bool `json:"use_auto_generation"`

	// Limit of uses per coupon
	// Required: true
	UsesPerCoupon *int64 `json:"uses_per_coupon"`

	// Number of uses per customer
	// Required: true
	UsesPerCustomer *int64 `json:"uses_per_customer"`

	// A list of websites the rule applies to
	// Required: true
	WebsiteIds []int64 `json:"website_ids"`
}

// Validate validates this sales rule data rule interface
func (m *SalesRuleDataRuleInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplyToShipping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCouponType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerGroupIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscountAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscountStep(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsAdvanced(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsRss(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopRulesProcessing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimesUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseAutoGeneration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsesPerCoupon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsesPerCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebsiteIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesRuleDataRuleInterface) validateActionCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionCondition) { // not required
		return nil
	}

	if m.ActionCondition != nil {
		if err := m.ActionCondition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action_condition")
			}
			return err
		}
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateApplyToShipping(formats strfmt.Registry) error {

	if err := validate.Required("apply_to_shipping", "body", m.ApplyToShipping); err != nil {
		return err
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.Condition) { // not required
		return nil
	}

	if m.Condition != nil {
		if err := m.Condition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("condition")
			}
			return err
		}
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateCouponType(formats strfmt.Registry) error {

	if err := validate.Required("coupon_type", "body", m.CouponType); err != nil {
		return err
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateCustomerGroupIds(formats strfmt.Registry) error {

	if err := validate.Required("customer_group_ids", "body", m.CustomerGroupIds); err != nil {
		return err
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateDiscountAmount(formats strfmt.Registry) error {

	if err := validate.Required("discount_amount", "body", m.DiscountAmount); err != nil {
		return err
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateDiscountStep(formats strfmt.Registry) error {

	if err := validate.Required("discount_step", "body", m.DiscountStep); err != nil {
		return err
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateExtensionAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtensionAttributes) { // not required
		return nil
	}

	if m.ExtensionAttributes != nil {
		if err := m.ExtensionAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateIsActive(formats strfmt.Registry) error {

	if err := validate.Required("is_active", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateIsAdvanced(formats strfmt.Registry) error {

	if err := validate.Required("is_advanced", "body", m.IsAdvanced); err != nil {
		return err
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateIsRss(formats strfmt.Registry) error {

	if err := validate.Required("is_rss", "body", m.IsRss); err != nil {
		return err
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateSortOrder(formats strfmt.Registry) error {

	if err := validate.Required("sort_order", "body", m.SortOrder); err != nil {
		return err
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateStopRulesProcessing(formats strfmt.Registry) error {

	if err := validate.Required("stop_rules_processing", "body", m.StopRulesProcessing); err != nil {
		return err
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateStoreLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.StoreLabels) { // not required
		return nil
	}

	for i := 0; i < len(m.StoreLabels); i++ {
		if swag.IsZero(m.StoreLabels[i]) { // not required
			continue
		}

		if m.StoreLabels[i] != nil {
			if err := m.StoreLabels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("store_labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateTimesUsed(formats strfmt.Registry) error {

	if err := validate.Required("times_used", "body", m.TimesUsed); err != nil {
		return err
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateUseAutoGeneration(formats strfmt.Registry) error {

	if err := validate.Required("use_auto_generation", "body", m.UseAutoGeneration); err != nil {
		return err
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateUsesPerCoupon(formats strfmt.Registry) error {

	if err := validate.Required("uses_per_coupon", "body", m.UsesPerCoupon); err != nil {
		return err
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateUsesPerCustomer(formats strfmt.Registry) error {

	if err := validate.Required("uses_per_customer", "body", m.UsesPerCustomer); err != nil {
		return err
	}

	return nil
}

func (m *SalesRuleDataRuleInterface) validateWebsiteIds(formats strfmt.Registry) error {

	if err := validate.Required("website_ids", "body", m.WebsiteIds); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesRuleDataRuleInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesRuleDataRuleInterface) UnmarshalBinary(b []byte) error {
	var res SalesRuleDataRuleInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
