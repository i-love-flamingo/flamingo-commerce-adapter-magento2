// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaxDataTaxRateInterface Tax rate interface.
// swagger:model tax-data-tax-rate-interface
type TaxDataTaxRateInterface struct {

	// Tax rate code
	// Required: true
	Code *string `json:"code"`

	// extension attributes
	ExtensionAttributes TaxDataTaxRateExtensionInterface `json:"extension_attributes,omitempty"`

	// Id
	ID int64 `json:"id,omitempty"`

	// Tax rate in percentage
	// Required: true
	Rate *float64 `json:"rate"`

	// Region name
	RegionName string `json:"region_name,omitempty"`

	// Country id
	// Required: true
	TaxCountryID *string `json:"tax_country_id"`

	// Postcode
	TaxPostcode string `json:"tax_postcode,omitempty"`

	// Region id
	TaxRegionID int64 `json:"tax_region_id,omitempty"`

	// Tax rate titles
	Titles []*TaxDataTaxRateTitleInterface `json:"titles"`

	// Zip range from
	ZipFrom int64 `json:"zip_from,omitempty"`

	// Zip is range
	ZipIsRange int64 `json:"zip_is_range,omitempty"`

	// Zip range to
	ZipTo int64 `json:"zip_to,omitempty"`
}

// Validate validates this tax data tax rate interface
func (m *TaxDataTaxRateInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxCountryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaxDataTaxRateInterface) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *TaxDataTaxRateInterface) validateRate(formats strfmt.Registry) error {

	if err := validate.Required("rate", "body", m.Rate); err != nil {
		return err
	}

	return nil
}

func (m *TaxDataTaxRateInterface) validateTaxCountryID(formats strfmt.Registry) error {

	if err := validate.Required("tax_country_id", "body", m.TaxCountryID); err != nil {
		return err
	}

	return nil
}

func (m *TaxDataTaxRateInterface) validateTitles(formats strfmt.Registry) error {

	if swag.IsZero(m.Titles) { // not required
		return nil
	}

	for i := 0; i < len(m.Titles); i++ {
		if swag.IsZero(m.Titles[i]) { // not required
			continue
		}

		if m.Titles[i] != nil {
			if err := m.Titles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("titles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaxDataTaxRateInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaxDataTaxRateInterface) UnmarshalBinary(b []byte) error {
	var res TaxDataTaxRateInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
