// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RmaDataTrackInterface Interface TrackInterface
// swagger:model rma-data-track-interface
type RmaDataTrackInterface struct {

	// Carrier code
	// Required: true
	CarrierCode *string `json:"carrier_code"`

	// Carrier title
	// Required: true
	CarrierTitle *string `json:"carrier_title"`

	// Entity id
	// Required: true
	EntityID *int64 `json:"entity_id"`

	// extension attributes
	ExtensionAttributes RmaDataTrackExtensionInterface `json:"extension_attributes,omitempty"`

	// Rma entity id
	// Required: true
	RmaEntityID *int64 `json:"rma_entity_id"`

	// Track number
	// Required: true
	TrackNumber *string `json:"track_number"`
}

// Validate validates this rma data track interface
func (m *RmaDataTrackInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarrierCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarrierTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRmaEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RmaDataTrackInterface) validateCarrierCode(formats strfmt.Registry) error {

	if err := validate.Required("carrier_code", "body", m.CarrierCode); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataTrackInterface) validateCarrierTitle(formats strfmt.Registry) error {

	if err := validate.Required("carrier_title", "body", m.CarrierTitle); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataTrackInterface) validateEntityID(formats strfmt.Registry) error {

	if err := validate.Required("entity_id", "body", m.EntityID); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataTrackInterface) validateRmaEntityID(formats strfmt.Registry) error {

	if err := validate.Required("rma_entity_id", "body", m.RmaEntityID); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataTrackInterface) validateTrackNumber(formats strfmt.Registry) error {

	if err := validate.Required("track_number", "body", m.TrackNumber); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RmaDataTrackInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RmaDataTrackInterface) UnmarshalBinary(b []byte) error {
	var res RmaDataTrackInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
