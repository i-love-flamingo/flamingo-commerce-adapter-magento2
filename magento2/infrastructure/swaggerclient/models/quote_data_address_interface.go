// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuoteDataAddressInterface Interface AddressInterface
// swagger:model quote-data-address-interface
type QuoteDataAddressInterface struct {

	// City name
	// Required: true
	City *string `json:"city"`

	// Company
	Company string `json:"company,omitempty"`

	// Country id
	// Required: true
	CountryID *string `json:"country_id"`

	// Custom attributes values.
	CustomAttributes []*FrameworkAttributeInterface `json:"custom_attributes"`

	// Customer address id
	CustomerAddressID int64 `json:"customer_address_id,omitempty"`

	// Customer id
	CustomerID int64 `json:"customer_id,omitempty"`

	// Billing/shipping email
	// Required: true
	Email *string `json:"email"`

	// extension attributes
	ExtensionAttributes *QuoteDataAddressExtensionInterface `json:"extension_attributes,omitempty"`

	// Fax number
	Fax string `json:"fax,omitempty"`

	// First name
	// Required: true
	Firstname *string `json:"firstname"`

	// Id
	ID int64 `json:"id,omitempty"`

	// Last name
	// Required: true
	Lastname *string `json:"lastname"`

	// Middle name
	Middlename string `json:"middlename,omitempty"`

	// Postcode
	// Required: true
	Postcode *string `json:"postcode"`

	// Prefix
	Prefix string `json:"prefix,omitempty"`

	// Region name
	// Required: true
	Region *string `json:"region"`

	// Region code
	// Required: true
	RegionCode *string `json:"region_code"`

	// Region id
	// Required: true
	RegionID *int64 `json:"region_id"`

	// Same as billing flag
	SameAsBilling int64 `json:"same_as_billing,omitempty"`

	// Save in address book flag
	SaveInAddressBook int64 `json:"save_in_address_book,omitempty"`

	// Street
	// Required: true
	Street []string `json:"street"`

	// Suffix
	Suffix string `json:"suffix,omitempty"`

	// Telephone number
	// Required: true
	Telephone *string `json:"telephone"`

	// Vat id
	VatID string `json:"vat_id,omitempty"`
}

// Validate validates this quote data address interface
func (m *QuoteDataAddressInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostcode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelephone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuoteDataAddressInterface) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataAddressInterface) validateCountryID(formats strfmt.Registry) error {

	if err := validate.Required("country_id", "body", m.CountryID); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataAddressInterface) validateCustomAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomAttributes); i++ {
		if swag.IsZero(m.CustomAttributes[i]) { // not required
			continue
		}

		if m.CustomAttributes[i] != nil {
			if err := m.CustomAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuoteDataAddressInterface) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataAddressInterface) validateExtensionAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtensionAttributes) { // not required
		return nil
	}

	if m.ExtensionAttributes != nil {
		if err := m.ExtensionAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *QuoteDataAddressInterface) validateFirstname(formats strfmt.Registry) error {

	if err := validate.Required("firstname", "body", m.Firstname); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataAddressInterface) validateLastname(formats strfmt.Registry) error {

	if err := validate.Required("lastname", "body", m.Lastname); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataAddressInterface) validatePostcode(formats strfmt.Registry) error {

	if err := validate.Required("postcode", "body", m.Postcode); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataAddressInterface) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataAddressInterface) validateRegionCode(formats strfmt.Registry) error {

	if err := validate.Required("region_code", "body", m.RegionCode); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataAddressInterface) validateRegionID(formats strfmt.Registry) error {

	if err := validate.Required("region_id", "body", m.RegionID); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataAddressInterface) validateStreet(formats strfmt.Registry) error {

	if err := validate.Required("street", "body", m.Street); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataAddressInterface) validateTelephone(formats strfmt.Registry) error {

	if err := validate.Required("telephone", "body", m.Telephone); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuoteDataAddressInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuoteDataAddressInterface) UnmarshalBinary(b []byte) error {
	var res QuoteDataAddressInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
