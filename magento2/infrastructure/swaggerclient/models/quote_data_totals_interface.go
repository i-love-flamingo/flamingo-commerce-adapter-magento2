// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuoteDataTotalsInterface Interface TotalsInterface
// swagger:model quote-data-totals-interface
type QuoteDataTotalsInterface struct {

	// Base currency code
	BaseCurrencyCode string `json:"base_currency_code,omitempty"`

	// Discount amount in base currency
	BaseDiscountAmount float64 `json:"base_discount_amount,omitempty"`

	// Grand total in base currency
	BaseGrandTotal float64 `json:"base_grand_total,omitempty"`

	// Shipping amount in base currency
	BaseShippingAmount float64 `json:"base_shipping_amount,omitempty"`

	// Shipping discount amount in base currency
	BaseShippingDiscountAmount float64 `json:"base_shipping_discount_amount,omitempty"`

	// Shipping including tax in base currency
	BaseShippingInclTax float64 `json:"base_shipping_incl_tax,omitempty"`

	// Shipping tax amount in base currency
	BaseShippingTaxAmount float64 `json:"base_shipping_tax_amount,omitempty"`

	// Subtotal in base currency
	BaseSubtotal float64 `json:"base_subtotal,omitempty"`

	// Subtotal including tax in base currency
	BaseSubtotalInclTax float64 `json:"base_subtotal_incl_tax,omitempty"`

	// Subtotal in base currency with applied discount
	BaseSubtotalWithDiscount float64 `json:"base_subtotal_with_discount,omitempty"`

	// Tax amount in base currency
	BaseTaxAmount float64 `json:"base_tax_amount,omitempty"`

	// Applied coupon code
	CouponCode string `json:"coupon_code,omitempty"`

	// Discount amount in quote currency
	DiscountAmount float64 `json:"discount_amount,omitempty"`

	// extension attributes
	ExtensionAttributes *QuoteDataTotalsExtensionInterface `json:"extension_attributes,omitempty"`

	// Grand total in quote currency
	GrandTotal float64 `json:"grand_total,omitempty"`

	// Totals by items
	Items []*QuoteDataTotalsItemInterface `json:"items"`

	// Items qty
	ItemsQty int64 `json:"items_qty,omitempty"`

	// Quote currency code
	QuoteCurrencyCode string `json:"quote_currency_code,omitempty"`

	// Shipping amount in quote currency
	ShippingAmount float64 `json:"shipping_amount,omitempty"`

	// Shipping discount amount in quote currency
	ShippingDiscountAmount float64 `json:"shipping_discount_amount,omitempty"`

	// Shipping including tax in quote currency
	ShippingInclTax float64 `json:"shipping_incl_tax,omitempty"`

	// Shipping tax amount in quote currency
	ShippingTaxAmount float64 `json:"shipping_tax_amount,omitempty"`

	// Subtotal in quote currency
	Subtotal float64 `json:"subtotal,omitempty"`

	// Subtotal including tax in quote currency
	SubtotalInclTax float64 `json:"subtotal_incl_tax,omitempty"`

	// Subtotal in quote currency with applied discount
	SubtotalWithDiscount float64 `json:"subtotal_with_discount,omitempty"`

	// Tax amount in quote currency
	TaxAmount float64 `json:"tax_amount,omitempty"`

	// Dynamically calculated totals
	// Required: true
	TotalSegments []*QuoteDataTotalSegmentInterface `json:"total_segments"`

	// Item weee tax applied amount in quote currency.
	// Required: true
	WeeeTaxAppliedAmount *float64 `json:"weee_tax_applied_amount"`
}

// Validate validates this quote data totals interface
func (m *QuoteDataTotalsInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSegments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeeeTaxAppliedAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuoteDataTotalsInterface) validateExtensionAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtensionAttributes) { // not required
		return nil
	}

	if m.ExtensionAttributes != nil {
		if err := m.ExtensionAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *QuoteDataTotalsInterface) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuoteDataTotalsInterface) validateTotalSegments(formats strfmt.Registry) error {

	if err := validate.Required("total_segments", "body", m.TotalSegments); err != nil {
		return err
	}

	for i := 0; i < len(m.TotalSegments); i++ {
		if swag.IsZero(m.TotalSegments[i]) { // not required
			continue
		}

		if m.TotalSegments[i] != nil {
			if err := m.TotalSegments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("total_segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuoteDataTotalsInterface) validateWeeeTaxAppliedAmount(formats strfmt.Registry) error {

	if err := validate.Required("weee_tax_applied_amount", "body", m.WeeeTaxAppliedAmount); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuoteDataTotalsInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuoteDataTotalsInterface) UnmarshalBinary(b []byte) error {
	var res QuoteDataTotalsInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
