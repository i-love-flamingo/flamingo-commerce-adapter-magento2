// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuoteDataCartItemInterface Interface CartItemInterface
// swagger:model quote-data-cart-item-interface
type QuoteDataCartItemInterface struct {

	// extension attributes
	ExtensionAttributes *QuoteDataCartItemExtensionInterface `json:"extension_attributes,omitempty"`

	// Item ID. Otherwise, null.
	ItemID int64 `json:"item_id,omitempty"`

	// Product name. Otherwise, null.
	Name string `json:"name,omitempty"`

	// Product price. Otherwise, null.
	Price float64 `json:"price,omitempty"`

	// product option
	ProductOption *QuoteDataProductOptionInterface `json:"product_option,omitempty"`

	// Product type. Otherwise, null.
	ProductType string `json:"product_type,omitempty"`

	// Product quantity.
	// Required: true
	Qty *float64 `json:"qty"`

	// Quote id.
	// Required: true
	QuoteID *string `json:"quote_id"`

	// Product SKU. Otherwise, null.
	Sku string `json:"sku,omitempty"`
}

// Validate validates this quote data cart item interface
func (m *QuoteDataCartItemInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuoteID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuoteDataCartItemInterface) validateExtensionAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtensionAttributes) { // not required
		return nil
	}

	if m.ExtensionAttributes != nil {
		if err := m.ExtensionAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *QuoteDataCartItemInterface) validateProductOption(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductOption) { // not required
		return nil
	}

	if m.ProductOption != nil {
		if err := m.ProductOption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product_option")
			}
			return err
		}
	}

	return nil
}

func (m *QuoteDataCartItemInterface) validateQty(formats strfmt.Registry) error {

	if err := validate.Required("qty", "body", m.Qty); err != nil {
		return err
	}

	return nil
}

func (m *QuoteDataCartItemInterface) validateQuoteID(formats strfmt.Registry) error {

	if err := validate.Required("quote_id", "body", m.QuoteID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuoteDataCartItemInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuoteDataCartItemInterface) UnmarshalBinary(b []byte) error {
	var res QuoteDataCartItemInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
