// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FrameworkDataVideoContentInterface Video Content data interface
// swagger:model framework-data-video-content-interface
type FrameworkDataVideoContentInterface struct {

	// MIME type
	// Required: true
	MediaType *string `json:"media_type"`

	// Video Description
	// Required: true
	VideoDescription *string `json:"video_description"`

	// Metadata
	// Required: true
	VideoMetadata *string `json:"video_metadata"`

	// Provider
	// Required: true
	VideoProvider *string `json:"video_provider"`

	// Title
	// Required: true
	VideoTitle *string `json:"video_title"`

	// Video URL
	// Required: true
	VideoURL *string `json:"video_url"`
}

// Validate validates this framework data video content interface
func (m *FrameworkDataVideoContentInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideoDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideoMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideoProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideoTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideoURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FrameworkDataVideoContentInterface) validateMediaType(formats strfmt.Registry) error {

	if err := validate.Required("media_type", "body", m.MediaType); err != nil {
		return err
	}

	return nil
}

func (m *FrameworkDataVideoContentInterface) validateVideoDescription(formats strfmt.Registry) error {

	if err := validate.Required("video_description", "body", m.VideoDescription); err != nil {
		return err
	}

	return nil
}

func (m *FrameworkDataVideoContentInterface) validateVideoMetadata(formats strfmt.Registry) error {

	if err := validate.Required("video_metadata", "body", m.VideoMetadata); err != nil {
		return err
	}

	return nil
}

func (m *FrameworkDataVideoContentInterface) validateVideoProvider(formats strfmt.Registry) error {

	if err := validate.Required("video_provider", "body", m.VideoProvider); err != nil {
		return err
	}

	return nil
}

func (m *FrameworkDataVideoContentInterface) validateVideoTitle(formats strfmt.Registry) error {

	if err := validate.Required("video_title", "body", m.VideoTitle); err != nil {
		return err
	}

	return nil
}

func (m *FrameworkDataVideoContentInterface) validateVideoURL(formats strfmt.Registry) error {

	if err := validate.Required("video_url", "body", m.VideoURL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FrameworkDataVideoContentInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FrameworkDataVideoContentInterface) UnmarshalBinary(b []byte) error {
	var res FrameworkDataVideoContentInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
