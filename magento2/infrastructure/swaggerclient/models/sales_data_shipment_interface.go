// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalesDataShipmentInterface Shipment interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.
// swagger:model sales-data-shipment-interface
type SalesDataShipmentInterface struct {

	// Billing address ID.
	BillingAddressID int64 `json:"billing_address_id,omitempty"`

	// Array of comments.
	// Required: true
	Comments []*SalesDataShipmentCommentInterface `json:"comments"`

	// Created-at timestamp.
	CreatedAt string `json:"created_at,omitempty"`

	// Customer ID.
	CustomerID int64 `json:"customer_id,omitempty"`

	// Email-sent flag value.
	EmailSent int64 `json:"email_sent,omitempty"`

	// Shipment ID.
	EntityID int64 `json:"entity_id,omitempty"`

	// extension attributes
	ExtensionAttributes SalesDataShipmentExtensionInterface `json:"extension_attributes,omitempty"`

	// Increment ID.
	IncrementID string `json:"increment_id,omitempty"`

	// Array of items.
	// Required: true
	Items []*SalesDataShipmentItemInterface `json:"items"`

	// Order ID.
	// Required: true
	OrderID *int64 `json:"order_id"`

	// Array of packages, if any. Otherwise, null.
	Packages []*SalesDataShipmentPackageInterface `json:"packages"`

	// Shipment status.
	ShipmentStatus int64 `json:"shipment_status,omitempty"`

	// Shipping address ID.
	ShippingAddressID int64 `json:"shipping_address_id,omitempty"`

	// Shipping label.
	ShippingLabel string `json:"shipping_label,omitempty"`

	// Store ID.
	StoreID int64 `json:"store_id,omitempty"`

	// Total quantity.
	TotalQty float64 `json:"total_qty,omitempty"`

	// Total weight.
	TotalWeight float64 `json:"total_weight,omitempty"`

	// Array of tracks.
	// Required: true
	Tracks []*SalesDataShipmentTrackInterface `json:"tracks"`

	// Updated-at timestamp.
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this sales data shipment interface
func (m *SalesDataShipmentInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTracks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesDataShipmentInterface) validateComments(formats strfmt.Registry) error {

	if err := validate.Required("comments", "body", m.Comments); err != nil {
		return err
	}

	for i := 0; i < len(m.Comments); i++ {
		if swag.IsZero(m.Comments[i]) { // not required
			continue
		}

		if m.Comments[i] != nil {
			if err := m.Comments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("comments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalesDataShipmentInterface) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("items", "body", m.Items); err != nil {
		return err
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalesDataShipmentInterface) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("order_id", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataShipmentInterface) validatePackages(formats strfmt.Registry) error {

	if swag.IsZero(m.Packages) { // not required
		return nil
	}

	for i := 0; i < len(m.Packages); i++ {
		if swag.IsZero(m.Packages[i]) { // not required
			continue
		}

		if m.Packages[i] != nil {
			if err := m.Packages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalesDataShipmentInterface) validateTracks(formats strfmt.Registry) error {

	if err := validate.Required("tracks", "body", m.Tracks); err != nil {
		return err
	}

	for i := 0; i < len(m.Tracks); i++ {
		if swag.IsZero(m.Tracks[i]) { // not required
			continue
		}

		if m.Tracks[i] != nil {
			if err := m.Tracks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tracks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesDataShipmentInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesDataShipmentInterface) UnmarshalBinary(b []byte) error {
	var res SalesDataShipmentInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
