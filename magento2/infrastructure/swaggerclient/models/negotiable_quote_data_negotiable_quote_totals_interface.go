// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NegotiableQuoteDataNegotiableQuoteTotalsInterface Extension attribute for quote totals model.
// swagger:model negotiable-quote-data-negotiable-quote-totals-interface
type NegotiableQuoteDataNegotiableQuoteTotalsInterface struct {

	// Total cost for quote in base currency.
	// Required: true
	BaseCostTotal *float64 `json:"base_cost_total"`

	// Original price with included tax for quote in base currency.
	// Required: true
	BaseOriginalPriceInclTax *float64 `json:"base_original_price_incl_tax"`

	// Original tax amount for quote in base currency.
	// Required: true
	BaseOriginalTax *float64 `json:"base_original_tax"`

	// Original quote total in base currency.
	// Required: true
	BaseOriginalTotal *float64 `json:"base_original_total"`

	// Base currency to quote currency rate.
	// Required: true
	BaseToQuoteRate *float64 `json:"base_to_quote_rate"`

	// Total cost for quote.
	// Required: true
	CostTotal *float64 `json:"cost_total"`

	// The cart creation date and time.
	// Required: true
	CreatedAt *string `json:"created_at"`

	// Customer group id.
	// Required: true
	CustomerGroup *int64 `json:"customer_group"`

	// The number of different items or products in the cart.
	// Required: true
	ItemsCount *int64 `json:"items_count"`

	// Negotiable quote type.
	// Required: true
	NegotiatedPriceType *int64 `json:"negotiated_price_type"`

	// Negotiable price value for quote.
	// Required: true
	NegotiatedPriceValue *float64 `json:"negotiated_price_value"`

	// Original price with included tax for quote.
	// Required: true
	OriginalPriceInclTax *float64 `json:"original_price_incl_tax"`

	// Original tax amount for quote.
	// Required: true
	OriginalTax *float64 `json:"original_tax"`

	// Original quote total.
	// Required: true
	OriginalTotal *float64 `json:"original_total"`

	// Negotiable quote status.
	// Required: true
	QuoteStatus *string `json:"quote_status"`

	// The cart last update date and time.
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this negotiable quote data negotiable quote totals interface
func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseCostTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseOriginalPriceInclTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseOriginalTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseOriginalTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseToQuoteRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCostTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemsCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNegotiatedPriceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNegotiatedPriceValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalPriceInclTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuoteStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateBaseCostTotal(formats strfmt.Registry) error {

	if err := validate.Required("base_cost_total", "body", m.BaseCostTotal); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateBaseOriginalPriceInclTax(formats strfmt.Registry) error {

	if err := validate.Required("base_original_price_incl_tax", "body", m.BaseOriginalPriceInclTax); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateBaseOriginalTax(formats strfmt.Registry) error {

	if err := validate.Required("base_original_tax", "body", m.BaseOriginalTax); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateBaseOriginalTotal(formats strfmt.Registry) error {

	if err := validate.Required("base_original_total", "body", m.BaseOriginalTotal); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateBaseToQuoteRate(formats strfmt.Registry) error {

	if err := validate.Required("base_to_quote_rate", "body", m.BaseToQuoteRate); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateCostTotal(formats strfmt.Registry) error {

	if err := validate.Required("cost_total", "body", m.CostTotal); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateCustomerGroup(formats strfmt.Registry) error {

	if err := validate.Required("customer_group", "body", m.CustomerGroup); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateItemsCount(formats strfmt.Registry) error {

	if err := validate.Required("items_count", "body", m.ItemsCount); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateNegotiatedPriceType(formats strfmt.Registry) error {

	if err := validate.Required("negotiated_price_type", "body", m.NegotiatedPriceType); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateNegotiatedPriceValue(formats strfmt.Registry) error {

	if err := validate.Required("negotiated_price_value", "body", m.NegotiatedPriceValue); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateOriginalPriceInclTax(formats strfmt.Registry) error {

	if err := validate.Required("original_price_incl_tax", "body", m.OriginalPriceInclTax); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateOriginalTax(formats strfmt.Registry) error {

	if err := validate.Required("original_tax", "body", m.OriginalTax); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateOriginalTotal(formats strfmt.Registry) error {

	if err := validate.Required("original_total", "body", m.OriginalTotal); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateQuoteStatus(formats strfmt.Registry) error {

	if err := validate.Required("quote_status", "body", m.QuoteStatus); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NegotiableQuoteDataNegotiableQuoteTotalsInterface) UnmarshalBinary(b []byte) error {
	var res NegotiableQuoteDataNegotiableQuoteTotalsInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
