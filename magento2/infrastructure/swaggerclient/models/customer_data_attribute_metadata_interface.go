// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerDataAttributeMetadataInterface Customer attribute metadata interface.
// swagger:model customer-data-attribute-metadata-interface
type CustomerDataAttributeMetadataInterface struct {

	// Code of the attribute.
	// Required: true
	AttributeCode *string `json:"attribute_code"`

	// Backend type.
	// Required: true
	BackendType *string `json:"backend_type"`

	// Data model for attribute.
	// Required: true
	DataModel *string `json:"data_model"`

	// Class which is used to display the attribute on frontend.
	// Required: true
	FrontendClass *string `json:"frontend_class"`

	// HTML for input element.
	// Required: true
	FrontendInput *string `json:"frontend_input"`

	// Label which supposed to be displayed on frontend.
	// Required: true
	FrontendLabel *string `json:"frontend_label"`

	// Template used for input (e.g. "date")
	// Required: true
	InputFilter *string `json:"input_filter"`

	// It is filterable in customer grid
	IsFilterableInGrid bool `json:"is_filterable_in_grid,omitempty"`

	// It is searchable in customer grid
	IsSearchableInGrid bool `json:"is_searchable_in_grid,omitempty"`

	// It is used in customer grid
	IsUsedInGrid bool `json:"is_used_in_grid,omitempty"`

	// It is visible in customer grid
	IsVisibleInGrid bool `json:"is_visible_in_grid,omitempty"`

	// Of lines of the attribute value.
	// Required: true
	MultilineCount *int64 `json:"multiline_count"`

	// The note attribute for the element.
	// Required: true
	Note *string `json:"note"`

	// Options of the attribute (key => value pairs for select)
	// Required: true
	Options []*CustomerDataOptionInterface `json:"options"`

	// Attribute is required.
	// Required: true
	Required *bool `json:"required"`

	// Attributes sort order.
	// Required: true
	SortOrder *int64 `json:"sort_order"`

	// Label of the store.
	// Required: true
	StoreLabel *string `json:"store_label"`

	// This is a system attribute.
	// Required: true
	System *bool `json:"system"`

	// Current attribute has been defined by a user.
	// Required: true
	UserDefined *bool `json:"user_defined"`

	// Validation rules.
	// Required: true
	ValidationRules []*CustomerDataValidationRuleInterface `json:"validation_rules"`

	// Attribute is visible on frontend.
	// Required: true
	Visible *bool `json:"visible"`
}

// Validate validates this customer data attribute metadata interface
func (m *CustomerDataAttributeMetadataInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackendType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrontendClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrontendInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrontendLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMultilineCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDefined(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisible(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateAttributeCode(formats strfmt.Registry) error {

	if err := validate.Required("attribute_code", "body", m.AttributeCode); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateBackendType(formats strfmt.Registry) error {

	if err := validate.Required("backend_type", "body", m.BackendType); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateDataModel(formats strfmt.Registry) error {

	if err := validate.Required("data_model", "body", m.DataModel); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateFrontendClass(formats strfmt.Registry) error {

	if err := validate.Required("frontend_class", "body", m.FrontendClass); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateFrontendInput(formats strfmt.Registry) error {

	if err := validate.Required("frontend_input", "body", m.FrontendInput); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateFrontendLabel(formats strfmt.Registry) error {

	if err := validate.Required("frontend_label", "body", m.FrontendLabel); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateInputFilter(formats strfmt.Registry) error {

	if err := validate.Required("input_filter", "body", m.InputFilter); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateMultilineCount(formats strfmt.Registry) error {

	if err := validate.Required("multiline_count", "body", m.MultilineCount); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateNote(formats strfmt.Registry) error {

	if err := validate.Required("note", "body", m.Note); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateOptions(formats strfmt.Registry) error {

	if err := validate.Required("options", "body", m.Options); err != nil {
		return err
	}

	for i := 0; i < len(m.Options); i++ {
		if swag.IsZero(m.Options[i]) { // not required
			continue
		}

		if m.Options[i] != nil {
			if err := m.Options[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateRequired(formats strfmt.Registry) error {

	if err := validate.Required("required", "body", m.Required); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateSortOrder(formats strfmt.Registry) error {

	if err := validate.Required("sort_order", "body", m.SortOrder); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateStoreLabel(formats strfmt.Registry) error {

	if err := validate.Required("store_label", "body", m.StoreLabel); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateSystem(formats strfmt.Registry) error {

	if err := validate.Required("system", "body", m.System); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateUserDefined(formats strfmt.Registry) error {

	if err := validate.Required("user_defined", "body", m.UserDefined); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateValidationRules(formats strfmt.Registry) error {

	if err := validate.Required("validation_rules", "body", m.ValidationRules); err != nil {
		return err
	}

	for i := 0; i < len(m.ValidationRules); i++ {
		if swag.IsZero(m.ValidationRules[i]) { // not required
			continue
		}

		if m.ValidationRules[i] != nil {
			if err := m.ValidationRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validation_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CustomerDataAttributeMetadataInterface) validateVisible(formats strfmt.Registry) error {

	if err := validate.Required("visible", "body", m.Visible); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerDataAttributeMetadataInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerDataAttributeMetadataInterface) UnmarshalBinary(b []byte) error {
	var res CustomerDataAttributeMetadataInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
