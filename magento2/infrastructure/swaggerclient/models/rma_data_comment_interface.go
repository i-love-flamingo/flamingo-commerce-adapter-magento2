// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RmaDataCommentInterface Interface CommentInterface
// swagger:model rma-data-comment-interface
type RmaDataCommentInterface struct {

	// Is_admin
	// Required: true
	Admin *bool `json:"admin"`

	// Comment
	// Required: true
	Comment *string `json:"comment"`

	// Created_at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// Custom attributes values.
	CustomAttributes []*FrameworkAttributeInterface `json:"custom_attributes"`

	// Is_customer_notified
	// Required: true
	CustomerNotified *bool `json:"customer_notified"`

	// Entity_id
	// Required: true
	EntityID *int64 `json:"entity_id"`

	// extension attributes
	ExtensionAttributes RmaDataCommentExtensionInterface `json:"extension_attributes,omitempty"`

	// Rma Id
	// Required: true
	RmaEntityID *int64 `json:"rma_entity_id"`

	// Status
	// Required: true
	Status *string `json:"status"`

	// Is_visible_on_front
	// Required: true
	VisibleOnFront *bool `json:"visible_on_front"`
}

// Validate validates this rma data comment interface
func (m *RmaDataCommentInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdmin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerNotified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRmaEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibleOnFront(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RmaDataCommentInterface) validateAdmin(formats strfmt.Registry) error {

	if err := validate.Required("admin", "body", m.Admin); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataCommentInterface) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataCommentInterface) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataCommentInterface) validateCustomAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomAttributes); i++ {
		if swag.IsZero(m.CustomAttributes[i]) { // not required
			continue
		}

		if m.CustomAttributes[i] != nil {
			if err := m.CustomAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RmaDataCommentInterface) validateCustomerNotified(formats strfmt.Registry) error {

	if err := validate.Required("customer_notified", "body", m.CustomerNotified); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataCommentInterface) validateEntityID(formats strfmt.Registry) error {

	if err := validate.Required("entity_id", "body", m.EntityID); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataCommentInterface) validateRmaEntityID(formats strfmt.Registry) error {

	if err := validate.Required("rma_entity_id", "body", m.RmaEntityID); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataCommentInterface) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *RmaDataCommentInterface) validateVisibleOnFront(formats strfmt.Registry) error {

	if err := validate.Required("visible_on_front", "body", m.VisibleOnFront); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RmaDataCommentInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RmaDataCommentInterface) UnmarshalBinary(b []byte) error {
	var res RmaDataCommentInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
