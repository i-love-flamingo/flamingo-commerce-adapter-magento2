// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogDataProductLinkInterface catalog data product link interface
// swagger:model catalog-data-product-link-interface
type CatalogDataProductLinkInterface struct {

	// extension attributes
	ExtensionAttributes *CatalogDataProductLinkExtensionInterface `json:"extension_attributes,omitempty"`

	// Link type
	// Required: true
	LinkType *string `json:"link_type"`

	// Linked product sku
	// Required: true
	LinkedProductSku *string `json:"linked_product_sku"`

	// Linked product type (simple, virtual, etc)
	// Required: true
	LinkedProductType *string `json:"linked_product_type"`

	// Linked item position
	// Required: true
	Position *int64 `json:"position"`

	// SKU
	// Required: true
	Sku *string `json:"sku"`
}

// Validate validates this catalog data product link interface
func (m *CatalogDataProductLinkInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkedProductSku(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkedProductType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSku(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogDataProductLinkInterface) validateExtensionAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtensionAttributes) { // not required
		return nil
	}

	if m.ExtensionAttributes != nil {
		if err := m.ExtensionAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogDataProductLinkInterface) validateLinkType(formats strfmt.Registry) error {

	if err := validate.Required("link_type", "body", m.LinkType); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductLinkInterface) validateLinkedProductSku(formats strfmt.Registry) error {

	if err := validate.Required("linked_product_sku", "body", m.LinkedProductSku); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductLinkInterface) validateLinkedProductType(formats strfmt.Registry) error {

	if err := validate.Required("linked_product_type", "body", m.LinkedProductType); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductLinkInterface) validatePosition(formats strfmt.Registry) error {

	if err := validate.Required("position", "body", m.Position); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductLinkInterface) validateSku(formats strfmt.Registry) error {

	if err := validate.Required("sku", "body", m.Sku); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogDataProductLinkInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogDataProductLinkInterface) UnmarshalBinary(b []byte) error {
	var res CatalogDataProductLinkInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
