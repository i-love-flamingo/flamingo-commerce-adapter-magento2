// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NegotiableQuoteDataCommentInterface Interface CommentInterface
// swagger:model negotiable-quote-data-comment-interface
type NegotiableQuoteDataCommentInterface struct {

	// Existing attachments.
	// Required: true
	Attachments []*NegotiableQuoteDataCommentAttachmentInterface `json:"attachments"`

	// Comment.
	// Required: true
	Comment *string `json:"comment"`

	// Comment created at.
	// Required: true
	CreatedAt *string `json:"created_at"`

	// Comment creator ID.
	// Required: true
	CreatorID *int64 `json:"creator_id"`

	// The comment creator type.
	// Required: true
	CreatorType *int64 `json:"creator_type"`

	// Comment ID.
	// Required: true
	EntityID *int64 `json:"entity_id"`

	// extension attributes
	ExtensionAttributes NegotiableQuoteDataCommentExtensionInterface `json:"extension_attributes,omitempty"`

	// Is quote was declined by seller.
	// Required: true
	IsDecline *int64 `json:"is_decline"`

	// Is quote draft flag.
	// Required: true
	IsDraft *int64 `json:"is_draft"`

	// Negotiable quote ID, that this comment belongs to.
	// Required: true
	ParentID *int64 `json:"parent_id"`
}

// Validate validates this negotiable quote data comment interface
func (m *NegotiableQuoteDataCommentInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsDecline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsDraft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NegotiableQuoteDataCommentInterface) validateAttachments(formats strfmt.Registry) error {

	if err := validate.Required("attachments", "body", m.Attachments); err != nil {
		return err
	}

	for i := 0; i < len(m.Attachments); i++ {
		if swag.IsZero(m.Attachments[i]) { // not required
			continue
		}

		if m.Attachments[i] != nil {
			if err := m.Attachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NegotiableQuoteDataCommentInterface) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataCommentInterface) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataCommentInterface) validateCreatorID(formats strfmt.Registry) error {

	if err := validate.Required("creator_id", "body", m.CreatorID); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataCommentInterface) validateCreatorType(formats strfmt.Registry) error {

	if err := validate.Required("creator_type", "body", m.CreatorType); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataCommentInterface) validateEntityID(formats strfmt.Registry) error {

	if err := validate.Required("entity_id", "body", m.EntityID); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataCommentInterface) validateIsDecline(formats strfmt.Registry) error {

	if err := validate.Required("is_decline", "body", m.IsDecline); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataCommentInterface) validateIsDraft(formats strfmt.Registry) error {

	if err := validate.Required("is_draft", "body", m.IsDraft); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataCommentInterface) validateParentID(formats strfmt.Registry) error {

	if err := validate.Required("parent_id", "body", m.ParentID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NegotiableQuoteDataCommentInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NegotiableQuoteDataCommentInterface) UnmarshalBinary(b []byte) error {
	var res NegotiableQuoteDataCommentInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
