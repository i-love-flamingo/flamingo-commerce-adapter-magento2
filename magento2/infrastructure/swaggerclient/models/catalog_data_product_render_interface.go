// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogDataProductRenderInterface Represents Data Object which holds enough information to render product This information is put into part as Add To Cart or Add to Compare Data or Price Data
// swagger:model catalog-data-product-render-interface
type CatalogDataProductRenderInterface struct {

	// add to cart button
	// Required: true
	AddToCartButton *CatalogDataProductRenderButtonInterface `json:"add_to_cart_button"`

	// add to compare button
	// Required: true
	AddToCompareButton *CatalogDataProductRenderButtonInterface `json:"add_to_compare_button"`

	// Current or desired currency code to product
	// Required: true
	CurrencyCode *string `json:"currency_code"`

	// extension attributes
	// Required: true
	ExtensionAttributes *CatalogDataProductRenderExtensionInterface `json:"extension_attributes"`

	// Product identifier
	// Required: true
	ID *int64 `json:"id"`

	// Enough information, that needed to render image on front
	// Required: true
	Images []*CatalogDataProductRenderImageInterface `json:"images"`

	// Information about product saleability (In Stock)
	// Required: true
	IsSalable *string `json:"is_salable"`

	// Product name
	// Required: true
	Name *string `json:"name"`

	// price info
	// Required: true
	PriceInfo *CatalogDataProductRenderPriceInfoInterface `json:"price_info"`

	// Information about current store id or requested store id
	// Required: true
	StoreID *int64 `json:"store_id"`

	// Product type. Such as bundle, grouped, simple, etc...
	// Required: true
	Type *string `json:"type"`

	// Product url
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this catalog data product render interface
func (m *CatalogDataProductRenderInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddToCartButton(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddToCompareButton(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrencyCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsSalable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogDataProductRenderInterface) validateAddToCartButton(formats strfmt.Registry) error {

	if err := validate.Required("add_to_cart_button", "body", m.AddToCartButton); err != nil {
		return err
	}

	if m.AddToCartButton != nil {
		if err := m.AddToCartButton.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("add_to_cart_button")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogDataProductRenderInterface) validateAddToCompareButton(formats strfmt.Registry) error {

	if err := validate.Required("add_to_compare_button", "body", m.AddToCompareButton); err != nil {
		return err
	}

	if m.AddToCompareButton != nil {
		if err := m.AddToCompareButton.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("add_to_compare_button")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogDataProductRenderInterface) validateCurrencyCode(formats strfmt.Registry) error {

	if err := validate.Required("currency_code", "body", m.CurrencyCode); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductRenderInterface) validateExtensionAttributes(formats strfmt.Registry) error {

	if err := validate.Required("extension_attributes", "body", m.ExtensionAttributes); err != nil {
		return err
	}

	if m.ExtensionAttributes != nil {
		if err := m.ExtensionAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogDataProductRenderInterface) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductRenderInterface) validateImages(formats strfmt.Registry) error {

	if err := validate.Required("images", "body", m.Images); err != nil {
		return err
	}

	for i := 0; i < len(m.Images); i++ {
		if swag.IsZero(m.Images[i]) { // not required
			continue
		}

		if m.Images[i] != nil {
			if err := m.Images[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogDataProductRenderInterface) validateIsSalable(formats strfmt.Registry) error {

	if err := validate.Required("is_salable", "body", m.IsSalable); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductRenderInterface) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductRenderInterface) validatePriceInfo(formats strfmt.Registry) error {

	if err := validate.Required("price_info", "body", m.PriceInfo); err != nil {
		return err
	}

	if m.PriceInfo != nil {
		if err := m.PriceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price_info")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogDataProductRenderInterface) validateStoreID(formats strfmt.Registry) error {

	if err := validate.Required("store_id", "body", m.StoreID); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductRenderInterface) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductRenderInterface) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogDataProductRenderInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogDataProductRenderInterface) UnmarshalBinary(b []byte) error {
	var res CatalogDataProductRenderInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
