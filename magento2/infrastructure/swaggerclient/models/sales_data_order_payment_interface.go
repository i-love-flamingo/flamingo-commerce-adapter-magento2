// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalesDataOrderPaymentInterface Order payment interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.
// swagger:model sales-data-order-payment-interface
type SalesDataOrderPaymentInterface struct {

	// Account status.
	// Required: true
	AccountStatus *string `json:"account_status"`

	// Additional data.
	AdditionalData string `json:"additional_data,omitempty"`

	// Array of additional information.
	// Required: true
	AdditionalInformation []string `json:"additional_information"`

	// Address status.
	AddressStatus string `json:"address_status,omitempty"`

	// Amount authorized.
	AmountAuthorized float64 `json:"amount_authorized,omitempty"`

	// Amount canceled.
	AmountCanceled float64 `json:"amount_canceled,omitempty"`

	// Amount ordered.
	AmountOrdered float64 `json:"amount_ordered,omitempty"`

	// Amount paid.
	AmountPaid float64 `json:"amount_paid,omitempty"`

	// Amount refunded.
	AmountRefunded float64 `json:"amount_refunded,omitempty"`

	// Anet transaction method.
	AnetTransMethod string `json:"anet_trans_method,omitempty"`

	// Base amount authorized.
	BaseAmountAuthorized float64 `json:"base_amount_authorized,omitempty"`

	// Base amount canceled.
	BaseAmountCanceled float64 `json:"base_amount_canceled,omitempty"`

	// Base amount ordered.
	BaseAmountOrdered float64 `json:"base_amount_ordered,omitempty"`

	// Base amount paid.
	BaseAmountPaid float64 `json:"base_amount_paid,omitempty"`

	// Base amount paid online.
	BaseAmountPaidOnline float64 `json:"base_amount_paid_online,omitempty"`

	// Base amount refunded.
	BaseAmountRefunded float64 `json:"base_amount_refunded,omitempty"`

	// Base amount refunded online.
	BaseAmountRefundedOnline float64 `json:"base_amount_refunded_online,omitempty"`

	// Base shipping amount.
	BaseShippingAmount float64 `json:"base_shipping_amount,omitempty"`

	// Base shipping captured amount.
	BaseShippingCaptured float64 `json:"base_shipping_captured,omitempty"`

	// Base shipping refunded amount.
	BaseShippingRefunded float64 `json:"base_shipping_refunded,omitempty"`

	// Credit card approval.
	CcApproval string `json:"cc_approval,omitempty"`

	// Credit card avs status.
	CcAvsStatus string `json:"cc_avs_status,omitempty"`

	// Credit card CID status.
	CcCidStatus string `json:"cc_cid_status,omitempty"`

	// Credit card debug request body.
	CcDebugRequestBody string `json:"cc_debug_request_body,omitempty"`

	// Credit card debug response body.
	CcDebugResponseBody string `json:"cc_debug_response_body,omitempty"`

	// Credit card debug response serialized.
	CcDebugResponseSerialized string `json:"cc_debug_response_serialized,omitempty"`

	// Credit card expiration month.
	CcExpMonth string `json:"cc_exp_month,omitempty"`

	// Credit card expiration year.
	CcExpYear string `json:"cc_exp_year,omitempty"`

	// Last four digits of the credit card.
	// Required: true
	CcLast4 *string `json:"cc_last4"`

	// Encrypted credit card number.
	CcNumberEnc string `json:"cc_number_enc,omitempty"`

	// Credit card number.
	CcOwner string `json:"cc_owner,omitempty"`

	// Credit card secure verify.
	CcSecureVerify string `json:"cc_secure_verify,omitempty"`

	// Credit card SS issue.
	CcSsIssue string `json:"cc_ss_issue,omitempty"`

	// Credit card SS start month.
	CcSsStartMonth string `json:"cc_ss_start_month,omitempty"`

	// Credit card SS start year.
	CcSsStartYear string `json:"cc_ss_start_year,omitempty"`

	// Credit card status.
	CcStatus string `json:"cc_status,omitempty"`

	// Credit card status description.
	CcStatusDescription string `json:"cc_status_description,omitempty"`

	// Credit card transaction ID.
	CcTransID string `json:"cc_trans_id,omitempty"`

	// Credit card type.
	CcType string `json:"cc_type,omitempty"`

	// eCheck account name.
	EcheckAccountName string `json:"echeck_account_name,omitempty"`

	// eCheck account type.
	EcheckAccountType string `json:"echeck_account_type,omitempty"`

	// eCheck bank name.
	EcheckBankName string `json:"echeck_bank_name,omitempty"`

	// eCheck routing number.
	EcheckRoutingNumber string `json:"echeck_routing_number,omitempty"`

	// eCheck type.
	EcheckType string `json:"echeck_type,omitempty"`

	// Entity ID.
	EntityID int64 `json:"entity_id,omitempty"`

	// extension attributes
	ExtensionAttributes *SalesDataOrderPaymentExtensionInterface `json:"extension_attributes,omitempty"`

	// Last transaction ID.
	LastTransID string `json:"last_trans_id,omitempty"`

	// Method.
	// Required: true
	Method *string `json:"method"`

	// Parent ID.
	ParentID int64 `json:"parent_id,omitempty"`

	// PO number.
	PoNumber string `json:"po_number,omitempty"`

	// Protection eligibility.
	ProtectionEligibility string `json:"protection_eligibility,omitempty"`

	// Quote payment ID.
	QuotePaymentID int64 `json:"quote_payment_id,omitempty"`

	// Shipping amount.
	ShippingAmount float64 `json:"shipping_amount,omitempty"`

	// Shipping captured.
	ShippingCaptured float64 `json:"shipping_captured,omitempty"`

	// Shipping refunded.
	ShippingRefunded float64 `json:"shipping_refunded,omitempty"`
}

// Validate validates this sales data order payment interface
func (m *SalesDataOrderPaymentInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdditionalInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcLast4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesDataOrderPaymentInterface) validateAccountStatus(formats strfmt.Registry) error {

	if err := validate.Required("account_status", "body", m.AccountStatus); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataOrderPaymentInterface) validateAdditionalInformation(formats strfmt.Registry) error {

	if err := validate.Required("additional_information", "body", m.AdditionalInformation); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataOrderPaymentInterface) validateCcLast4(formats strfmt.Registry) error {

	if err := validate.Required("cc_last4", "body", m.CcLast4); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataOrderPaymentInterface) validateExtensionAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtensionAttributes) { // not required
		return nil
	}

	if m.ExtensionAttributes != nil {
		if err := m.ExtensionAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *SalesDataOrderPaymentInterface) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesDataOrderPaymentInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesDataOrderPaymentInterface) UnmarshalBinary(b []byte) error {
	var res SalesDataOrderPaymentInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
