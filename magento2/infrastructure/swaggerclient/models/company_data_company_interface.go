// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CompanyDataCompanyInterface Interface for Company entity.
// swagger:model company-data-company-interface
type CompanyDataCompanyInterface struct {

	// City.
	City string `json:"city,omitempty"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// Company email.
	CompanyEmail string `json:"company_email,omitempty"`

	// Company name.
	CompanyName string `json:"company_name,omitempty"`

	// Country.
	CountryID string `json:"country_id,omitempty"`

	// Customer Group Id.
	// Required: true
	CustomerGroupID *int64 `json:"customer_group_id"`

	// extension attributes
	ExtensionAttributes *CompanyDataCompanyExtensionInterface `json:"extension_attributes,omitempty"`

	// Id.
	ID int64 `json:"id,omitempty"`

	// Legal name.
	LegalName string `json:"legal_name,omitempty"`

	// Postcode.
	Postcode string `json:"postcode,omitempty"`

	// Region.
	Region string `json:"region,omitempty"`

	// Region Id.
	RegionID string `json:"region_id,omitempty"`

	// Reject Reason.
	// Required: true
	RejectReason *string `json:"reject_reason"`

	// Rejected at time.
	// Required: true
	RejectedAt *string `json:"rejected_at"`

	// Reseller Id.
	ResellerID string `json:"reseller_id,omitempty"`

	// Sales Representative Id.
	// Required: true
	SalesRepresentativeID *int64 `json:"sales_representative_id"`

	// Status.
	Status int64 `json:"status,omitempty"`

	// Street.
	// Required: true
	Street []string `json:"street"`

	// Company admin customer id.
	// Required: true
	SuperUserID *int64 `json:"super_user_id"`

	// Telephone.
	Telephone string `json:"telephone,omitempty"`

	// Vat tax id.
	VatTaxID string `json:"vat_tax_id,omitempty"`
}

// Validate validates this company data company interface
func (m *CompanyDataCompanyInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomerGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalesRepresentativeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuperUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompanyDataCompanyInterface) validateCustomerGroupID(formats strfmt.Registry) error {

	if err := validate.Required("customer_group_id", "body", m.CustomerGroupID); err != nil {
		return err
	}

	return nil
}

func (m *CompanyDataCompanyInterface) validateExtensionAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtensionAttributes) { // not required
		return nil
	}

	if m.ExtensionAttributes != nil {
		if err := m.ExtensionAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *CompanyDataCompanyInterface) validateRejectReason(formats strfmt.Registry) error {

	if err := validate.Required("reject_reason", "body", m.RejectReason); err != nil {
		return err
	}

	return nil
}

func (m *CompanyDataCompanyInterface) validateRejectedAt(formats strfmt.Registry) error {

	if err := validate.Required("rejected_at", "body", m.RejectedAt); err != nil {
		return err
	}

	return nil
}

func (m *CompanyDataCompanyInterface) validateSalesRepresentativeID(formats strfmt.Registry) error {

	if err := validate.Required("sales_representative_id", "body", m.SalesRepresentativeID); err != nil {
		return err
	}

	return nil
}

func (m *CompanyDataCompanyInterface) validateStreet(formats strfmt.Registry) error {

	if err := validate.Required("street", "body", m.Street); err != nil {
		return err
	}

	return nil
}

func (m *CompanyDataCompanyInterface) validateSuperUserID(formats strfmt.Registry) error {

	if err := validate.Required("super_user_id", "body", m.SuperUserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CompanyDataCompanyInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompanyDataCompanyInterface) UnmarshalBinary(b []byte) error {
	var res CompanyDataCompanyInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
