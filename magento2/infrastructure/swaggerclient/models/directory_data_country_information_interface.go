// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DirectoryDataCountryInformationInterface Country Information interface.
// swagger:model directory-data-country-information-interface
type DirectoryDataCountryInformationInterface struct {

	// The available regions for the store.
	AvailableRegions []*DirectoryDataRegionInformationInterface `json:"available_regions"`

	// extension attributes
	ExtensionAttributes DirectoryDataCountryInformationExtensionInterface `json:"extension_attributes,omitempty"`

	// The country full name (in English) for the store.
	// Required: true
	FullNameEnglish *string `json:"full_name_english"`

	// The country full name (in store locale) for the store.
	// Required: true
	FullNameLocale *string `json:"full_name_locale"`

	// The country id for the store.
	// Required: true
	ID *string `json:"id"`

	// The country 3 letter abbreviation for the store.
	// Required: true
	ThreeLetterAbbreviation *string `json:"three_letter_abbreviation"`

	// The country 2 letter abbreviation for the store.
	// Required: true
	TwoLetterAbbreviation *string `json:"two_letter_abbreviation"`
}

// Validate validates this directory data country information interface
func (m *DirectoryDataCountryInformationInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableRegions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullNameEnglish(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullNameLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreeLetterAbbreviation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTwoLetterAbbreviation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectoryDataCountryInformationInterface) validateAvailableRegions(formats strfmt.Registry) error {

	if swag.IsZero(m.AvailableRegions) { // not required
		return nil
	}

	for i := 0; i < len(m.AvailableRegions); i++ {
		if swag.IsZero(m.AvailableRegions[i]) { // not required
			continue
		}

		if m.AvailableRegions[i] != nil {
			if err := m.AvailableRegions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("available_regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DirectoryDataCountryInformationInterface) validateFullNameEnglish(formats strfmt.Registry) error {

	if err := validate.Required("full_name_english", "body", m.FullNameEnglish); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryDataCountryInformationInterface) validateFullNameLocale(formats strfmt.Registry) error {

	if err := validate.Required("full_name_locale", "body", m.FullNameLocale); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryDataCountryInformationInterface) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryDataCountryInformationInterface) validateThreeLetterAbbreviation(formats strfmt.Registry) error {

	if err := validate.Required("three_letter_abbreviation", "body", m.ThreeLetterAbbreviation); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryDataCountryInformationInterface) validateTwoLetterAbbreviation(formats strfmt.Registry) error {

	if err := validate.Required("two_letter_abbreviation", "body", m.TwoLetterAbbreviation); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectoryDataCountryInformationInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectoryDataCountryInformationInterface) UnmarshalBinary(b []byte) error {
	var res DirectoryDataCountryInformationInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
