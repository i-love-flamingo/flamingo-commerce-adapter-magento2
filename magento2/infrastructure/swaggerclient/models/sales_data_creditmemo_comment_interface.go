// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalesDataCreditmemoCommentInterface Credit memo comment interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo usually includes comments that detail why the credit memo amount was credited to the customer.
// swagger:model sales-data-creditmemo-comment-interface
type SalesDataCreditmemoCommentInterface struct {

	// Comment.
	// Required: true
	Comment *string `json:"comment"`

	// Created-at timestamp.
	CreatedAt string `json:"created_at,omitempty"`

	// Credit memo ID.
	EntityID int64 `json:"entity_id,omitempty"`

	// extension attributes
	ExtensionAttributes SalesDataCreditmemoCommentExtensionInterface `json:"extension_attributes,omitempty"`

	// Is-customer-notified flag value.
	// Required: true
	IsCustomerNotified *int64 `json:"is_customer_notified"`

	// Is-visible-on-storefront flag value.
	// Required: true
	IsVisibleOnFront *int64 `json:"is_visible_on_front"`

	// Parent ID.
	// Required: true
	ParentID *int64 `json:"parent_id"`
}

// Validate validates this sales data creditmemo comment interface
func (m *SalesDataCreditmemoCommentInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsCustomerNotified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsVisibleOnFront(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesDataCreditmemoCommentInterface) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataCreditmemoCommentInterface) validateIsCustomerNotified(formats strfmt.Registry) error {

	if err := validate.Required("is_customer_notified", "body", m.IsCustomerNotified); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataCreditmemoCommentInterface) validateIsVisibleOnFront(formats strfmt.Registry) error {

	if err := validate.Required("is_visible_on_front", "body", m.IsVisibleOnFront); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataCreditmemoCommentInterface) validateParentID(formats strfmt.Registry) error {

	if err := validate.Required("parent_id", "body", m.ParentID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesDataCreditmemoCommentInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesDataCreditmemoCommentInterface) UnmarshalBinary(b []byte) error {
	var res SalesDataCreditmemoCommentInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
