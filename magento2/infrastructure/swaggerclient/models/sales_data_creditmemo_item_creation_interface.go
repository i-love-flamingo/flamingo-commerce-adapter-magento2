// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalesDataCreditmemoItemCreationInterface Interface CreditmemoItemCreationInterface
// swagger:model sales-data-creditmemo-item-creation-interface
type SalesDataCreditmemoItemCreationInterface struct {

	// extension attributes
	ExtensionAttributes SalesDataCreditmemoItemCreationExtensionInterface `json:"extension_attributes,omitempty"`

	// Order item ID.
	// Required: true
	OrderItemID *int64 `json:"order_item_id"`

	// Quantity.
	// Required: true
	Qty *float64 `json:"qty"`
}

// Validate validates this sales data creditmemo item creation interface
func (m *SalesDataCreditmemoItemCreationInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrderItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQty(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesDataCreditmemoItemCreationInterface) validateOrderItemID(formats strfmt.Registry) error {

	if err := validate.Required("order_item_id", "body", m.OrderItemID); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataCreditmemoItemCreationInterface) validateQty(formats strfmt.Registry) error {

	if err := validate.Required("qty", "body", m.Qty); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesDataCreditmemoItemCreationInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesDataCreditmemoItemCreationInterface) UnmarshalBinary(b []byte) error {
	var res SalesDataCreditmemoItemCreationInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
