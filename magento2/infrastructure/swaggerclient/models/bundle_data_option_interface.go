// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BundleDataOptionInterface Interface OptionInterface
// swagger:model bundle-data-option-interface
type BundleDataOptionInterface struct {

	// extension attributes
	ExtensionAttributes BundleDataOptionExtensionInterface `json:"extension_attributes,omitempty"`

	// Option id
	OptionID int64 `json:"option_id,omitempty"`

	// Option position
	Position int64 `json:"position,omitempty"`

	// Product links
	ProductLinks []*BundleDataLinkInterface `json:"product_links"`

	// Is required option
	Required bool `json:"required,omitempty"`

	// Product sku
	Sku string `json:"sku,omitempty"`

	// Option title
	Title string `json:"title,omitempty"`

	// Input type
	Type string `json:"type,omitempty"`
}

// Validate validates this bundle data option interface
func (m *BundleDataOptionInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProductLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BundleDataOptionInterface) validateProductLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductLinks) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductLinks); i++ {
		if swag.IsZero(m.ProductLinks[i]) { // not required
			continue
		}

		if m.ProductLinks[i] != nil {
			if err := m.ProductLinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("product_links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BundleDataOptionInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BundleDataOptionInterface) UnmarshalBinary(b []byte) error {
	var res BundleDataOptionInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
