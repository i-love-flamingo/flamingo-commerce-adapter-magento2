// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogDataProductAttributeMediaGalleryEntryInterface catalog data product attribute media gallery entry interface
// swagger:model catalog-data-product-attribute-media-gallery-entry-interface
type CatalogDataProductAttributeMediaGalleryEntryInterface struct {

	// content
	Content *FrameworkDataImageContentInterface `json:"content,omitempty"`

	// If gallery entry is hidden from product page
	// Required: true
	Disabled *bool `json:"disabled"`

	// extension attributes
	ExtensionAttributes *CatalogDataProductAttributeMediaGalleryEntryExtensionInterface `json:"extension_attributes,omitempty"`

	// File path
	File string `json:"file,omitempty"`

	// Gallery entry ID
	ID int64 `json:"id,omitempty"`

	// Gallery entry alternative text
	// Required: true
	Label *string `json:"label"`

	// Media type
	// Required: true
	MediaType *string `json:"media_type"`

	// Gallery entry position (sort order)
	// Required: true
	Position *int64 `json:"position"`

	// Gallery entry image types (thumbnail, image, small_image etc)
	// Required: true
	Types []string `json:"types"`
}

// Validate validates this catalog data product attribute media gallery entry interface
func (m *CatalogDataProductAttributeMediaGalleryEntryInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogDataProductAttributeMediaGalleryEntryInterface) validateContent(formats strfmt.Registry) error {

	if swag.IsZero(m.Content) { // not required
		return nil
	}

	if m.Content != nil {
		if err := m.Content.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogDataProductAttributeMediaGalleryEntryInterface) validateDisabled(formats strfmt.Registry) error {

	if err := validate.Required("disabled", "body", m.Disabled); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductAttributeMediaGalleryEntryInterface) validateExtensionAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtensionAttributes) { // not required
		return nil
	}

	if m.ExtensionAttributes != nil {
		if err := m.ExtensionAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogDataProductAttributeMediaGalleryEntryInterface) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductAttributeMediaGalleryEntryInterface) validateMediaType(formats strfmt.Registry) error {

	if err := validate.Required("media_type", "body", m.MediaType); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductAttributeMediaGalleryEntryInterface) validatePosition(formats strfmt.Registry) error {

	if err := validate.Required("position", "body", m.Position); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductAttributeMediaGalleryEntryInterface) validateTypes(formats strfmt.Registry) error {

	if err := validate.Required("types", "body", m.Types); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogDataProductAttributeMediaGalleryEntryInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogDataProductAttributeMediaGalleryEntryInterface) UnmarshalBinary(b []byte) error {
	var res CatalogDataProductAttributeMediaGalleryEntryInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
