// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CompanyCreditDataHistoryDataInterface History data transfer object interface.
// swagger:model company-credit-data-history-data-interface
type CompanyCreditDataHistoryDataInterface struct {

	// Amount.
	// Required: true
	Amount *float64 `json:"amount"`

	// Available limit.
	AvailableLimit float64 `json:"available_limit,omitempty"`

	// Outstanding balance.
	// Required: true
	Balance *float64 `json:"balance"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// Company credit id.
	CompanyCreditID int64 `json:"company_credit_id,omitempty"`

	// Credit limit.
	// Required: true
	CreditLimit *float64 `json:"credit_limit"`

	// Currency code of credit.
	CurrencyCredit string `json:"currency_credit,omitempty"`

	// Currency code of operation.
	CurrencyOperation string `json:"currency_operation,omitempty"`

	// Operation datetime.
	Datetime string `json:"datetime,omitempty"`

	// ID.
	ID int64 `json:"id,omitempty"`

	// Purchase Order number.
	PurchaseOrder string `json:"purchase_order,omitempty"`

	// Currency rate between credit and operation currencies.
	// Required: true
	Rate *float64 `json:"rate"`

	// Rate between credit and base currencies.
	RateCredit float64 `json:"rate_credit,omitempty"`

	// Type of operation.
	Type int64 `json:"type,omitempty"`

	// User Id.
	UserID int64 `json:"user_id,omitempty"`

	// User type: integration, admin, customer.
	UserType int64 `json:"user_type,omitempty"`
}

// Validate validates this company credit data history data interface
func (m *CompanyCreditDataHistoryDataInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompanyCreditDataHistoryDataInterface) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *CompanyCreditDataHistoryDataInterface) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	return nil
}

func (m *CompanyCreditDataHistoryDataInterface) validateCreditLimit(formats strfmt.Registry) error {

	if err := validate.Required("credit_limit", "body", m.CreditLimit); err != nil {
		return err
	}

	return nil
}

func (m *CompanyCreditDataHistoryDataInterface) validateRate(formats strfmt.Registry) error {

	if err := validate.Required("rate", "body", m.Rate); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CompanyCreditDataHistoryDataInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompanyCreditDataHistoryDataInterface) UnmarshalBinary(b []byte) error {
	var res CompanyCreditDataHistoryDataInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
