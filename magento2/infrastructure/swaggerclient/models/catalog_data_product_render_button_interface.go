// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogDataProductRenderButtonInterface Button interface. This interface represents all manner of product buttons: add to cart, add to compare, etc... The buttons describes by this interface should have interaction with backend
// swagger:model catalog-data-product-render-button-interface
type CatalogDataProductRenderButtonInterface struct {

	// extension attributes
	ExtensionAttributes CatalogDataProductRenderButtonExtensionInterface `json:"extension_attributes,omitempty"`

	// Post data
	// Required: true
	PostData *string `json:"post_data"`

	// Flag whether a product has options or not
	// Required: true
	RequiredOptions *bool `json:"required_options"`

	// Url, needed to add product to cart
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this catalog data product render button interface
func (m *CatalogDataProductRenderButtonInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogDataProductRenderButtonInterface) validatePostData(formats strfmt.Registry) error {

	if err := validate.Required("post_data", "body", m.PostData); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductRenderButtonInterface) validateRequiredOptions(formats strfmt.Registry) error {

	if err := validate.Required("required_options", "body", m.RequiredOptions); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductRenderButtonInterface) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogDataProductRenderButtonInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogDataProductRenderButtonInterface) UnmarshalBinary(b []byte) error {
	var res CatalogDataProductRenderButtonInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
