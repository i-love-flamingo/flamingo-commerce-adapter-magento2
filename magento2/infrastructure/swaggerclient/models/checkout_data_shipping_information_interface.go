// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CheckoutDataShippingInformationInterface Interface ShippingInformationInterface
// swagger:model checkout-data-shipping-information-interface
type CheckoutDataShippingInformationInterface struct {

	// billing address
	BillingAddress *QuoteDataAddressInterface `json:"billing_address,omitempty"`

	// Custom attributes values.
	CustomAttributes []*FrameworkAttributeInterface `json:"custom_attributes"`

	// extension attributes
	ExtensionAttributes CheckoutDataShippingInformationExtensionInterface `json:"extension_attributes,omitempty"`

	// shipping address
	// Required: true
	ShippingAddress *QuoteDataAddressInterface `json:"shipping_address"`

	// Carrier code
	// Required: true
	ShippingCarrierCode *string `json:"shipping_carrier_code"`

	// Shipping method code
	// Required: true
	ShippingMethodCode *string `json:"shipping_method_code"`
}

// Validate validates this checkout data shipping information interface
func (m *CheckoutDataShippingInformationInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingCarrierCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingMethodCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckoutDataShippingInformationInterface) validateBillingAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingAddress) { // not required
		return nil
	}

	if m.BillingAddress != nil {
		if err := m.BillingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing_address")
			}
			return err
		}
	}

	return nil
}

func (m *CheckoutDataShippingInformationInterface) validateCustomAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomAttributes); i++ {
		if swag.IsZero(m.CustomAttributes[i]) { // not required
			continue
		}

		if m.CustomAttributes[i] != nil {
			if err := m.CustomAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CheckoutDataShippingInformationInterface) validateShippingAddress(formats strfmt.Registry) error {

	if err := validate.Required("shipping_address", "body", m.ShippingAddress); err != nil {
		return err
	}

	if m.ShippingAddress != nil {
		if err := m.ShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipping_address")
			}
			return err
		}
	}

	return nil
}

func (m *CheckoutDataShippingInformationInterface) validateShippingCarrierCode(formats strfmt.Registry) error {

	if err := validate.Required("shipping_carrier_code", "body", m.ShippingCarrierCode); err != nil {
		return err
	}

	return nil
}

func (m *CheckoutDataShippingInformationInterface) validateShippingMethodCode(formats strfmt.Registry) error {

	if err := validate.Required("shipping_method_code", "body", m.ShippingMethodCode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CheckoutDataShippingInformationInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckoutDataShippingInformationInterface) UnmarshalBinary(b []byte) error {
	var res CheckoutDataShippingInformationInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
