// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalesDataCreditmemoInterface Credit memo interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases.
// swagger:model sales-data-creditmemo-interface
type SalesDataCreditmemoInterface struct {

	// Credit memo adjustment.
	Adjustment float64 `json:"adjustment,omitempty"`

	// Credit memo negative adjustment.
	AdjustmentNegative float64 `json:"adjustment_negative,omitempty"`

	// Credit memo positive adjustment.
	AdjustmentPositive float64 `json:"adjustment_positive,omitempty"`

	// Credit memo base adjustment.
	BaseAdjustment float64 `json:"base_adjustment,omitempty"`

	// Credit memo negative base adjustment.
	BaseAdjustmentNegative float64 `json:"base_adjustment_negative,omitempty"`

	// Credit memo positive base adjustment.
	BaseAdjustmentPositive float64 `json:"base_adjustment_positive,omitempty"`

	// Credit memo base currency code.
	BaseCurrencyCode string `json:"base_currency_code,omitempty"`

	// Credit memo base discount amount.
	BaseDiscountAmount float64 `json:"base_discount_amount,omitempty"`

	// Credit memo base discount tax compensation amount.
	BaseDiscountTaxCompensationAmount float64 `json:"base_discount_tax_compensation_amount,omitempty"`

	// Credit memo base grand total.
	BaseGrandTotal float64 `json:"base_grand_total,omitempty"`

	// Credit memo base shipping amount.
	BaseShippingAmount float64 `json:"base_shipping_amount,omitempty"`

	// Credit memo base shipping discount tax compensation amount.
	BaseShippingDiscountTaxCompensationAmnt float64 `json:"base_shipping_discount_tax_compensation_amnt,omitempty"`

	// Credit memo base shipping including tax.
	BaseShippingInclTax float64 `json:"base_shipping_incl_tax,omitempty"`

	// Credit memo base shipping tax amount.
	BaseShippingTaxAmount float64 `json:"base_shipping_tax_amount,omitempty"`

	// Credit memo base subtotal.
	BaseSubtotal float64 `json:"base_subtotal,omitempty"`

	// Credit memo base subtotal including tax.
	BaseSubtotalInclTax float64 `json:"base_subtotal_incl_tax,omitempty"`

	// Credit memo base tax amount.
	BaseTaxAmount float64 `json:"base_tax_amount,omitempty"`

	// Credit memo base-to-global rate.
	BaseToGlobalRate float64 `json:"base_to_global_rate,omitempty"`

	// Credit memo base-to-order rate.
	BaseToOrderRate float64 `json:"base_to_order_rate,omitempty"`

	// Credit memo billing address ID.
	BillingAddressID int64 `json:"billing_address_id,omitempty"`

	// Array of any credit memo comments. Otherwise, null.
	Comments []*SalesDataCreditmemoCommentInterface `json:"comments"`

	// Credit memo created-at timestamp.
	CreatedAt string `json:"created_at,omitempty"`

	// Credit memo status.
	CreditmemoStatus int64 `json:"creditmemo_status,omitempty"`

	// Credit memo discount amount.
	DiscountAmount float64 `json:"discount_amount,omitempty"`

	// Credit memo discount description.
	DiscountDescription string `json:"discount_description,omitempty"`

	// Credit memo discount tax compensation amount.
	DiscountTaxCompensationAmount float64 `json:"discount_tax_compensation_amount,omitempty"`

	// Credit memo email sent flag value.
	EmailSent int64 `json:"email_sent,omitempty"`

	// Credit memo ID.
	EntityID int64 `json:"entity_id,omitempty"`

	// extension attributes
	ExtensionAttributes *SalesDataCreditmemoExtensionInterface `json:"extension_attributes,omitempty"`

	// Credit memo global currency code.
	GlobalCurrencyCode string `json:"global_currency_code,omitempty"`

	// Credit memo grand total.
	GrandTotal float64 `json:"grand_total,omitempty"`

	// Credit memo increment ID.
	IncrementID string `json:"increment_id,omitempty"`

	// Credit memo invoice ID.
	InvoiceID int64 `json:"invoice_id,omitempty"`

	// Array of credit memo items.
	// Required: true
	Items []*SalesDataCreditmemoItemInterface `json:"items"`

	// Credit memo order currency code.
	OrderCurrencyCode string `json:"order_currency_code,omitempty"`

	// Credit memo order ID.
	// Required: true
	OrderID *int64 `json:"order_id"`

	// Credit memo shipping address ID.
	ShippingAddressID int64 `json:"shipping_address_id,omitempty"`

	// Credit memo shipping amount.
	ShippingAmount float64 `json:"shipping_amount,omitempty"`

	// Credit memo shipping discount tax compensation amount.
	ShippingDiscountTaxCompensationAmount float64 `json:"shipping_discount_tax_compensation_amount,omitempty"`

	// Credit memo shipping including tax.
	ShippingInclTax float64 `json:"shipping_incl_tax,omitempty"`

	// Credit memo shipping tax amount.
	ShippingTaxAmount float64 `json:"shipping_tax_amount,omitempty"`

	// Credit memo state.
	State int64 `json:"state,omitempty"`

	// Credit memo store currency code.
	StoreCurrencyCode string `json:"store_currency_code,omitempty"`

	// Credit memo store ID.
	StoreID int64 `json:"store_id,omitempty"`

	// Credit memo store-to-base rate.
	StoreToBaseRate float64 `json:"store_to_base_rate,omitempty"`

	// Credit memo store-to-order rate.
	StoreToOrderRate float64 `json:"store_to_order_rate,omitempty"`

	// Credit memo subtotal.
	Subtotal float64 `json:"subtotal,omitempty"`

	// Credit memo subtotal including tax.
	SubtotalInclTax float64 `json:"subtotal_incl_tax,omitempty"`

	// Credit memo tax amount.
	TaxAmount float64 `json:"tax_amount,omitempty"`

	// Credit memo transaction ID.
	TransactionID string `json:"transaction_id,omitempty"`

	// Credit memo updated-at timestamp.
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this sales data creditmemo interface
func (m *SalesDataCreditmemoInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesDataCreditmemoInterface) validateComments(formats strfmt.Registry) error {

	if swag.IsZero(m.Comments) { // not required
		return nil
	}

	for i := 0; i < len(m.Comments); i++ {
		if swag.IsZero(m.Comments[i]) { // not required
			continue
		}

		if m.Comments[i] != nil {
			if err := m.Comments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("comments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalesDataCreditmemoInterface) validateExtensionAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtensionAttributes) { // not required
		return nil
	}

	if m.ExtensionAttributes != nil {
		if err := m.ExtensionAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *SalesDataCreditmemoInterface) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("items", "body", m.Items); err != nil {
		return err
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalesDataCreditmemoInterface) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("order_id", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesDataCreditmemoInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesDataCreditmemoInterface) UnmarshalBinary(b []byte) error {
	var res SalesDataCreditmemoInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
