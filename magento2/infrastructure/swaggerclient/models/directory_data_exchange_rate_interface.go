// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DirectoryDataExchangeRateInterface Exchange Rate interface.
// swagger:model directory-data-exchange-rate-interface
type DirectoryDataExchangeRateInterface struct {

	// The currency code associated with the exchange rate.
	// Required: true
	CurrencyTo *string `json:"currency_to"`

	// extension attributes
	ExtensionAttributes DirectoryDataExchangeRateExtensionInterface `json:"extension_attributes,omitempty"`

	// The exchange rate for the associated currency and the store's base currency.
	// Required: true
	Rate *float64 `json:"rate"`
}

// Validate validates this directory data exchange rate interface
func (m *DirectoryDataExchangeRateInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrencyTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectoryDataExchangeRateInterface) validateCurrencyTo(formats strfmt.Registry) error {

	if err := validate.Required("currency_to", "body", m.CurrencyTo); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryDataExchangeRateInterface) validateRate(formats strfmt.Registry) error {

	if err := validate.Required("rate", "body", m.Rate); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectoryDataExchangeRateInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectoryDataExchangeRateInterface) UnmarshalBinary(b []byte) error {
	var res DirectoryDataExchangeRateInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
