// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CatalogDataProductExtensionInterface ExtensionInterface class for @see \Magento\Catalog\Api\Data\ProductInterface
// swagger:model catalog-data-product-extension-interface
type CatalogDataProductExtensionInterface struct {

	// bundle product options
	BundleProductOptions []*BundleDataOptionInterface `json:"bundle_product_options"`

	// category links
	CategoryLinks []*CatalogDataCategoryLinkInterface `json:"category_links"`

	// configurable product links
	ConfigurableProductLinks []int64 `json:"configurable_product_links"`

	// configurable product options
	ConfigurableProductOptions []*ConfigurableProductDataOptionInterface `json:"configurable_product_options"`

	// downloadable product links
	DownloadableProductLinks []*DownloadableDataLinkInterface `json:"downloadable_product_links"`

	// downloadable product samples
	DownloadableProductSamples []*DownloadableDataSampleInterface `json:"downloadable_product_samples"`

	// giftcard amounts
	GiftcardAmounts []*GiftCardDataGiftcardAmountInterface `json:"giftcard_amounts"`

	// stock item
	StockItem *CatalogInventoryDataStockItemInterface `json:"stock_item,omitempty"`

	// website ids
	WebsiteIds []int64 `json:"website_ids"`
}

// Validate validates this catalog data product extension interface
func (m *CatalogDataProductExtensionInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundleProductOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategoryLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurableProductOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloadableProductLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloadableProductSamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGiftcardAmounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockItem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogDataProductExtensionInterface) validateBundleProductOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.BundleProductOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.BundleProductOptions); i++ {
		if swag.IsZero(m.BundleProductOptions[i]) { // not required
			continue
		}

		if m.BundleProductOptions[i] != nil {
			if err := m.BundleProductOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bundle_product_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogDataProductExtensionInterface) validateCategoryLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.CategoryLinks) { // not required
		return nil
	}

	for i := 0; i < len(m.CategoryLinks); i++ {
		if swag.IsZero(m.CategoryLinks[i]) { // not required
			continue
		}

		if m.CategoryLinks[i] != nil {
			if err := m.CategoryLinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("category_links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogDataProductExtensionInterface) validateConfigurableProductOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigurableProductOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigurableProductOptions); i++ {
		if swag.IsZero(m.ConfigurableProductOptions[i]) { // not required
			continue
		}

		if m.ConfigurableProductOptions[i] != nil {
			if err := m.ConfigurableProductOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configurable_product_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogDataProductExtensionInterface) validateDownloadableProductLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.DownloadableProductLinks) { // not required
		return nil
	}

	for i := 0; i < len(m.DownloadableProductLinks); i++ {
		if swag.IsZero(m.DownloadableProductLinks[i]) { // not required
			continue
		}

		if m.DownloadableProductLinks[i] != nil {
			if err := m.DownloadableProductLinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("downloadable_product_links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogDataProductExtensionInterface) validateDownloadableProductSamples(formats strfmt.Registry) error {

	if swag.IsZero(m.DownloadableProductSamples) { // not required
		return nil
	}

	for i := 0; i < len(m.DownloadableProductSamples); i++ {
		if swag.IsZero(m.DownloadableProductSamples[i]) { // not required
			continue
		}

		if m.DownloadableProductSamples[i] != nil {
			if err := m.DownloadableProductSamples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("downloadable_product_samples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogDataProductExtensionInterface) validateGiftcardAmounts(formats strfmt.Registry) error {

	if swag.IsZero(m.GiftcardAmounts) { // not required
		return nil
	}

	for i := 0; i < len(m.GiftcardAmounts); i++ {
		if swag.IsZero(m.GiftcardAmounts[i]) { // not required
			continue
		}

		if m.GiftcardAmounts[i] != nil {
			if err := m.GiftcardAmounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("giftcard_amounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogDataProductExtensionInterface) validateStockItem(formats strfmt.Registry) error {

	if swag.IsZero(m.StockItem) { // not required
		return nil
	}

	if m.StockItem != nil {
		if err := m.StockItem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stock_item")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogDataProductExtensionInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogDataProductExtensionInterface) UnmarshalBinary(b []byte) error {
	var res CatalogDataProductExtensionInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
