// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaxDataTaxRuleInterface Tax rule interface.
// swagger:model tax-data-tax-rule-interface
type TaxDataTaxRuleInterface struct {

	// Calculate subtotal.
	CalculateSubtotal bool `json:"calculate_subtotal,omitempty"`

	// Tax rule code
	// Required: true
	Code *string `json:"code"`

	// Customer tax class id
	// Required: true
	CustomerTaxClassIds []int64 `json:"customer_tax_class_ids"`

	// extension attributes
	ExtensionAttributes TaxDataTaxRuleExtensionInterface `json:"extension_attributes,omitempty"`

	// Id
	ID int64 `json:"id,omitempty"`

	// Sort order.
	// Required: true
	Position *int64 `json:"position"`

	// Priority
	// Required: true
	Priority *int64 `json:"priority"`

	// Product tax class id
	// Required: true
	ProductTaxClassIds []int64 `json:"product_tax_class_ids"`

	// Tax rate ids
	// Required: true
	TaxRateIds []int64 `json:"tax_rate_ids"`
}

// Validate validates this tax data tax rule interface
func (m *TaxDataTaxRuleInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerTaxClassIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductTaxClassIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxRateIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaxDataTaxRuleInterface) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *TaxDataTaxRuleInterface) validateCustomerTaxClassIds(formats strfmt.Registry) error {

	if err := validate.Required("customer_tax_class_ids", "body", m.CustomerTaxClassIds); err != nil {
		return err
	}

	return nil
}

func (m *TaxDataTaxRuleInterface) validatePosition(formats strfmt.Registry) error {

	if err := validate.Required("position", "body", m.Position); err != nil {
		return err
	}

	return nil
}

func (m *TaxDataTaxRuleInterface) validatePriority(formats strfmt.Registry) error {

	if err := validate.Required("priority", "body", m.Priority); err != nil {
		return err
	}

	return nil
}

func (m *TaxDataTaxRuleInterface) validateProductTaxClassIds(formats strfmt.Registry) error {

	if err := validate.Required("product_tax_class_ids", "body", m.ProductTaxClassIds); err != nil {
		return err
	}

	return nil
}

func (m *TaxDataTaxRuleInterface) validateTaxRateIds(formats strfmt.Registry) error {

	if err := validate.Required("tax_rate_ids", "body", m.TaxRateIds); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaxDataTaxRuleInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaxDataTaxRuleInterface) UnmarshalBinary(b []byte) error {
	var res TaxDataTaxRuleInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
