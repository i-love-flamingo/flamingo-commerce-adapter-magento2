// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalesDataOrderAddressInterface Order address interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.
// swagger:model sales-data-order-address-interface
type SalesDataOrderAddressInterface struct {

	// Address type.
	// Required: true
	AddressType *string `json:"address_type"`

	// City.
	// Required: true
	City *string `json:"city"`

	// Company.
	Company string `json:"company,omitempty"`

	// Country ID.
	// Required: true
	CountryID *string `json:"country_id"`

	// Country address ID.
	CustomerAddressID int64 `json:"customer_address_id,omitempty"`

	// Customer ID.
	CustomerID int64 `json:"customer_id,omitempty"`

	// Email address.
	Email string `json:"email,omitempty"`

	// Order address ID.
	EntityID int64 `json:"entity_id,omitempty"`

	// extension attributes
	ExtensionAttributes SalesDataOrderAddressExtensionInterface `json:"extension_attributes,omitempty"`

	// Fax number.
	Fax string `json:"fax,omitempty"`

	// First name.
	// Required: true
	Firstname *string `json:"firstname"`

	// Last name.
	// Required: true
	Lastname *string `json:"lastname"`

	// Middle name.
	Middlename string `json:"middlename,omitempty"`

	// Parent ID.
	ParentID int64 `json:"parent_id,omitempty"`

	// Postal code.
	// Required: true
	Postcode *string `json:"postcode"`

	// Prefix.
	Prefix string `json:"prefix,omitempty"`

	// Region.
	Region string `json:"region,omitempty"`

	// Region code.
	RegionCode string `json:"region_code,omitempty"`

	// Region ID.
	RegionID int64 `json:"region_id,omitempty"`

	// Array of any street values. Otherwise, null.
	Street []string `json:"street"`

	// Suffix.
	Suffix string `json:"suffix,omitempty"`

	// Telephone number.
	// Required: true
	Telephone *string `json:"telephone"`

	// VAT ID.
	VatID string `json:"vat_id,omitempty"`

	// VAT-is-valid flag value.
	VatIsValid int64 `json:"vat_is_valid,omitempty"`

	// VAT request date.
	VatRequestDate string `json:"vat_request_date,omitempty"`

	// VAT request ID.
	VatRequestID string `json:"vat_request_id,omitempty"`

	// VAT-request-success flag value.
	VatRequestSuccess int64 `json:"vat_request_success,omitempty"`
}

// Validate validates this sales data order address interface
func (m *SalesDataOrderAddressInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostcode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelephone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesDataOrderAddressInterface) validateAddressType(formats strfmt.Registry) error {

	if err := validate.Required("address_type", "body", m.AddressType); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataOrderAddressInterface) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataOrderAddressInterface) validateCountryID(formats strfmt.Registry) error {

	if err := validate.Required("country_id", "body", m.CountryID); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataOrderAddressInterface) validateFirstname(formats strfmt.Registry) error {

	if err := validate.Required("firstname", "body", m.Firstname); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataOrderAddressInterface) validateLastname(formats strfmt.Registry) error {

	if err := validate.Required("lastname", "body", m.Lastname); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataOrderAddressInterface) validatePostcode(formats strfmt.Registry) error {

	if err := validate.Required("postcode", "body", m.Postcode); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataOrderAddressInterface) validateTelephone(formats strfmt.Registry) error {

	if err := validate.Required("telephone", "body", m.Telephone); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesDataOrderAddressInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesDataOrderAddressInterface) UnmarshalBinary(b []byte) error {
	var res SalesDataOrderAddressInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
