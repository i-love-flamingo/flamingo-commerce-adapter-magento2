// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogDataCategoryTreeInterface catalog data category tree interface
// swagger:model catalog-data-category-tree-interface
type CatalogDataCategoryTreeInterface struct {

	// children data
	// Required: true
	ChildrenData []*CatalogDataCategoryTreeInterface `json:"children_data"`

	// id
	ID int64 `json:"id,omitempty"`

	// Whether category is active
	// Required: true
	IsActive *bool `json:"is_active"`

	// Category level
	// Required: true
	Level *int64 `json:"level"`

	// Category name
	// Required: true
	Name *string `json:"name"`

	// Parent category ID
	// Required: true
	ParentID *int64 `json:"parent_id"`

	// Category position
	// Required: true
	Position *int64 `json:"position"`

	// Product count
	// Required: true
	ProductCount *int64 `json:"product_count"`
}

// Validate validates this catalog data category tree interface
func (m *CatalogDataCategoryTreeInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildrenData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogDataCategoryTreeInterface) validateChildrenData(formats strfmt.Registry) error {

	if err := validate.Required("children_data", "body", m.ChildrenData); err != nil {
		return err
	}

	for i := 0; i < len(m.ChildrenData); i++ {
		if swag.IsZero(m.ChildrenData[i]) { // not required
			continue
		}

		if m.ChildrenData[i] != nil {
			if err := m.ChildrenData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogDataCategoryTreeInterface) validateIsActive(formats strfmt.Registry) error {

	if err := validate.Required("is_active", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataCategoryTreeInterface) validateLevel(formats strfmt.Registry) error {

	if err := validate.Required("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataCategoryTreeInterface) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataCategoryTreeInterface) validateParentID(formats strfmt.Registry) error {

	if err := validate.Required("parent_id", "body", m.ParentID); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataCategoryTreeInterface) validatePosition(formats strfmt.Registry) error {

	if err := validate.Required("position", "body", m.Position); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataCategoryTreeInterface) validateProductCount(formats strfmt.Registry) error {

	if err := validate.Required("product_count", "body", m.ProductCount); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogDataCategoryTreeInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogDataCategoryTreeInterface) UnmarshalBinary(b []byte) error {
	var res CatalogDataCategoryTreeInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
