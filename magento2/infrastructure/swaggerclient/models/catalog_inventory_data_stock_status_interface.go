// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogInventoryDataStockStatusInterface Interface StockStatusInterface
// swagger:model catalog-inventory-data-stock-status-interface
type CatalogInventoryDataStockStatusInterface struct {

	// extension attributes
	ExtensionAttributes CatalogInventoryDataStockStatusExtensionInterface `json:"extension_attributes,omitempty"`

	// product id
	// Required: true
	ProductID *int64 `json:"product_id"`

	// qty
	// Required: true
	Qty *int64 `json:"qty"`

	// stock id
	// Required: true
	StockID *int64 `json:"stock_id"`

	// stock item
	// Required: true
	StockItem *CatalogInventoryDataStockItemInterface `json:"stock_item"`

	// stock status
	// Required: true
	StockStatus *int64 `json:"stock_status"`
}

// Validate validates this catalog inventory data stock status interface
func (m *CatalogInventoryDataStockStatusInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProductID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogInventoryDataStockStatusInterface) validateProductID(formats strfmt.Registry) error {

	if err := validate.Required("product_id", "body", m.ProductID); err != nil {
		return err
	}

	return nil
}

func (m *CatalogInventoryDataStockStatusInterface) validateQty(formats strfmt.Registry) error {

	if err := validate.Required("qty", "body", m.Qty); err != nil {
		return err
	}

	return nil
}

func (m *CatalogInventoryDataStockStatusInterface) validateStockID(formats strfmt.Registry) error {

	if err := validate.Required("stock_id", "body", m.StockID); err != nil {
		return err
	}

	return nil
}

func (m *CatalogInventoryDataStockStatusInterface) validateStockItem(formats strfmt.Registry) error {

	if err := validate.Required("stock_item", "body", m.StockItem); err != nil {
		return err
	}

	if m.StockItem != nil {
		if err := m.StockItem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stock_item")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogInventoryDataStockStatusInterface) validateStockStatus(formats strfmt.Registry) error {

	if err := validate.Required("stock_status", "body", m.StockStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogInventoryDataStockStatusInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogInventoryDataStockStatusInterface) UnmarshalBinary(b []byte) error {
	var res CatalogInventoryDataStockStatusInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
