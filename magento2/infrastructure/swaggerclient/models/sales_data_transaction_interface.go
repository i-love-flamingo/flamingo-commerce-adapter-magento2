// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalesDataTransactionInterface Transaction interface. A transaction is an interaction between a merchant and a customer such as a purchase, a credit, a refund, and so on.
// swagger:model sales-data-transaction-interface
type SalesDataTransactionInterface struct {

	// Array of additional information. Otherwise, null.
	AdditionalInformation []string `json:"additional_information"`

	// Array of child transactions.
	// Required: true
	ChildTransactions []*SalesDataTransactionInterface `json:"child_transactions"`

	// Created-at timestamp.
	// Required: true
	CreatedAt *string `json:"created_at"`

	// extension attributes
	ExtensionAttributes SalesDataTransactionExtensionInterface `json:"extension_attributes,omitempty"`

	// Is-closed flag value.
	// Required: true
	IsClosed *int64 `json:"is_closed"`

	// Order ID.
	// Required: true
	OrderID *int64 `json:"order_id"`

	// The parent ID for the transaction. Otherwise, null.
	ParentID int64 `json:"parent_id,omitempty"`

	// Parent transaction business ID.
	// Required: true
	ParentTxnID *string `json:"parent_txn_id"`

	// Payment ID.
	// Required: true
	PaymentID *int64 `json:"payment_id"`

	// Transaction ID.
	// Required: true
	TransactionID *int64 `json:"transaction_id"`

	// Transaction business ID.
	// Required: true
	TxnID *string `json:"txn_id"`

	// Transaction type.
	// Required: true
	TxnType *string `json:"txn_type"`
}

// Validate validates this sales data transaction interface
func (m *SalesDataTransactionInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildTransactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentTxnID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesDataTransactionInterface) validateChildTransactions(formats strfmt.Registry) error {

	if err := validate.Required("child_transactions", "body", m.ChildTransactions); err != nil {
		return err
	}

	for i := 0; i < len(m.ChildTransactions); i++ {
		if swag.IsZero(m.ChildTransactions[i]) { // not required
			continue
		}

		if m.ChildTransactions[i] != nil {
			if err := m.ChildTransactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("child_transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalesDataTransactionInterface) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataTransactionInterface) validateIsClosed(formats strfmt.Registry) error {

	if err := validate.Required("is_closed", "body", m.IsClosed); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataTransactionInterface) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("order_id", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataTransactionInterface) validateParentTxnID(formats strfmt.Registry) error {

	if err := validate.Required("parent_txn_id", "body", m.ParentTxnID); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataTransactionInterface) validatePaymentID(formats strfmt.Registry) error {

	if err := validate.Required("payment_id", "body", m.PaymentID); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataTransactionInterface) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("transaction_id", "body", m.TransactionID); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataTransactionInterface) validateTxnID(formats strfmt.Registry) error {

	if err := validate.Required("txn_id", "body", m.TxnID); err != nil {
		return err
	}

	return nil
}

func (m *SalesDataTransactionInterface) validateTxnType(formats strfmt.Registry) error {

	if err := validate.Required("txn_type", "body", m.TxnType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesDataTransactionInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesDataTransactionInterface) UnmarshalBinary(b []byte) error {
	var res SalesDataTransactionInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
