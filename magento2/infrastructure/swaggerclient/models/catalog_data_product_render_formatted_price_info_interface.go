// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogDataProductRenderFormattedPriceInfoInterface Formatted Price interface. Aggregate formatted html with price representations. E.g.: <span class="price">$9.00</span> Consider currency, rounding and html
// swagger:model catalog-data-product-render-formatted-price-info-interface
type CatalogDataProductRenderFormattedPriceInfoInterface struct {

	// extension attributes
	ExtensionAttributes CatalogDataProductRenderFormattedPriceInfoExtensionInterface `json:"extension_attributes,omitempty"`

	// Html with final price
	// Required: true
	FinalPrice *string `json:"final_price"`

	// Max price of a product
	// Required: true
	MaxPrice *string `json:"max_price"`

	// Max regular price
	// Required: true
	MaxRegularPrice *string `json:"max_regular_price"`

	// The minimal price of the product or variation
	// Required: true
	MinimalPrice *string `json:"minimal_price"`

	// Minimal regular price
	// Required: true
	MinimalRegularPrice *string `json:"minimal_regular_price"`

	// Price - is price of product without discounts and special price with taxes and fixed product tax
	// Required: true
	RegularPrice *string `json:"regular_price"`

	// Special price
	// Required: true
	SpecialPrice *string `json:"special_price"`
}

// Validate validates this catalog data product render formatted price info interface
func (m *CatalogDataProductRenderFormattedPriceInfoInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinalPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxRegularPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimalPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimalRegularPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegularPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecialPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogDataProductRenderFormattedPriceInfoInterface) validateFinalPrice(formats strfmt.Registry) error {

	if err := validate.Required("final_price", "body", m.FinalPrice); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductRenderFormattedPriceInfoInterface) validateMaxPrice(formats strfmt.Registry) error {

	if err := validate.Required("max_price", "body", m.MaxPrice); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductRenderFormattedPriceInfoInterface) validateMaxRegularPrice(formats strfmt.Registry) error {

	if err := validate.Required("max_regular_price", "body", m.MaxRegularPrice); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductRenderFormattedPriceInfoInterface) validateMinimalPrice(formats strfmt.Registry) error {

	if err := validate.Required("minimal_price", "body", m.MinimalPrice); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductRenderFormattedPriceInfoInterface) validateMinimalRegularPrice(formats strfmt.Registry) error {

	if err := validate.Required("minimal_regular_price", "body", m.MinimalRegularPrice); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductRenderFormattedPriceInfoInterface) validateRegularPrice(formats strfmt.Registry) error {

	if err := validate.Required("regular_price", "body", m.RegularPrice); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataProductRenderFormattedPriceInfoInterface) validateSpecialPrice(formats strfmt.Registry) error {

	if err := validate.Required("special_price", "body", m.SpecialPrice); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogDataProductRenderFormattedPriceInfoInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogDataProductRenderFormattedPriceInfoInterface) UnmarshalBinary(b []byte) error {
	var res CatalogDataProductRenderFormattedPriceInfoInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
