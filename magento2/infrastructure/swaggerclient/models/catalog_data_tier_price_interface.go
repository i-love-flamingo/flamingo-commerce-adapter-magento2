// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogDataTierPriceInterface Tier price interface.
// swagger:model catalog-data-tier-price-interface
type CatalogDataTierPriceInterface struct {

	// Customer group.
	// Required: true
	CustomerGroup *string `json:"customer_group"`

	// extension attributes
	ExtensionAttributes CatalogDataTierPriceExtensionInterface `json:"extension_attributes,omitempty"`

	// Tier price.
	// Required: true
	Price *float64 `json:"price"`

	// Tier price type.
	// Required: true
	PriceType *string `json:"price_type"`

	// Quantity.
	// Required: true
	Quantity *float64 `json:"quantity"`

	// SKU.
	// Required: true
	Sku *string `json:"sku"`

	// Website id.
	// Required: true
	WebsiteID *int64 `json:"website_id"`
}

// Validate validates this catalog data tier price interface
func (m *CatalogDataTierPriceInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomerGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSku(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebsiteID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogDataTierPriceInterface) validateCustomerGroup(formats strfmt.Registry) error {

	if err := validate.Required("customer_group", "body", m.CustomerGroup); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataTierPriceInterface) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataTierPriceInterface) validatePriceType(formats strfmt.Registry) error {

	if err := validate.Required("price_type", "body", m.PriceType); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataTierPriceInterface) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataTierPriceInterface) validateSku(formats strfmt.Registry) error {

	if err := validate.Required("sku", "body", m.Sku); err != nil {
		return err
	}

	return nil
}

func (m *CatalogDataTierPriceInterface) validateWebsiteID(formats strfmt.Registry) error {

	if err := validate.Required("website_id", "body", m.WebsiteID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogDataTierPriceInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogDataTierPriceInterface) UnmarshalBinary(b []byte) error {
	var res CatalogDataTierPriceInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
