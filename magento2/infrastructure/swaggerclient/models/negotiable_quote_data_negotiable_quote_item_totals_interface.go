// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NegotiableQuoteDataNegotiableQuoteItemTotalsInterface Extension attribute for quote item totals model.
// swagger:model negotiable-quote-data-negotiable-quote-item-totals-interface
type NegotiableQuoteDataNegotiableQuoteItemTotalsInterface struct {

	// Cart price for quote item in base currency.
	// Required: true
	BaseCartPrice *float64 `json:"base_cart_price"`

	// Cart price with included tax for quote item in base currency.
	// Required: true
	BaseCartPriceInclTax *float64 `json:"base_cart_price_incl_tax"`

	// Tax from catalog price for quote item in base currency.
	// Required: true
	BaseCartTax *float64 `json:"base_cart_tax"`

	// Catalog price for quote item in base currency.
	// Required: true
	BaseCatalogPrice *float64 `json:"base_catalog_price"`

	// Catalog price with included tax for quote item in base currency.
	// Required: true
	BaseCatalogPriceInclTax *float64 `json:"base_catalog_price_incl_tax"`

	// Cart price for quote item.
	// Required: true
	CartPrice *float64 `json:"cart_price"`

	// Cart price with included tax for quote item.
	// Required: true
	CartPriceInclTax *float64 `json:"cart_price_incl_tax"`

	// Tax from catalog price for quote item.
	// Required: true
	CartTax *float64 `json:"cart_tax"`

	// Catalog price for quote item.
	// Required: true
	CatalogPrice *float64 `json:"catalog_price"`

	// Catalog price with included tax for quote item.
	// Required: true
	CatalogPriceInclTax *float64 `json:"catalog_price_incl_tax"`

	// Cost for quote item.
	// Required: true
	Cost *float64 `json:"cost"`

	// extension attributes
	ExtensionAttributes NegotiableQuoteDataNegotiableQuoteItemTotalsExtensionInterface `json:"extension_attributes,omitempty"`
}

// Validate validates this negotiable quote data negotiable quote item totals interface
func (m *NegotiableQuoteDataNegotiableQuoteItemTotalsInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseCartPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseCartPriceInclTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseCartTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseCatalogPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseCatalogPriceInclTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCartPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCartPriceInclTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCartTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogPriceInclTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCost(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteItemTotalsInterface) validateBaseCartPrice(formats strfmt.Registry) error {

	if err := validate.Required("base_cart_price", "body", m.BaseCartPrice); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteItemTotalsInterface) validateBaseCartPriceInclTax(formats strfmt.Registry) error {

	if err := validate.Required("base_cart_price_incl_tax", "body", m.BaseCartPriceInclTax); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteItemTotalsInterface) validateBaseCartTax(formats strfmt.Registry) error {

	if err := validate.Required("base_cart_tax", "body", m.BaseCartTax); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteItemTotalsInterface) validateBaseCatalogPrice(formats strfmt.Registry) error {

	if err := validate.Required("base_catalog_price", "body", m.BaseCatalogPrice); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteItemTotalsInterface) validateBaseCatalogPriceInclTax(formats strfmt.Registry) error {

	if err := validate.Required("base_catalog_price_incl_tax", "body", m.BaseCatalogPriceInclTax); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteItemTotalsInterface) validateCartPrice(formats strfmt.Registry) error {

	if err := validate.Required("cart_price", "body", m.CartPrice); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteItemTotalsInterface) validateCartPriceInclTax(formats strfmt.Registry) error {

	if err := validate.Required("cart_price_incl_tax", "body", m.CartPriceInclTax); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteItemTotalsInterface) validateCartTax(formats strfmt.Registry) error {

	if err := validate.Required("cart_tax", "body", m.CartTax); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteItemTotalsInterface) validateCatalogPrice(formats strfmt.Registry) error {

	if err := validate.Required("catalog_price", "body", m.CatalogPrice); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteItemTotalsInterface) validateCatalogPriceInclTax(formats strfmt.Registry) error {

	if err := validate.Required("catalog_price_incl_tax", "body", m.CatalogPriceInclTax); err != nil {
		return err
	}

	return nil
}

func (m *NegotiableQuoteDataNegotiableQuoteItemTotalsInterface) validateCost(formats strfmt.Registry) error {

	if err := validate.Required("cost", "body", m.Cost); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NegotiableQuoteDataNegotiableQuoteItemTotalsInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NegotiableQuoteDataNegotiableQuoteItemTotalsInterface) UnmarshalBinary(b []byte) error {
	var res NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
