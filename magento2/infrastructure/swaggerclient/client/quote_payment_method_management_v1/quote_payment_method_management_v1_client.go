// Code generated by go-swagger; DO NOT EDIT.

package quote_payment_method_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new quote payment method management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for quote payment method management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
QuotePaymentMethodManagementV1GetGet Returns the payment method for a specified shopping cart.
*/
func (a *Client) QuotePaymentMethodManagementV1GetGet(params *QuotePaymentMethodManagementV1GetGetParams) (*QuotePaymentMethodManagementV1GetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuotePaymentMethodManagementV1GetGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quotePaymentMethodManagementV1GetGet",
		Method:             "GET",
		PathPattern:        "/V1/carts/{cartId}/selected-payment-method",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuotePaymentMethodManagementV1GetGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuotePaymentMethodManagementV1GetGetOK), nil

}

/*
QuotePaymentMethodManagementV1GetGetMine Returns the payment method for a specified shopping cart.
*/
func (a *Client) QuotePaymentMethodManagementV1GetGetMine(params *QuotePaymentMethodManagementV1GetGetMineParams) (*QuotePaymentMethodManagementV1GetGetMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuotePaymentMethodManagementV1GetGetMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quotePaymentMethodManagementV1GetGetMine",
		Method:             "GET",
		PathPattern:        "/V1/carts/mine/selected-payment-method",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuotePaymentMethodManagementV1GetGetMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuotePaymentMethodManagementV1GetGetMineOK), nil

}

/*
QuotePaymentMethodManagementV1GetListGet Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each objectâ€™s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.
*/
func (a *Client) QuotePaymentMethodManagementV1GetListGet(params *QuotePaymentMethodManagementV1GetListGetParams) (*QuotePaymentMethodManagementV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuotePaymentMethodManagementV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quotePaymentMethodManagementV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/carts/{cartId}/payment-methods",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuotePaymentMethodManagementV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuotePaymentMethodManagementV1GetListGetOK), nil

}

/*
QuotePaymentMethodManagementV1SetPut Adds a specified payment method to a specified shopping cart.
*/
func (a *Client) QuotePaymentMethodManagementV1SetPut(params *QuotePaymentMethodManagementV1SetPutParams) (*QuotePaymentMethodManagementV1SetPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuotePaymentMethodManagementV1SetPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quotePaymentMethodManagementV1SetPut",
		Method:             "PUT",
		PathPattern:        "/V1/carts/{cartId}/selected-payment-method",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuotePaymentMethodManagementV1SetPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuotePaymentMethodManagementV1SetPutOK), nil

}

/*
QuotePaymentMethodManagementV1SetPutMine Adds a specified payment method to a specified shopping cart.
*/
func (a *Client) QuotePaymentMethodManagementV1SetPutMine(params *QuotePaymentMethodManagementV1SetPutMineParams) (*QuotePaymentMethodManagementV1SetPutMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuotePaymentMethodManagementV1SetPutMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quotePaymentMethodManagementV1SetPutMine",
		Method:             "PUT",
		PathPattern:        "/V1/carts/mine/selected-payment-method",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuotePaymentMethodManagementV1SetPutMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuotePaymentMethodManagementV1SetPutMineOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
