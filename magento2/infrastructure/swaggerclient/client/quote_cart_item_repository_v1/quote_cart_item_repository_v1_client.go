// Code generated by go-swagger; DO NOT EDIT.

package quote_cart_item_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new quote cart item repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for quote cart item repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
QuoteCartItemRepositoryV1DeleteByIDDelete Removes the specified item from the specified cart.
*/
func (a *Client) QuoteCartItemRepositoryV1DeleteByIDDelete(params *QuoteCartItemRepositoryV1DeleteByIDDeleteParams) (*QuoteCartItemRepositoryV1DeleteByIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartItemRepositoryV1DeleteByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartItemRepositoryV1DeleteByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/carts/{cartId}/items/{itemId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartItemRepositoryV1DeleteByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartItemRepositoryV1DeleteByIDDeleteOK), nil

}

/*
QuoteCartItemRepositoryV1DeleteByIDDeleteMine Removes the specified item from the specified cart.
*/
func (a *Client) QuoteCartItemRepositoryV1DeleteByIDDeleteMine(params *QuoteCartItemRepositoryV1DeleteByIDDeleteMineParams) (*QuoteCartItemRepositoryV1DeleteByIDDeleteMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartItemRepositoryV1DeleteByIDDeleteMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartItemRepositoryV1DeleteByIdDeleteMine",
		Method:             "DELETE",
		PathPattern:        "/V1/carts/mine/items/{itemId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartItemRepositoryV1DeleteByIDDeleteMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartItemRepositoryV1DeleteByIDDeleteMineOK), nil

}

/*
QuoteCartItemRepositoryV1GetListGet Lists items that are assigned to a specified cart.
*/
func (a *Client) QuoteCartItemRepositoryV1GetListGet(params *QuoteCartItemRepositoryV1GetListGetParams) (*QuoteCartItemRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartItemRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartItemRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/carts/{cartId}/items",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartItemRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartItemRepositoryV1GetListGetOK), nil

}

/*
QuoteCartItemRepositoryV1GetListGetMine Lists items that are assigned to a specified cart.
*/
func (a *Client) QuoteCartItemRepositoryV1GetListGetMine(params *QuoteCartItemRepositoryV1GetListGetMineParams) (*QuoteCartItemRepositoryV1GetListGetMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartItemRepositoryV1GetListGetMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartItemRepositoryV1GetListGetMine",
		Method:             "GET",
		PathPattern:        "/V1/carts/mine/items",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartItemRepositoryV1GetListGetMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartItemRepositoryV1GetListGetMineOK), nil

}

/*
QuoteCartItemRepositoryV1SavePost Add/update the specified cart item.
*/
func (a *Client) QuoteCartItemRepositoryV1SavePost(params *QuoteCartItemRepositoryV1SavePostParams) (*QuoteCartItemRepositoryV1SavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartItemRepositoryV1SavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartItemRepositoryV1SavePost",
		Method:             "POST",
		PathPattern:        "/V1/carts/{quoteId}/items",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartItemRepositoryV1SavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartItemRepositoryV1SavePostOK), nil

}

/*
QuoteCartItemRepositoryV1SavePostMine Add/update the specified cart item.
*/
func (a *Client) QuoteCartItemRepositoryV1SavePostMine(params *QuoteCartItemRepositoryV1SavePostMineParams) (*QuoteCartItemRepositoryV1SavePostMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartItemRepositoryV1SavePostMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartItemRepositoryV1SavePostMine",
		Method:             "POST",
		PathPattern:        "/V1/carts/mine/items",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartItemRepositoryV1SavePostMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartItemRepositoryV1SavePostMineOK), nil

}

/*
QuoteCartItemRepositoryV1SavePut Add/update the specified cart item.
*/
func (a *Client) QuoteCartItemRepositoryV1SavePut(params *QuoteCartItemRepositoryV1SavePutParams) (*QuoteCartItemRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartItemRepositoryV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartItemRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/carts/{cartId}/items/{itemId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartItemRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartItemRepositoryV1SavePutOK), nil

}

/*
QuoteCartItemRepositoryV1SavePutMine Add/update the specified cart item.
*/
func (a *Client) QuoteCartItemRepositoryV1SavePutMine(params *QuoteCartItemRepositoryV1SavePutMineParams) (*QuoteCartItemRepositoryV1SavePutMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartItemRepositoryV1SavePutMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartItemRepositoryV1SavePutMine",
		Method:             "PUT",
		PathPattern:        "/V1/carts/mine/items/{itemId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartItemRepositoryV1SavePutMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartItemRepositoryV1SavePutMineOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
