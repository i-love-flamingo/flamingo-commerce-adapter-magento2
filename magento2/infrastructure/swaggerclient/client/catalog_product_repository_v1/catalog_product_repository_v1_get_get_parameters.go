// Code generated by go-swagger; DO NOT EDIT.

package catalog_product_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCatalogProductRepositoryV1GetGetParams creates a new CatalogProductRepositoryV1GetGetParams object
// with the default values initialized.
func NewCatalogProductRepositoryV1GetGetParams() *CatalogProductRepositoryV1GetGetParams {
	var ()
	return &CatalogProductRepositoryV1GetGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCatalogProductRepositoryV1GetGetParamsWithTimeout creates a new CatalogProductRepositoryV1GetGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCatalogProductRepositoryV1GetGetParamsWithTimeout(timeout time.Duration) *CatalogProductRepositoryV1GetGetParams {
	var ()
	return &CatalogProductRepositoryV1GetGetParams{

		timeout: timeout,
	}
}

// NewCatalogProductRepositoryV1GetGetParamsWithContext creates a new CatalogProductRepositoryV1GetGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewCatalogProductRepositoryV1GetGetParamsWithContext(ctx context.Context) *CatalogProductRepositoryV1GetGetParams {
	var ()
	return &CatalogProductRepositoryV1GetGetParams{

		Context: ctx,
	}
}

// NewCatalogProductRepositoryV1GetGetParamsWithHTTPClient creates a new CatalogProductRepositoryV1GetGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCatalogProductRepositoryV1GetGetParamsWithHTTPClient(client *http.Client) *CatalogProductRepositoryV1GetGetParams {
	var ()
	return &CatalogProductRepositoryV1GetGetParams{
		HTTPClient: client,
	}
}

/*CatalogProductRepositoryV1GetGetParams contains all the parameters to send to the API endpoint
for the catalog product repository v1 get get operation typically these are written to a http.Request
*/
type CatalogProductRepositoryV1GetGetParams struct {

	/*EditMode*/
	EditMode *bool
	/*ForceReload*/
	ForceReload *bool
	/*Sku*/
	Sku string
	/*StoreID*/
	StoreID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the catalog product repository v1 get get params
func (o *CatalogProductRepositoryV1GetGetParams) WithTimeout(timeout time.Duration) *CatalogProductRepositoryV1GetGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the catalog product repository v1 get get params
func (o *CatalogProductRepositoryV1GetGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the catalog product repository v1 get get params
func (o *CatalogProductRepositoryV1GetGetParams) WithContext(ctx context.Context) *CatalogProductRepositoryV1GetGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the catalog product repository v1 get get params
func (o *CatalogProductRepositoryV1GetGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the catalog product repository v1 get get params
func (o *CatalogProductRepositoryV1GetGetParams) WithHTTPClient(client *http.Client) *CatalogProductRepositoryV1GetGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the catalog product repository v1 get get params
func (o *CatalogProductRepositoryV1GetGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEditMode adds the editMode to the catalog product repository v1 get get params
func (o *CatalogProductRepositoryV1GetGetParams) WithEditMode(editMode *bool) *CatalogProductRepositoryV1GetGetParams {
	o.SetEditMode(editMode)
	return o
}

// SetEditMode adds the editMode to the catalog product repository v1 get get params
func (o *CatalogProductRepositoryV1GetGetParams) SetEditMode(editMode *bool) {
	o.EditMode = editMode
}

// WithForceReload adds the forceReload to the catalog product repository v1 get get params
func (o *CatalogProductRepositoryV1GetGetParams) WithForceReload(forceReload *bool) *CatalogProductRepositoryV1GetGetParams {
	o.SetForceReload(forceReload)
	return o
}

// SetForceReload adds the forceReload to the catalog product repository v1 get get params
func (o *CatalogProductRepositoryV1GetGetParams) SetForceReload(forceReload *bool) {
	o.ForceReload = forceReload
}

// WithSku adds the sku to the catalog product repository v1 get get params
func (o *CatalogProductRepositoryV1GetGetParams) WithSku(sku string) *CatalogProductRepositoryV1GetGetParams {
	o.SetSku(sku)
	return o
}

// SetSku adds the sku to the catalog product repository v1 get get params
func (o *CatalogProductRepositoryV1GetGetParams) SetSku(sku string) {
	o.Sku = sku
}

// WithStoreID adds the storeID to the catalog product repository v1 get get params
func (o *CatalogProductRepositoryV1GetGetParams) WithStoreID(storeID *int64) *CatalogProductRepositoryV1GetGetParams {
	o.SetStoreID(storeID)
	return o
}

// SetStoreID adds the storeId to the catalog product repository v1 get get params
func (o *CatalogProductRepositoryV1GetGetParams) SetStoreID(storeID *int64) {
	o.StoreID = storeID
}

// WriteToRequest writes these params to a swagger request
func (o *CatalogProductRepositoryV1GetGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EditMode != nil {

		// query param editMode
		var qrEditMode bool
		if o.EditMode != nil {
			qrEditMode = *o.EditMode
		}
		qEditMode := swag.FormatBool(qrEditMode)
		if qEditMode != "" {
			if err := r.SetQueryParam("editMode", qEditMode); err != nil {
				return err
			}
		}

	}

	if o.ForceReload != nil {

		// query param forceReload
		var qrForceReload bool
		if o.ForceReload != nil {
			qrForceReload = *o.ForceReload
		}
		qForceReload := swag.FormatBool(qrForceReload)
		if qForceReload != "" {
			if err := r.SetQueryParam("forceReload", qForceReload); err != nil {
				return err
			}
		}

	}

	// path param sku
	if err := r.SetPathParam("sku", o.Sku); err != nil {
		return err
	}

	if o.StoreID != nil {

		// query param storeId
		var qrStoreID int64
		if o.StoreID != nil {
			qrStoreID = *o.StoreID
		}
		qStoreID := swag.FormatInt64(qrStoreID)
		if qStoreID != "" {
			if err := r.SetQueryParam("storeId", qStoreID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
