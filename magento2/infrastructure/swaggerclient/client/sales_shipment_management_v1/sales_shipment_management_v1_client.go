// Code generated by go-swagger; DO NOT EDIT.

package sales_shipment_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new sales shipment management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sales shipment management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SalesShipmentManagementV1GetCommentsListGet Lists comments for a specified shipment.
*/
func (a *Client) SalesShipmentManagementV1GetCommentsListGet(params *SalesShipmentManagementV1GetCommentsListGetParams) (*SalesShipmentManagementV1GetCommentsListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesShipmentManagementV1GetCommentsListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "salesShipmentManagementV1GetCommentsListGet",
		Method:             "GET",
		PathPattern:        "/V1/shipment/{id}/comments",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SalesShipmentManagementV1GetCommentsListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SalesShipmentManagementV1GetCommentsListGetOK), nil

}

/*
SalesShipmentManagementV1GetLabelGet Gets a specified shipment label.
*/
func (a *Client) SalesShipmentManagementV1GetLabelGet(params *SalesShipmentManagementV1GetLabelGetParams) (*SalesShipmentManagementV1GetLabelGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesShipmentManagementV1GetLabelGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "salesShipmentManagementV1GetLabelGet",
		Method:             "GET",
		PathPattern:        "/V1/shipment/{id}/label",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SalesShipmentManagementV1GetLabelGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SalesShipmentManagementV1GetLabelGetOK), nil

}

/*
SalesShipmentManagementV1NotifyPost Emails user a specified shipment.
*/
func (a *Client) SalesShipmentManagementV1NotifyPost(params *SalesShipmentManagementV1NotifyPostParams) (*SalesShipmentManagementV1NotifyPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesShipmentManagementV1NotifyPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "salesShipmentManagementV1NotifyPost",
		Method:             "POST",
		PathPattern:        "/V1/shipment/{id}/emails",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SalesShipmentManagementV1NotifyPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SalesShipmentManagementV1NotifyPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
