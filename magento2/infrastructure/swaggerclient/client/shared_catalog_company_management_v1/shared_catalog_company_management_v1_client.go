// Code generated by go-swagger; DO NOT EDIT.

package shared_catalog_company_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new shared catalog company management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for shared catalog company management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SharedCatalogCompanyManagementV1AssignCompaniesPost Assign companies to a shared catalog.
*/
func (a *Client) SharedCatalogCompanyManagementV1AssignCompaniesPost(params *SharedCatalogCompanyManagementV1AssignCompaniesPostParams) (*SharedCatalogCompanyManagementV1AssignCompaniesPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSharedCatalogCompanyManagementV1AssignCompaniesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sharedCatalogCompanyManagementV1AssignCompaniesPost",
		Method:             "POST",
		PathPattern:        "/V1/sharedCatalog/{sharedCatalogId}/assignCompanies",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SharedCatalogCompanyManagementV1AssignCompaniesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SharedCatalogCompanyManagementV1AssignCompaniesPostOK), nil

}

/*
SharedCatalogCompanyManagementV1GetCompaniesGet Return the list of company IDs for the companies assigned to the selected catalog.
*/
func (a *Client) SharedCatalogCompanyManagementV1GetCompaniesGet(params *SharedCatalogCompanyManagementV1GetCompaniesGetParams) (*SharedCatalogCompanyManagementV1GetCompaniesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSharedCatalogCompanyManagementV1GetCompaniesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sharedCatalogCompanyManagementV1GetCompaniesGet",
		Method:             "GET",
		PathPattern:        "/V1/sharedCatalog/{sharedCatalogId}/companies",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SharedCatalogCompanyManagementV1GetCompaniesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SharedCatalogCompanyManagementV1GetCompaniesGetOK), nil

}

/*
SharedCatalogCompanyManagementV1UnassignCompaniesPost Unassign companies from a shared catalog.
*/
func (a *Client) SharedCatalogCompanyManagementV1UnassignCompaniesPost(params *SharedCatalogCompanyManagementV1UnassignCompaniesPostParams) (*SharedCatalogCompanyManagementV1UnassignCompaniesPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSharedCatalogCompanyManagementV1UnassignCompaniesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sharedCatalogCompanyManagementV1UnassignCompaniesPost",
		Method:             "POST",
		PathPattern:        "/V1/sharedCatalog/{sharedCatalogId}/unassignCompanies",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SharedCatalogCompanyManagementV1UnassignCompaniesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SharedCatalogCompanyManagementV1UnassignCompaniesPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
