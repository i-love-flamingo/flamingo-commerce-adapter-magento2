// Code generated by go-swagger; DO NOT EDIT.

package gift_card_account_gift_card_account_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new gift card account gift card account management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for gift card account gift card account management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GiftCardAccountGiftCardAccountManagementV1CheckGiftCardGetMine gift card account gift card account management v1 check gift card get mine API
*/
func (a *Client) GiftCardAccountGiftCardAccountManagementV1CheckGiftCardGetMine(params *GiftCardAccountGiftCardAccountManagementV1CheckGiftCardGetMineParams) (*GiftCardAccountGiftCardAccountManagementV1CheckGiftCardGetMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftCardAccountGiftCardAccountManagementV1CheckGiftCardGetMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "giftCardAccountGiftCardAccountManagementV1CheckGiftCardGetMine",
		Method:             "GET",
		PathPattern:        "/V1/carts/mine/checkGiftCard/{giftCardCode}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GiftCardAccountGiftCardAccountManagementV1CheckGiftCardGetMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GiftCardAccountGiftCardAccountManagementV1CheckGiftCardGetMineOK), nil

}

/*
GiftCardAccountGiftCardAccountManagementV1DeleteByQuoteIDDelete Remove GiftCard Account entity
*/
func (a *Client) GiftCardAccountGiftCardAccountManagementV1DeleteByQuoteIDDelete(params *GiftCardAccountGiftCardAccountManagementV1DeleteByQuoteIDDeleteParams) (*GiftCardAccountGiftCardAccountManagementV1DeleteByQuoteIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftCardAccountGiftCardAccountManagementV1DeleteByQuoteIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/carts/{cartId}/giftCards/{giftCardCode}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GiftCardAccountGiftCardAccountManagementV1DeleteByQuoteIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GiftCardAccountGiftCardAccountManagementV1DeleteByQuoteIDDeleteOK), nil

}

/*
GiftCardAccountGiftCardAccountManagementV1DeleteByQuoteIDDeleteMine Remove GiftCard Account entity
*/
func (a *Client) GiftCardAccountGiftCardAccountManagementV1DeleteByQuoteIDDeleteMine(params *GiftCardAccountGiftCardAccountManagementV1DeleteByQuoteIDDeleteMineParams) (*GiftCardAccountGiftCardAccountManagementV1DeleteByQuoteIDDeleteMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftCardAccountGiftCardAccountManagementV1DeleteByQuoteIDDeleteMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDeleteMine",
		Method:             "DELETE",
		PathPattern:        "/V1/carts/mine/giftCards/{giftCardCode}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GiftCardAccountGiftCardAccountManagementV1DeleteByQuoteIDDeleteMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GiftCardAccountGiftCardAccountManagementV1DeleteByQuoteIDDeleteMineOK), nil

}

/*
GiftCardAccountGiftCardAccountManagementV1GetListByQuoteIDGet Return GiftCard Account cards
*/
func (a *Client) GiftCardAccountGiftCardAccountManagementV1GetListByQuoteIDGet(params *GiftCardAccountGiftCardAccountManagementV1GetListByQuoteIDGetParams) (*GiftCardAccountGiftCardAccountManagementV1GetListByQuoteIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftCardAccountGiftCardAccountManagementV1GetListByQuoteIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGet",
		Method:             "GET",
		PathPattern:        "/V1/carts/{quoteId}/giftCards",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GiftCardAccountGiftCardAccountManagementV1GetListByQuoteIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GiftCardAccountGiftCardAccountManagementV1GetListByQuoteIDGetOK), nil

}

/*
GiftCardAccountGiftCardAccountManagementV1SaveByQuoteIDPostMine gift card account gift card account management v1 save by quote Id post mine API
*/
func (a *Client) GiftCardAccountGiftCardAccountManagementV1SaveByQuoteIDPostMine(params *GiftCardAccountGiftCardAccountManagementV1SaveByQuoteIDPostMineParams) (*GiftCardAccountGiftCardAccountManagementV1SaveByQuoteIDPostMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftCardAccountGiftCardAccountManagementV1SaveByQuoteIDPostMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostMine",
		Method:             "POST",
		PathPattern:        "/V1/carts/mine/giftCards",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GiftCardAccountGiftCardAccountManagementV1SaveByQuoteIDPostMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GiftCardAccountGiftCardAccountManagementV1SaveByQuoteIDPostMineOK), nil

}

/*
GiftCardAccountGiftCardAccountManagementV1SaveByQuoteIDPut gift card account gift card account management v1 save by quote Id put API
*/
func (a *Client) GiftCardAccountGiftCardAccountManagementV1SaveByQuoteIDPut(params *GiftCardAccountGiftCardAccountManagementV1SaveByQuoteIDPutParams) (*GiftCardAccountGiftCardAccountManagementV1SaveByQuoteIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGiftCardAccountGiftCardAccountManagementV1SaveByQuoteIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPut",
		Method:             "PUT",
		PathPattern:        "/V1/carts/{cartId}/giftCards",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GiftCardAccountGiftCardAccountManagementV1SaveByQuoteIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GiftCardAccountGiftCardAccountManagementV1SaveByQuoteIDPutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
