// Code generated by go-swagger; DO NOT EDIT.

package catalog_product_custom_option_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new catalog product custom option repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog product custom option repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CatalogProductCustomOptionRepositoryV1DeleteByIdentifierDelete catalog product custom option repository v1 delete by identifier delete API
*/
func (a *Client) CatalogProductCustomOptionRepositoryV1DeleteByIdentifierDelete(params *CatalogProductCustomOptionRepositoryV1DeleteByIdentifierDeleteParams) (*CatalogProductCustomOptionRepositoryV1DeleteByIdentifierDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogProductCustomOptionRepositoryV1DeleteByIdentifierDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogProductCustomOptionRepositoryV1DeleteByIdentifierDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/products/{sku}/options/{optionId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogProductCustomOptionRepositoryV1DeleteByIdentifierDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogProductCustomOptionRepositoryV1DeleteByIdentifierDeleteOK), nil

}

/*
CatalogProductCustomOptionRepositoryV1GetGet Get custom option for a specific product
*/
func (a *Client) CatalogProductCustomOptionRepositoryV1GetGet(params *CatalogProductCustomOptionRepositoryV1GetGetParams) (*CatalogProductCustomOptionRepositoryV1GetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogProductCustomOptionRepositoryV1GetGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogProductCustomOptionRepositoryV1GetGet",
		Method:             "GET",
		PathPattern:        "/V1/products/{sku}/options/{optionId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogProductCustomOptionRepositoryV1GetGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogProductCustomOptionRepositoryV1GetGetOK), nil

}

/*
CatalogProductCustomOptionRepositoryV1GetListGet Get the list of custom options for a specific product
*/
func (a *Client) CatalogProductCustomOptionRepositoryV1GetListGet(params *CatalogProductCustomOptionRepositoryV1GetListGetParams) (*CatalogProductCustomOptionRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogProductCustomOptionRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogProductCustomOptionRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/products/{sku}/options",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogProductCustomOptionRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogProductCustomOptionRepositoryV1GetListGetOK), nil

}

/*
CatalogProductCustomOptionRepositoryV1SavePost Save Custom Option
*/
func (a *Client) CatalogProductCustomOptionRepositoryV1SavePost(params *CatalogProductCustomOptionRepositoryV1SavePostParams) (*CatalogProductCustomOptionRepositoryV1SavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogProductCustomOptionRepositoryV1SavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogProductCustomOptionRepositoryV1SavePost",
		Method:             "POST",
		PathPattern:        "/V1/products/options",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogProductCustomOptionRepositoryV1SavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogProductCustomOptionRepositoryV1SavePostOK), nil

}

/*
CatalogProductCustomOptionRepositoryV1SavePut Save Custom Option
*/
func (a *Client) CatalogProductCustomOptionRepositoryV1SavePut(params *CatalogProductCustomOptionRepositoryV1SavePutParams) (*CatalogProductCustomOptionRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogProductCustomOptionRepositoryV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogProductCustomOptionRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/products/options/{optionId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogProductCustomOptionRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogProductCustomOptionRepositoryV1SavePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
