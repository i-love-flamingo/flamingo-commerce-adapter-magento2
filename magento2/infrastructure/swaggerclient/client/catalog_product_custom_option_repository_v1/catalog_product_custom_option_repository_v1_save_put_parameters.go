// Code generated by go-swagger; DO NOT EDIT.

package catalog_product_custom_option_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCatalogProductCustomOptionRepositoryV1SavePutParams creates a new CatalogProductCustomOptionRepositoryV1SavePutParams object
// with the default values initialized.
func NewCatalogProductCustomOptionRepositoryV1SavePutParams() *CatalogProductCustomOptionRepositoryV1SavePutParams {
	var ()
	return &CatalogProductCustomOptionRepositoryV1SavePutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCatalogProductCustomOptionRepositoryV1SavePutParamsWithTimeout creates a new CatalogProductCustomOptionRepositoryV1SavePutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCatalogProductCustomOptionRepositoryV1SavePutParamsWithTimeout(timeout time.Duration) *CatalogProductCustomOptionRepositoryV1SavePutParams {
	var ()
	return &CatalogProductCustomOptionRepositoryV1SavePutParams{

		timeout: timeout,
	}
}

// NewCatalogProductCustomOptionRepositoryV1SavePutParamsWithContext creates a new CatalogProductCustomOptionRepositoryV1SavePutParams object
// with the default values initialized, and the ability to set a context for a request
func NewCatalogProductCustomOptionRepositoryV1SavePutParamsWithContext(ctx context.Context) *CatalogProductCustomOptionRepositoryV1SavePutParams {
	var ()
	return &CatalogProductCustomOptionRepositoryV1SavePutParams{

		Context: ctx,
	}
}

// NewCatalogProductCustomOptionRepositoryV1SavePutParamsWithHTTPClient creates a new CatalogProductCustomOptionRepositoryV1SavePutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCatalogProductCustomOptionRepositoryV1SavePutParamsWithHTTPClient(client *http.Client) *CatalogProductCustomOptionRepositoryV1SavePutParams {
	var ()
	return &CatalogProductCustomOptionRepositoryV1SavePutParams{
		HTTPClient: client,
	}
}

/*CatalogProductCustomOptionRepositoryV1SavePutParams contains all the parameters to send to the API endpoint
for the catalog product custom option repository v1 save put operation typically these are written to a http.Request
*/
type CatalogProductCustomOptionRepositoryV1SavePutParams struct {

	/*CatalogProductCustomOptionRepositoryV1SavePutBody*/
	CatalogProductCustomOptionRepositoryV1SavePutBody CatalogProductCustomOptionRepositoryV1SavePutBody
	/*OptionID*/
	OptionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the catalog product custom option repository v1 save put params
func (o *CatalogProductCustomOptionRepositoryV1SavePutParams) WithTimeout(timeout time.Duration) *CatalogProductCustomOptionRepositoryV1SavePutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the catalog product custom option repository v1 save put params
func (o *CatalogProductCustomOptionRepositoryV1SavePutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the catalog product custom option repository v1 save put params
func (o *CatalogProductCustomOptionRepositoryV1SavePutParams) WithContext(ctx context.Context) *CatalogProductCustomOptionRepositoryV1SavePutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the catalog product custom option repository v1 save put params
func (o *CatalogProductCustomOptionRepositoryV1SavePutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the catalog product custom option repository v1 save put params
func (o *CatalogProductCustomOptionRepositoryV1SavePutParams) WithHTTPClient(client *http.Client) *CatalogProductCustomOptionRepositoryV1SavePutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the catalog product custom option repository v1 save put params
func (o *CatalogProductCustomOptionRepositoryV1SavePutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCatalogProductCustomOptionRepositoryV1SavePutBody adds the catalogProductCustomOptionRepositoryV1SavePutBody to the catalog product custom option repository v1 save put params
func (o *CatalogProductCustomOptionRepositoryV1SavePutParams) WithCatalogProductCustomOptionRepositoryV1SavePutBody(catalogProductCustomOptionRepositoryV1SavePutBody CatalogProductCustomOptionRepositoryV1SavePutBody) *CatalogProductCustomOptionRepositoryV1SavePutParams {
	o.SetCatalogProductCustomOptionRepositoryV1SavePutBody(catalogProductCustomOptionRepositoryV1SavePutBody)
	return o
}

// SetCatalogProductCustomOptionRepositoryV1SavePutBody adds the catalogProductCustomOptionRepositoryV1SavePutBody to the catalog product custom option repository v1 save put params
func (o *CatalogProductCustomOptionRepositoryV1SavePutParams) SetCatalogProductCustomOptionRepositoryV1SavePutBody(catalogProductCustomOptionRepositoryV1SavePutBody CatalogProductCustomOptionRepositoryV1SavePutBody) {
	o.CatalogProductCustomOptionRepositoryV1SavePutBody = catalogProductCustomOptionRepositoryV1SavePutBody
}

// WithOptionID adds the optionID to the catalog product custom option repository v1 save put params
func (o *CatalogProductCustomOptionRepositoryV1SavePutParams) WithOptionID(optionID string) *CatalogProductCustomOptionRepositoryV1SavePutParams {
	o.SetOptionID(optionID)
	return o
}

// SetOptionID adds the optionId to the catalog product custom option repository v1 save put params
func (o *CatalogProductCustomOptionRepositoryV1SavePutParams) SetOptionID(optionID string) {
	o.OptionID = optionID
}

// WriteToRequest writes these params to a swagger request
func (o *CatalogProductCustomOptionRepositoryV1SavePutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.CatalogProductCustomOptionRepositoryV1SavePutBody); err != nil {
		return err
	}

	// path param optionId
	if err := r.SetPathParam("optionId", o.OptionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
