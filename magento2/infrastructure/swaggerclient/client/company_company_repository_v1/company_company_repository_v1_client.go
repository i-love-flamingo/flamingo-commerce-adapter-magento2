// Code generated by go-swagger; DO NOT EDIT.

package company_company_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new company company repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for company company repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CompanyCompanyRepositoryV1DeleteByIDDelete Delete a company. Customers belonging to a company are not deleted with this request.
*/
func (a *Client) CompanyCompanyRepositoryV1DeleteByIDDelete(params *CompanyCompanyRepositoryV1DeleteByIDDeleteParams) (*CompanyCompanyRepositoryV1DeleteByIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyCompanyRepositoryV1DeleteByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyCompanyRepositoryV1DeleteByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/company/{companyId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyCompanyRepositoryV1DeleteByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyCompanyRepositoryV1DeleteByIDDeleteOK), nil

}

/*
CompanyCompanyRepositoryV1GetGet Returns company details.
*/
func (a *Client) CompanyCompanyRepositoryV1GetGet(params *CompanyCompanyRepositoryV1GetGetParams) (*CompanyCompanyRepositoryV1GetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyCompanyRepositoryV1GetGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyCompanyRepositoryV1GetGet",
		Method:             "GET",
		PathPattern:        "/V1/company/{companyId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyCompanyRepositoryV1GetGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyCompanyRepositoryV1GetGetOK), nil

}

/*
CompanyCompanyRepositoryV1GetListGet Returns the list of companies. The list is an array of objects, and detailed information about item attributes might not be included.
*/
func (a *Client) CompanyCompanyRepositoryV1GetListGet(params *CompanyCompanyRepositoryV1GetListGetParams) (*CompanyCompanyRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyCompanyRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyCompanyRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/company/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyCompanyRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyCompanyRepositoryV1GetListGetOK), nil

}

/*
CompanyCompanyRepositoryV1SavePost Create or update a company account.
*/
func (a *Client) CompanyCompanyRepositoryV1SavePost(params *CompanyCompanyRepositoryV1SavePostParams) (*CompanyCompanyRepositoryV1SavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyCompanyRepositoryV1SavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyCompanyRepositoryV1SavePost",
		Method:             "POST",
		PathPattern:        "/V1/company/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyCompanyRepositoryV1SavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyCompanyRepositoryV1SavePostOK), nil

}

/*
CompanyCompanyRepositoryV1SavePut Create or update a company account.
*/
func (a *Client) CompanyCompanyRepositoryV1SavePut(params *CompanyCompanyRepositoryV1SavePutParams) (*CompanyCompanyRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyCompanyRepositoryV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyCompanyRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/company/{companyId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyCompanyRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyCompanyRepositoryV1SavePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
