// Code generated by go-swagger; DO NOT EDIT.

package company_company_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCompanyCompanyRepositoryV1GetGetParams creates a new CompanyCompanyRepositoryV1GetGetParams object
// with the default values initialized.
func NewCompanyCompanyRepositoryV1GetGetParams() *CompanyCompanyRepositoryV1GetGetParams {
	var ()
	return &CompanyCompanyRepositoryV1GetGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCompanyCompanyRepositoryV1GetGetParamsWithTimeout creates a new CompanyCompanyRepositoryV1GetGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCompanyCompanyRepositoryV1GetGetParamsWithTimeout(timeout time.Duration) *CompanyCompanyRepositoryV1GetGetParams {
	var ()
	return &CompanyCompanyRepositoryV1GetGetParams{

		timeout: timeout,
	}
}

// NewCompanyCompanyRepositoryV1GetGetParamsWithContext creates a new CompanyCompanyRepositoryV1GetGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewCompanyCompanyRepositoryV1GetGetParamsWithContext(ctx context.Context) *CompanyCompanyRepositoryV1GetGetParams {
	var ()
	return &CompanyCompanyRepositoryV1GetGetParams{

		Context: ctx,
	}
}

// NewCompanyCompanyRepositoryV1GetGetParamsWithHTTPClient creates a new CompanyCompanyRepositoryV1GetGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCompanyCompanyRepositoryV1GetGetParamsWithHTTPClient(client *http.Client) *CompanyCompanyRepositoryV1GetGetParams {
	var ()
	return &CompanyCompanyRepositoryV1GetGetParams{
		HTTPClient: client,
	}
}

/*CompanyCompanyRepositoryV1GetGetParams contains all the parameters to send to the API endpoint
for the company company repository v1 get get operation typically these are written to a http.Request
*/
type CompanyCompanyRepositoryV1GetGetParams struct {

	/*CompanyID*/
	CompanyID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the company company repository v1 get get params
func (o *CompanyCompanyRepositoryV1GetGetParams) WithTimeout(timeout time.Duration) *CompanyCompanyRepositoryV1GetGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the company company repository v1 get get params
func (o *CompanyCompanyRepositoryV1GetGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the company company repository v1 get get params
func (o *CompanyCompanyRepositoryV1GetGetParams) WithContext(ctx context.Context) *CompanyCompanyRepositoryV1GetGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the company company repository v1 get get params
func (o *CompanyCompanyRepositoryV1GetGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the company company repository v1 get get params
func (o *CompanyCompanyRepositoryV1GetGetParams) WithHTTPClient(client *http.Client) *CompanyCompanyRepositoryV1GetGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the company company repository v1 get get params
func (o *CompanyCompanyRepositoryV1GetGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCompanyID adds the companyID to the company company repository v1 get get params
func (o *CompanyCompanyRepositoryV1GetGetParams) WithCompanyID(companyID int64) *CompanyCompanyRepositoryV1GetGetParams {
	o.SetCompanyID(companyID)
	return o
}

// SetCompanyID adds the companyId to the company company repository v1 get get params
func (o *CompanyCompanyRepositoryV1GetGetParams) SetCompanyID(companyID int64) {
	o.CompanyID = companyID
}

// WriteToRequest writes these params to a swagger request
func (o *CompanyCompanyRepositoryV1GetGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param companyId
	if err := r.SetPathParam("companyId", swag.FormatInt64(o.CompanyID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
