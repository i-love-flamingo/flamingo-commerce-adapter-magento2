// Code generated by go-swagger; DO NOT EDIT.

package negotiable_quote_negotiable_quote_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new negotiable quote negotiable quote management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for negotiable quote negotiable quote management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
NegotiableQuoteNegotiableQuoteManagementV1AdminSendPost Submit the B2B quote to the customer. The quote status for the customer will be changed to 'Updated', and the customer can work with the quote.
*/
func (a *Client) NegotiableQuoteNegotiableQuoteManagementV1AdminSendPost(params *NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostParams) (*NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNegotiableQuoteNegotiableQuoteManagementV1AdminSendPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "negotiableQuoteNegotiableQuoteManagementV1AdminSendPost",
		Method:             "POST",
		PathPattern:        "/V1/negotiableQuote/submitToCustomer",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NegotiableQuoteNegotiableQuoteManagementV1AdminSendPostOK), nil

}

/*
NegotiableQuoteNegotiableQuoteManagementV1CreatePost Create a B2B quote based on a regular Magento quote. If the B2B quote requires a shipping address (for negotiation or tax calculations), add it to the regular quote before you create a B2B quote.
*/
func (a *Client) NegotiableQuoteNegotiableQuoteManagementV1CreatePost(params *NegotiableQuoteNegotiableQuoteManagementV1CreatePostParams) (*NegotiableQuoteNegotiableQuoteManagementV1CreatePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNegotiableQuoteNegotiableQuoteManagementV1CreatePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "negotiableQuoteNegotiableQuoteManagementV1CreatePost",
		Method:             "POST",
		PathPattern:        "/V1/negotiableQuote/request",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NegotiableQuoteNegotiableQuoteManagementV1CreatePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NegotiableQuoteNegotiableQuoteManagementV1CreatePostOK), nil

}

/*
NegotiableQuoteNegotiableQuoteManagementV1DeclinePost Decline the B2B quote. All custom pricing will be removed from this quote. The buyer will be able to place an order using their standard catalog prices and discounts.
*/
func (a *Client) NegotiableQuoteNegotiableQuoteManagementV1DeclinePost(params *NegotiableQuoteNegotiableQuoteManagementV1DeclinePostParams) (*NegotiableQuoteNegotiableQuoteManagementV1DeclinePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNegotiableQuoteNegotiableQuoteManagementV1DeclinePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "negotiableQuoteNegotiableQuoteManagementV1DeclinePost",
		Method:             "POST",
		PathPattern:        "/V1/negotiableQuote/decline",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NegotiableQuoteNegotiableQuoteManagementV1DeclinePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NegotiableQuoteNegotiableQuoteManagementV1DeclinePostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
