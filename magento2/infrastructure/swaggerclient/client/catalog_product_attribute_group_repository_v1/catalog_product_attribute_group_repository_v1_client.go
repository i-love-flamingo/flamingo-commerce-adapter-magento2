// Code generated by go-swagger; DO NOT EDIT.

package catalog_product_attribute_group_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new catalog product attribute group repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog product attribute group repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CatalogProductAttributeGroupRepositoryV1DeleteByIDDelete Remove attribute group by id
*/
func (a *Client) CatalogProductAttributeGroupRepositoryV1DeleteByIDDelete(params *CatalogProductAttributeGroupRepositoryV1DeleteByIDDeleteParams) (*CatalogProductAttributeGroupRepositoryV1DeleteByIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogProductAttributeGroupRepositoryV1DeleteByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogProductAttributeGroupRepositoryV1DeleteByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/products/attribute-sets/groups/{groupId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogProductAttributeGroupRepositoryV1DeleteByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogProductAttributeGroupRepositoryV1DeleteByIDDeleteOK), nil

}

/*
CatalogProductAttributeGroupRepositoryV1GetListGet Retrieve list of attribute groups
*/
func (a *Client) CatalogProductAttributeGroupRepositoryV1GetListGet(params *CatalogProductAttributeGroupRepositoryV1GetListGetParams) (*CatalogProductAttributeGroupRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogProductAttributeGroupRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogProductAttributeGroupRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/products/attribute-sets/groups/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogProductAttributeGroupRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogProductAttributeGroupRepositoryV1GetListGetOK), nil

}

/*
CatalogProductAttributeGroupRepositoryV1SavePost Save attribute group
*/
func (a *Client) CatalogProductAttributeGroupRepositoryV1SavePost(params *CatalogProductAttributeGroupRepositoryV1SavePostParams) (*CatalogProductAttributeGroupRepositoryV1SavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogProductAttributeGroupRepositoryV1SavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogProductAttributeGroupRepositoryV1SavePost",
		Method:             "POST",
		PathPattern:        "/V1/products/attribute-sets/groups",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogProductAttributeGroupRepositoryV1SavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogProductAttributeGroupRepositoryV1SavePostOK), nil

}

/*
CatalogProductAttributeGroupRepositoryV1SavePut Save attribute group
*/
func (a *Client) CatalogProductAttributeGroupRepositoryV1SavePut(params *CatalogProductAttributeGroupRepositoryV1SavePutParams) (*CatalogProductAttributeGroupRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogProductAttributeGroupRepositoryV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogProductAttributeGroupRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/products/attribute-sets/{attributeSetId}/groups",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogProductAttributeGroupRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogProductAttributeGroupRepositoryV1SavePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
