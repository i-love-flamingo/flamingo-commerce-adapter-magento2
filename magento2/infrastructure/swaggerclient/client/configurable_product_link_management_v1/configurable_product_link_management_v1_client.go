// Code generated by go-swagger; DO NOT EDIT.

package configurable_product_link_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new configurable product link management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for configurable product link management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ConfigurableProductLinkManagementV1AddChildPost configurable product link management v1 add child post API
*/
func (a *Client) ConfigurableProductLinkManagementV1AddChildPost(params *ConfigurableProductLinkManagementV1AddChildPostParams) (*ConfigurableProductLinkManagementV1AddChildPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigurableProductLinkManagementV1AddChildPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "configurableProductLinkManagementV1AddChildPost",
		Method:             "POST",
		PathPattern:        "/V1/configurable-products/{sku}/child",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConfigurableProductLinkManagementV1AddChildPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigurableProductLinkManagementV1AddChildPostOK), nil

}

/*
ConfigurableProductLinkManagementV1GetChildrenGet Get all children for Configurable product
*/
func (a *Client) ConfigurableProductLinkManagementV1GetChildrenGet(params *ConfigurableProductLinkManagementV1GetChildrenGetParams) (*ConfigurableProductLinkManagementV1GetChildrenGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigurableProductLinkManagementV1GetChildrenGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "configurableProductLinkManagementV1GetChildrenGet",
		Method:             "GET",
		PathPattern:        "/V1/configurable-products/{sku}/children",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConfigurableProductLinkManagementV1GetChildrenGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigurableProductLinkManagementV1GetChildrenGetOK), nil

}

/*
ConfigurableProductLinkManagementV1RemoveChildDelete Remove configurable product option
*/
func (a *Client) ConfigurableProductLinkManagementV1RemoveChildDelete(params *ConfigurableProductLinkManagementV1RemoveChildDeleteParams) (*ConfigurableProductLinkManagementV1RemoveChildDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigurableProductLinkManagementV1RemoveChildDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "configurableProductLinkManagementV1RemoveChildDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/configurable-products/{sku}/children/{childSku}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConfigurableProductLinkManagementV1RemoveChildDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigurableProductLinkManagementV1RemoveChildDeleteOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
