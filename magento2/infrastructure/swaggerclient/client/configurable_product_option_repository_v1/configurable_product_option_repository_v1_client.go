// Code generated by go-swagger; DO NOT EDIT.

package configurable_product_option_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new configurable product option repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for configurable product option repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ConfigurableProductOptionRepositoryV1DeleteByIDDelete Remove option from configurable product
*/
func (a *Client) ConfigurableProductOptionRepositoryV1DeleteByIDDelete(params *ConfigurableProductOptionRepositoryV1DeleteByIDDeleteParams) (*ConfigurableProductOptionRepositoryV1DeleteByIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigurableProductOptionRepositoryV1DeleteByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "configurableProductOptionRepositoryV1DeleteByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/configurable-products/{sku}/options/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConfigurableProductOptionRepositoryV1DeleteByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigurableProductOptionRepositoryV1DeleteByIDDeleteOK), nil

}

/*
ConfigurableProductOptionRepositoryV1GetGet Get option for configurable product
*/
func (a *Client) ConfigurableProductOptionRepositoryV1GetGet(params *ConfigurableProductOptionRepositoryV1GetGetParams) (*ConfigurableProductOptionRepositoryV1GetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigurableProductOptionRepositoryV1GetGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "configurableProductOptionRepositoryV1GetGet",
		Method:             "GET",
		PathPattern:        "/V1/configurable-products/{sku}/options/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConfigurableProductOptionRepositoryV1GetGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigurableProductOptionRepositoryV1GetGetOK), nil

}

/*
ConfigurableProductOptionRepositoryV1GetListGet Get all options for configurable product
*/
func (a *Client) ConfigurableProductOptionRepositoryV1GetListGet(params *ConfigurableProductOptionRepositoryV1GetListGetParams) (*ConfigurableProductOptionRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigurableProductOptionRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "configurableProductOptionRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/configurable-products/{sku}/options/all",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConfigurableProductOptionRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigurableProductOptionRepositoryV1GetListGetOK), nil

}

/*
ConfigurableProductOptionRepositoryV1SavePost Save option
*/
func (a *Client) ConfigurableProductOptionRepositoryV1SavePost(params *ConfigurableProductOptionRepositoryV1SavePostParams) (*ConfigurableProductOptionRepositoryV1SavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigurableProductOptionRepositoryV1SavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "configurableProductOptionRepositoryV1SavePost",
		Method:             "POST",
		PathPattern:        "/V1/configurable-products/{sku}/options",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConfigurableProductOptionRepositoryV1SavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigurableProductOptionRepositoryV1SavePostOK), nil

}

/*
ConfigurableProductOptionRepositoryV1SavePut Save option
*/
func (a *Client) ConfigurableProductOptionRepositoryV1SavePut(params *ConfigurableProductOptionRepositoryV1SavePutParams) (*ConfigurableProductOptionRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigurableProductOptionRepositoryV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "configurableProductOptionRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/configurable-products/{sku}/options/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConfigurableProductOptionRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigurableProductOptionRepositoryV1SavePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
