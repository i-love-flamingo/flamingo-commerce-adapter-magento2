// Code generated by go-swagger; DO NOT EDIT.

package catalog_category_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "flamingo.me/flamingo-commerce-adapter-magento2/magento2/infrastructure/swaggerclient/models"
)

// CatalogCategoryManagementV1MovePutReader is a Reader for the CatalogCategoryManagementV1MovePut structure.
type CatalogCategoryManagementV1MovePutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CatalogCategoryManagementV1MovePutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCatalogCategoryManagementV1MovePutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCatalogCategoryManagementV1MovePutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCatalogCategoryManagementV1MovePutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCatalogCategoryManagementV1MovePutInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCatalogCategoryManagementV1MovePutDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCatalogCategoryManagementV1MovePutOK creates a CatalogCategoryManagementV1MovePutOK with default headers values
func NewCatalogCategoryManagementV1MovePutOK() *CatalogCategoryManagementV1MovePutOK {
	return &CatalogCategoryManagementV1MovePutOK{}
}

/*CatalogCategoryManagementV1MovePutOK handles this case with default header values.

200 Success.
*/
type CatalogCategoryManagementV1MovePutOK struct {
	Payload bool
}

func (o *CatalogCategoryManagementV1MovePutOK) Error() string {
	return fmt.Sprintf("[PUT /V1/categories/{categoryId}/move][%d] catalogCategoryManagementV1MovePutOK  %+v", 200, o.Payload)
}

func (o *CatalogCategoryManagementV1MovePutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCategoryManagementV1MovePutBadRequest creates a CatalogCategoryManagementV1MovePutBadRequest with default headers values
func NewCatalogCategoryManagementV1MovePutBadRequest() *CatalogCategoryManagementV1MovePutBadRequest {
	return &CatalogCategoryManagementV1MovePutBadRequest{}
}

/*CatalogCategoryManagementV1MovePutBadRequest handles this case with default header values.

400 Bad Request
*/
type CatalogCategoryManagementV1MovePutBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *CatalogCategoryManagementV1MovePutBadRequest) Error() string {
	return fmt.Sprintf("[PUT /V1/categories/{categoryId}/move][%d] catalogCategoryManagementV1MovePutBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogCategoryManagementV1MovePutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCategoryManagementV1MovePutUnauthorized creates a CatalogCategoryManagementV1MovePutUnauthorized with default headers values
func NewCatalogCategoryManagementV1MovePutUnauthorized() *CatalogCategoryManagementV1MovePutUnauthorized {
	return &CatalogCategoryManagementV1MovePutUnauthorized{}
}

/*CatalogCategoryManagementV1MovePutUnauthorized handles this case with default header values.

401 Unauthorized
*/
type CatalogCategoryManagementV1MovePutUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *CatalogCategoryManagementV1MovePutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /V1/categories/{categoryId}/move][%d] catalogCategoryManagementV1MovePutUnauthorized  %+v", 401, o.Payload)
}

func (o *CatalogCategoryManagementV1MovePutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCategoryManagementV1MovePutInternalServerError creates a CatalogCategoryManagementV1MovePutInternalServerError with default headers values
func NewCatalogCategoryManagementV1MovePutInternalServerError() *CatalogCategoryManagementV1MovePutInternalServerError {
	return &CatalogCategoryManagementV1MovePutInternalServerError{}
}

/*CatalogCategoryManagementV1MovePutInternalServerError handles this case with default header values.

Internal Server error
*/
type CatalogCategoryManagementV1MovePutInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *CatalogCategoryManagementV1MovePutInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /V1/categories/{categoryId}/move][%d] catalogCategoryManagementV1MovePutInternalServerError  %+v", 500, o.Payload)
}

func (o *CatalogCategoryManagementV1MovePutInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCategoryManagementV1MovePutDefault creates a CatalogCategoryManagementV1MovePutDefault with default headers values
func NewCatalogCategoryManagementV1MovePutDefault(code int) *CatalogCategoryManagementV1MovePutDefault {
	return &CatalogCategoryManagementV1MovePutDefault{
		_statusCode: code,
	}
}

/*CatalogCategoryManagementV1MovePutDefault handles this case with default header values.

Unexpected error
*/
type CatalogCategoryManagementV1MovePutDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the catalog category management v1 move put default response
func (o *CatalogCategoryManagementV1MovePutDefault) Code() int {
	return o._statusCode
}

func (o *CatalogCategoryManagementV1MovePutDefault) Error() string {
	return fmt.Sprintf("[PUT /V1/categories/{categoryId}/move][%d] catalogCategoryManagementV1MovePut default  %+v", o._statusCode, o.Payload)
}

func (o *CatalogCategoryManagementV1MovePutDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CatalogCategoryManagementV1MovePutBody catalog category management v1 move put body
swagger:model CatalogCategoryManagementV1MovePutBody
*/
type CatalogCategoryManagementV1MovePutBody struct {

	// after Id
	AfterID int64 `json:"afterId,omitempty"`

	// parent Id
	// Required: true
	ParentID *int64 `json:"parentId"`
}

// Validate validates this catalog category management v1 move put body
func (o *CatalogCategoryManagementV1MovePutBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CatalogCategoryManagementV1MovePutBody) validateParentID(formats strfmt.Registry) error {

	if err := validate.Required("catalogCategoryManagementV1MovePutBody"+"."+"parentId", "body", o.ParentID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CatalogCategoryManagementV1MovePutBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogCategoryManagementV1MovePutBody) UnmarshalBinary(b []byte) error {
	var res CatalogCategoryManagementV1MovePutBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
