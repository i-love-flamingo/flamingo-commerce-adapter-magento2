// Code generated by go-swagger; DO NOT EDIT.

package catalog_category_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "flamingo.me/flamingo-commerce-adapter-magento2/magento2/infrastructure/swaggerclient/models"
)

// CatalogCategoryManagementV1GetTreeGetReader is a Reader for the CatalogCategoryManagementV1GetTreeGet structure.
type CatalogCategoryManagementV1GetTreeGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CatalogCategoryManagementV1GetTreeGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCatalogCategoryManagementV1GetTreeGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCatalogCategoryManagementV1GetTreeGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCatalogCategoryManagementV1GetTreeGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCatalogCategoryManagementV1GetTreeGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCatalogCategoryManagementV1GetTreeGetOK creates a CatalogCategoryManagementV1GetTreeGetOK with default headers values
func NewCatalogCategoryManagementV1GetTreeGetOK() *CatalogCategoryManagementV1GetTreeGetOK {
	return &CatalogCategoryManagementV1GetTreeGetOK{}
}

/*CatalogCategoryManagementV1GetTreeGetOK handles this case with default header values.

200 Success.
*/
type CatalogCategoryManagementV1GetTreeGetOK struct {
	Payload *models.CatalogDataCategoryTreeInterface
}

func (o *CatalogCategoryManagementV1GetTreeGetOK) Error() string {
	return fmt.Sprintf("[GET /V1/categories][%d] catalogCategoryManagementV1GetTreeGetOK  %+v", 200, o.Payload)
}

func (o *CatalogCategoryManagementV1GetTreeGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CatalogDataCategoryTreeInterface)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCategoryManagementV1GetTreeGetBadRequest creates a CatalogCategoryManagementV1GetTreeGetBadRequest with default headers values
func NewCatalogCategoryManagementV1GetTreeGetBadRequest() *CatalogCategoryManagementV1GetTreeGetBadRequest {
	return &CatalogCategoryManagementV1GetTreeGetBadRequest{}
}

/*CatalogCategoryManagementV1GetTreeGetBadRequest handles this case with default header values.

400 Bad Request
*/
type CatalogCategoryManagementV1GetTreeGetBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *CatalogCategoryManagementV1GetTreeGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /V1/categories][%d] catalogCategoryManagementV1GetTreeGetBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogCategoryManagementV1GetTreeGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCategoryManagementV1GetTreeGetUnauthorized creates a CatalogCategoryManagementV1GetTreeGetUnauthorized with default headers values
func NewCatalogCategoryManagementV1GetTreeGetUnauthorized() *CatalogCategoryManagementV1GetTreeGetUnauthorized {
	return &CatalogCategoryManagementV1GetTreeGetUnauthorized{}
}

/*CatalogCategoryManagementV1GetTreeGetUnauthorized handles this case with default header values.

401 Unauthorized
*/
type CatalogCategoryManagementV1GetTreeGetUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *CatalogCategoryManagementV1GetTreeGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /V1/categories][%d] catalogCategoryManagementV1GetTreeGetUnauthorized  %+v", 401, o.Payload)
}

func (o *CatalogCategoryManagementV1GetTreeGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCategoryManagementV1GetTreeGetDefault creates a CatalogCategoryManagementV1GetTreeGetDefault with default headers values
func NewCatalogCategoryManagementV1GetTreeGetDefault(code int) *CatalogCategoryManagementV1GetTreeGetDefault {
	return &CatalogCategoryManagementV1GetTreeGetDefault{
		_statusCode: code,
	}
}

/*CatalogCategoryManagementV1GetTreeGetDefault handles this case with default header values.

Unexpected error
*/
type CatalogCategoryManagementV1GetTreeGetDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the catalog category management v1 get tree get default response
func (o *CatalogCategoryManagementV1GetTreeGetDefault) Code() int {
	return o._statusCode
}

func (o *CatalogCategoryManagementV1GetTreeGetDefault) Error() string {
	return fmt.Sprintf("[GET /V1/categories][%d] catalogCategoryManagementV1GetTreeGet default  %+v", o._statusCode, o.Payload)
}

func (o *CatalogCategoryManagementV1GetTreeGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
