// Code generated by go-swagger; DO NOT EDIT.

package company_credit_credit_limit_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new company credit credit limit repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for company credit credit limit repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CompanyCreditCreditLimitRepositoryV1GetGet Returns data on the credit limit for a specified credit limit ID.
*/
func (a *Client) CompanyCreditCreditLimitRepositoryV1GetGet(params *CompanyCreditCreditLimitRepositoryV1GetGetParams) (*CompanyCreditCreditLimitRepositoryV1GetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyCreditCreditLimitRepositoryV1GetGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyCreditCreditLimitRepositoryV1GetGet",
		Method:             "GET",
		PathPattern:        "/V1/companyCredits/{creditId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyCreditCreditLimitRepositoryV1GetGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyCreditCreditLimitRepositoryV1GetGetOK), nil

}

/*
CompanyCreditCreditLimitRepositoryV1GetListGet Returns the list of credits for specified companies.
*/
func (a *Client) CompanyCreditCreditLimitRepositoryV1GetListGet(params *CompanyCreditCreditLimitRepositoryV1GetListGetParams) (*CompanyCreditCreditLimitRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyCreditCreditLimitRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyCreditCreditLimitRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/companyCredits/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyCreditCreditLimitRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyCreditCreditLimitRepositoryV1GetListGetOK), nil

}

/*
CompanyCreditCreditLimitRepositoryV1SavePut Update the following company credit attributes: credit currency, credit limit and setting to exceed credit.
*/
func (a *Client) CompanyCreditCreditLimitRepositoryV1SavePut(params *CompanyCreditCreditLimitRepositoryV1SavePutParams) (*CompanyCreditCreditLimitRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyCreditCreditLimitRepositoryV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyCreditCreditLimitRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/companyCredits/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyCreditCreditLimitRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyCreditCreditLimitRepositoryV1SavePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
