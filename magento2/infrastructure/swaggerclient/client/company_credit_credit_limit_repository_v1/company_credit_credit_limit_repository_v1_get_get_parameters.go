// Code generated by go-swagger; DO NOT EDIT.

package company_credit_credit_limit_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCompanyCreditCreditLimitRepositoryV1GetGetParams creates a new CompanyCreditCreditLimitRepositoryV1GetGetParams object
// with the default values initialized.
func NewCompanyCreditCreditLimitRepositoryV1GetGetParams() *CompanyCreditCreditLimitRepositoryV1GetGetParams {
	var ()
	return &CompanyCreditCreditLimitRepositoryV1GetGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCompanyCreditCreditLimitRepositoryV1GetGetParamsWithTimeout creates a new CompanyCreditCreditLimitRepositoryV1GetGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCompanyCreditCreditLimitRepositoryV1GetGetParamsWithTimeout(timeout time.Duration) *CompanyCreditCreditLimitRepositoryV1GetGetParams {
	var ()
	return &CompanyCreditCreditLimitRepositoryV1GetGetParams{

		timeout: timeout,
	}
}

// NewCompanyCreditCreditLimitRepositoryV1GetGetParamsWithContext creates a new CompanyCreditCreditLimitRepositoryV1GetGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewCompanyCreditCreditLimitRepositoryV1GetGetParamsWithContext(ctx context.Context) *CompanyCreditCreditLimitRepositoryV1GetGetParams {
	var ()
	return &CompanyCreditCreditLimitRepositoryV1GetGetParams{

		Context: ctx,
	}
}

// NewCompanyCreditCreditLimitRepositoryV1GetGetParamsWithHTTPClient creates a new CompanyCreditCreditLimitRepositoryV1GetGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCompanyCreditCreditLimitRepositoryV1GetGetParamsWithHTTPClient(client *http.Client) *CompanyCreditCreditLimitRepositoryV1GetGetParams {
	var ()
	return &CompanyCreditCreditLimitRepositoryV1GetGetParams{
		HTTPClient: client,
	}
}

/*CompanyCreditCreditLimitRepositoryV1GetGetParams contains all the parameters to send to the API endpoint
for the company credit credit limit repository v1 get get operation typically these are written to a http.Request
*/
type CompanyCreditCreditLimitRepositoryV1GetGetParams struct {

	/*CreditID*/
	CreditID int64
	/*Reload
	  [optional]

	*/
	Reload *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the company credit credit limit repository v1 get get params
func (o *CompanyCreditCreditLimitRepositoryV1GetGetParams) WithTimeout(timeout time.Duration) *CompanyCreditCreditLimitRepositoryV1GetGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the company credit credit limit repository v1 get get params
func (o *CompanyCreditCreditLimitRepositoryV1GetGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the company credit credit limit repository v1 get get params
func (o *CompanyCreditCreditLimitRepositoryV1GetGetParams) WithContext(ctx context.Context) *CompanyCreditCreditLimitRepositoryV1GetGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the company credit credit limit repository v1 get get params
func (o *CompanyCreditCreditLimitRepositoryV1GetGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the company credit credit limit repository v1 get get params
func (o *CompanyCreditCreditLimitRepositoryV1GetGetParams) WithHTTPClient(client *http.Client) *CompanyCreditCreditLimitRepositoryV1GetGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the company credit credit limit repository v1 get get params
func (o *CompanyCreditCreditLimitRepositoryV1GetGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreditID adds the creditID to the company credit credit limit repository v1 get get params
func (o *CompanyCreditCreditLimitRepositoryV1GetGetParams) WithCreditID(creditID int64) *CompanyCreditCreditLimitRepositoryV1GetGetParams {
	o.SetCreditID(creditID)
	return o
}

// SetCreditID adds the creditId to the company credit credit limit repository v1 get get params
func (o *CompanyCreditCreditLimitRepositoryV1GetGetParams) SetCreditID(creditID int64) {
	o.CreditID = creditID
}

// WithReload adds the reload to the company credit credit limit repository v1 get get params
func (o *CompanyCreditCreditLimitRepositoryV1GetGetParams) WithReload(reload *bool) *CompanyCreditCreditLimitRepositoryV1GetGetParams {
	o.SetReload(reload)
	return o
}

// SetReload adds the reload to the company credit credit limit repository v1 get get params
func (o *CompanyCreditCreditLimitRepositoryV1GetGetParams) SetReload(reload *bool) {
	o.Reload = reload
}

// WriteToRequest writes these params to a swagger request
func (o *CompanyCreditCreditLimitRepositoryV1GetGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param creditId
	if err := r.SetPathParam("creditId", swag.FormatInt64(o.CreditID)); err != nil {
		return err
	}

	if o.Reload != nil {

		// query param reload
		var qrReload bool
		if o.Reload != nil {
			qrReload = *o.Reload
		}
		qReload := swag.FormatBool(qrReload)
		if qReload != "" {
			if err := r.SetQueryParam("reload", qReload); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
