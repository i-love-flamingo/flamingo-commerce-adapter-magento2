// Code generated by go-swagger; DO NOT EDIT.

package company_credit_credit_limit_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCompanyCreditCreditLimitRepositoryV1SavePutParams creates a new CompanyCreditCreditLimitRepositoryV1SavePutParams object
// with the default values initialized.
func NewCompanyCreditCreditLimitRepositoryV1SavePutParams() *CompanyCreditCreditLimitRepositoryV1SavePutParams {
	var ()
	return &CompanyCreditCreditLimitRepositoryV1SavePutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCompanyCreditCreditLimitRepositoryV1SavePutParamsWithTimeout creates a new CompanyCreditCreditLimitRepositoryV1SavePutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCompanyCreditCreditLimitRepositoryV1SavePutParamsWithTimeout(timeout time.Duration) *CompanyCreditCreditLimitRepositoryV1SavePutParams {
	var ()
	return &CompanyCreditCreditLimitRepositoryV1SavePutParams{

		timeout: timeout,
	}
}

// NewCompanyCreditCreditLimitRepositoryV1SavePutParamsWithContext creates a new CompanyCreditCreditLimitRepositoryV1SavePutParams object
// with the default values initialized, and the ability to set a context for a request
func NewCompanyCreditCreditLimitRepositoryV1SavePutParamsWithContext(ctx context.Context) *CompanyCreditCreditLimitRepositoryV1SavePutParams {
	var ()
	return &CompanyCreditCreditLimitRepositoryV1SavePutParams{

		Context: ctx,
	}
}

// NewCompanyCreditCreditLimitRepositoryV1SavePutParamsWithHTTPClient creates a new CompanyCreditCreditLimitRepositoryV1SavePutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCompanyCreditCreditLimitRepositoryV1SavePutParamsWithHTTPClient(client *http.Client) *CompanyCreditCreditLimitRepositoryV1SavePutParams {
	var ()
	return &CompanyCreditCreditLimitRepositoryV1SavePutParams{
		HTTPClient: client,
	}
}

/*CompanyCreditCreditLimitRepositoryV1SavePutParams contains all the parameters to send to the API endpoint
for the company credit credit limit repository v1 save put operation typically these are written to a http.Request
*/
type CompanyCreditCreditLimitRepositoryV1SavePutParams struct {

	/*CompanyCreditCreditLimitRepositoryV1SavePutBody*/
	CompanyCreditCreditLimitRepositoryV1SavePutBody CompanyCreditCreditLimitRepositoryV1SavePutBody
	/*ID*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the company credit credit limit repository v1 save put params
func (o *CompanyCreditCreditLimitRepositoryV1SavePutParams) WithTimeout(timeout time.Duration) *CompanyCreditCreditLimitRepositoryV1SavePutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the company credit credit limit repository v1 save put params
func (o *CompanyCreditCreditLimitRepositoryV1SavePutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the company credit credit limit repository v1 save put params
func (o *CompanyCreditCreditLimitRepositoryV1SavePutParams) WithContext(ctx context.Context) *CompanyCreditCreditLimitRepositoryV1SavePutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the company credit credit limit repository v1 save put params
func (o *CompanyCreditCreditLimitRepositoryV1SavePutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the company credit credit limit repository v1 save put params
func (o *CompanyCreditCreditLimitRepositoryV1SavePutParams) WithHTTPClient(client *http.Client) *CompanyCreditCreditLimitRepositoryV1SavePutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the company credit credit limit repository v1 save put params
func (o *CompanyCreditCreditLimitRepositoryV1SavePutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCompanyCreditCreditLimitRepositoryV1SavePutBody adds the companyCreditCreditLimitRepositoryV1SavePutBody to the company credit credit limit repository v1 save put params
func (o *CompanyCreditCreditLimitRepositoryV1SavePutParams) WithCompanyCreditCreditLimitRepositoryV1SavePutBody(companyCreditCreditLimitRepositoryV1SavePutBody CompanyCreditCreditLimitRepositoryV1SavePutBody) *CompanyCreditCreditLimitRepositoryV1SavePutParams {
	o.SetCompanyCreditCreditLimitRepositoryV1SavePutBody(companyCreditCreditLimitRepositoryV1SavePutBody)
	return o
}

// SetCompanyCreditCreditLimitRepositoryV1SavePutBody adds the companyCreditCreditLimitRepositoryV1SavePutBody to the company credit credit limit repository v1 save put params
func (o *CompanyCreditCreditLimitRepositoryV1SavePutParams) SetCompanyCreditCreditLimitRepositoryV1SavePutBody(companyCreditCreditLimitRepositoryV1SavePutBody CompanyCreditCreditLimitRepositoryV1SavePutBody) {
	o.CompanyCreditCreditLimitRepositoryV1SavePutBody = companyCreditCreditLimitRepositoryV1SavePutBody
}

// WithID adds the id to the company credit credit limit repository v1 save put params
func (o *CompanyCreditCreditLimitRepositoryV1SavePutParams) WithID(id string) *CompanyCreditCreditLimitRepositoryV1SavePutParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the company credit credit limit repository v1 save put params
func (o *CompanyCreditCreditLimitRepositoryV1SavePutParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *CompanyCreditCreditLimitRepositoryV1SavePutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.CompanyCreditCreditLimitRepositoryV1SavePutBody); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
