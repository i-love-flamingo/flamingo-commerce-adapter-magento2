// Code generated by go-swagger; DO NOT EDIT.

package bundle_product_option_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new bundle product option management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bundle product option management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
BundleProductOptionManagementV1SavePost Add new option for bundle product
*/
func (a *Client) BundleProductOptionManagementV1SavePost(params *BundleProductOptionManagementV1SavePostParams) (*BundleProductOptionManagementV1SavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBundleProductOptionManagementV1SavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bundleProductOptionManagementV1SavePost",
		Method:             "POST",
		PathPattern:        "/V1/bundle-products/options/add",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BundleProductOptionManagementV1SavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BundleProductOptionManagementV1SavePostOK), nil

}

/*
BundleProductOptionManagementV1SavePut Add new option for bundle product
*/
func (a *Client) BundleProductOptionManagementV1SavePut(params *BundleProductOptionManagementV1SavePutParams) (*BundleProductOptionManagementV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBundleProductOptionManagementV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bundleProductOptionManagementV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/bundle-products/options/{optionId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BundleProductOptionManagementV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BundleProductOptionManagementV1SavePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
