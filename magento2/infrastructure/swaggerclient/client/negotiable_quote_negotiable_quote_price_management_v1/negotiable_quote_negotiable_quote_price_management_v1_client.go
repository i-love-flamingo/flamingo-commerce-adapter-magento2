// Code generated by go-swagger; DO NOT EDIT.

package negotiable_quote_negotiable_quote_price_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new negotiable quote negotiable quote price management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for negotiable quote negotiable quote price management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPost Refreshes item prices, taxes, discounts, cart rules in the negotiable quote as per the latest changes in the catalog / shared catalog and in the price rules. Depending on the negotiable quote state and totals, all or just some of quote numbers will be recalculated. 'Update Prices' parameter forces refresh on any quote that is not locked for admin user, including the quotes with a negotiated price. The request can be applied to one or more quotes at the same time.
*/
func (a *Client) NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPost(params *NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostParams) (*NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "negotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPost",
		Method:             "POST",
		PathPattern:        "/V1/negotiableQuote/pricesUpdated",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NegotiableQuoteNegotiableQuotePriceManagementV1PricesUpdatedPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
