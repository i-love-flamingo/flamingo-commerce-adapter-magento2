// Code generated by go-swagger; DO NOT EDIT.

package downloadable_sample_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new downloadable sample repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for downloadable sample repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DownloadableSampleRepositoryV1DeleteDelete Delete downloadable sample
*/
func (a *Client) DownloadableSampleRepositoryV1DeleteDelete(params *DownloadableSampleRepositoryV1DeleteDeleteParams) (*DownloadableSampleRepositoryV1DeleteDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadableSampleRepositoryV1DeleteDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadableSampleRepositoryV1DeleteDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/products/downloadable-links/samples/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadableSampleRepositoryV1DeleteDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DownloadableSampleRepositoryV1DeleteDeleteOK), nil

}

/*
DownloadableSampleRepositoryV1GetListGet List of samples for downloadable product
*/
func (a *Client) DownloadableSampleRepositoryV1GetListGet(params *DownloadableSampleRepositoryV1GetListGetParams) (*DownloadableSampleRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadableSampleRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadableSampleRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/products/{sku}/downloadable-links/samples",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadableSampleRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DownloadableSampleRepositoryV1GetListGetOK), nil

}

/*
DownloadableSampleRepositoryV1SavePost Update downloadable sample of the given product
*/
func (a *Client) DownloadableSampleRepositoryV1SavePost(params *DownloadableSampleRepositoryV1SavePostParams) (*DownloadableSampleRepositoryV1SavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadableSampleRepositoryV1SavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadableSampleRepositoryV1SavePost",
		Method:             "POST",
		PathPattern:        "/V1/products/{sku}/downloadable-links/samples",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadableSampleRepositoryV1SavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DownloadableSampleRepositoryV1SavePostOK), nil

}

/*
DownloadableSampleRepositoryV1SavePut Update downloadable sample of the given product
*/
func (a *Client) DownloadableSampleRepositoryV1SavePut(params *DownloadableSampleRepositoryV1SavePutParams) (*DownloadableSampleRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadableSampleRepositoryV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadableSampleRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/products/{sku}/downloadable-links/samples/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadableSampleRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DownloadableSampleRepositoryV1SavePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
