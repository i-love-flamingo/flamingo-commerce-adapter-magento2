// Code generated by go-swagger; DO NOT EDIT.

package quote_cart_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new quote cart repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for quote cart repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
QuoteCartRepositoryV1GetGet Enables an administrative user to return information for a specified cart.
*/
func (a *Client) QuoteCartRepositoryV1GetGet(params *QuoteCartRepositoryV1GetGetParams) (*QuoteCartRepositoryV1GetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartRepositoryV1GetGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartRepositoryV1GetGet",
		Method:             "GET",
		PathPattern:        "/V1/carts/{cartId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartRepositoryV1GetGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartRepositoryV1GetGetOK), nil

}

/*
QuoteCartRepositoryV1GetListGet Enables administrative users to list carts that match specified search criteria. This call returns an array of objects, but detailed information about each objectâ€™s attributes might not be included.  See http://devdocs.magento.com/codelinks/attributes.html#CartRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
*/
func (a *Client) QuoteCartRepositoryV1GetListGet(params *QuoteCartRepositoryV1GetListGetParams) (*QuoteCartRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/carts/search",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartRepositoryV1GetListGetOK), nil

}

/*
QuoteCartRepositoryV1SavePut Save quote
*/
func (a *Client) QuoteCartRepositoryV1SavePut(params *QuoteCartRepositoryV1SavePutParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartRepositoryV1SavePutParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/carts/mine",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
