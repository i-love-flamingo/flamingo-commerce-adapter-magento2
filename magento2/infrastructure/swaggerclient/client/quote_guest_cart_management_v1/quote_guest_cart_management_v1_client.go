// Code generated by go-swagger; DO NOT EDIT.

package quote_guest_cart_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new quote guest cart management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for quote guest cart management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
QuoteGuestCartManagementV1AssignCustomerPut Assign a specified customer to a specified shopping cart.
*/
func (a *Client) QuoteGuestCartManagementV1AssignCustomerPut(params *QuoteGuestCartManagementV1AssignCustomerPutParams) (*QuoteGuestCartManagementV1AssignCustomerPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteGuestCartManagementV1AssignCustomerPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteGuestCartManagementV1AssignCustomerPut",
		Method:             "PUT",
		PathPattern:        "/V1/guest-carts/{cartId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteGuestCartManagementV1AssignCustomerPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteGuestCartManagementV1AssignCustomerPutOK), nil

}

/*
QuoteGuestCartManagementV1CreateEmptyCartPost Enable an customer or guest user to create an empty cart and quote for an anonymous customer.
*/
func (a *Client) QuoteGuestCartManagementV1CreateEmptyCartPost(params *QuoteGuestCartManagementV1CreateEmptyCartPostParams) (*QuoteGuestCartManagementV1CreateEmptyCartPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteGuestCartManagementV1CreateEmptyCartPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteGuestCartManagementV1CreateEmptyCartPost",
		Method:             "POST",
		PathPattern:        "/V1/guest-carts",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteGuestCartManagementV1CreateEmptyCartPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteGuestCartManagementV1CreateEmptyCartPostOK), nil

}

/*
QuoteGuestCartManagementV1PlaceOrderPut Place an order for a specified cart.
*/
func (a *Client) QuoteGuestCartManagementV1PlaceOrderPut(params *QuoteGuestCartManagementV1PlaceOrderPutParams) (*QuoteGuestCartManagementV1PlaceOrderPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteGuestCartManagementV1PlaceOrderPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteGuestCartManagementV1PlaceOrderPut",
		Method:             "PUT",
		PathPattern:        "/V1/guest-carts/{cartId}/order",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteGuestCartManagementV1PlaceOrderPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteGuestCartManagementV1PlaceOrderPutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
