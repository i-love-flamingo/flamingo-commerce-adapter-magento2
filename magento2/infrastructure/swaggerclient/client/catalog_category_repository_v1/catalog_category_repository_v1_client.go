// Code generated by go-swagger; DO NOT EDIT.

package catalog_category_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new catalog category repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog category repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CatalogCategoryRepositoryV1DeleteByIdentifierDelete Delete category by identifier
*/
func (a *Client) CatalogCategoryRepositoryV1DeleteByIdentifierDelete(params *CatalogCategoryRepositoryV1DeleteByIdentifierDeleteParams) (*CatalogCategoryRepositoryV1DeleteByIdentifierDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogCategoryRepositoryV1DeleteByIdentifierDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogCategoryRepositoryV1DeleteByIdentifierDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/categories/{categoryId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogCategoryRepositoryV1DeleteByIdentifierDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogCategoryRepositoryV1DeleteByIdentifierDeleteOK), nil

}

/*
CatalogCategoryRepositoryV1GetGet Get info about category by category id
*/
func (a *Client) CatalogCategoryRepositoryV1GetGet(params *CatalogCategoryRepositoryV1GetGetParams) (*CatalogCategoryRepositoryV1GetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogCategoryRepositoryV1GetGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogCategoryRepositoryV1GetGet",
		Method:             "GET",
		PathPattern:        "/V1/categories/{categoryId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogCategoryRepositoryV1GetGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogCategoryRepositoryV1GetGetOK), nil

}

/*
CatalogCategoryRepositoryV1SavePost Create category service
*/
func (a *Client) CatalogCategoryRepositoryV1SavePost(params *CatalogCategoryRepositoryV1SavePostParams) (*CatalogCategoryRepositoryV1SavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogCategoryRepositoryV1SavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogCategoryRepositoryV1SavePost",
		Method:             "POST",
		PathPattern:        "/V1/categories",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogCategoryRepositoryV1SavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogCategoryRepositoryV1SavePostOK), nil

}

/*
CatalogCategoryRepositoryV1SavePut Create category service
*/
func (a *Client) CatalogCategoryRepositoryV1SavePut(params *CatalogCategoryRepositoryV1SavePutParams) (*CatalogCategoryRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogCategoryRepositoryV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogCategoryRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/categories/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogCategoryRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogCategoryRepositoryV1SavePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
