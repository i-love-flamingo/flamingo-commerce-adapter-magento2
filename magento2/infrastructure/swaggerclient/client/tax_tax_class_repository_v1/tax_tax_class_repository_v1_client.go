// Code generated by go-swagger; DO NOT EDIT.

package tax_tax_class_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new tax tax class repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tax tax class repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
TaxTaxClassRepositoryV1DeleteByIDDelete Delete a tax class with the given tax class id.
*/
func (a *Client) TaxTaxClassRepositoryV1DeleteByIDDelete(params *TaxTaxClassRepositoryV1DeleteByIDDeleteParams) (*TaxTaxClassRepositoryV1DeleteByIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaxTaxClassRepositoryV1DeleteByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "taxTaxClassRepositoryV1DeleteByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/taxClasses/{taxClassId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TaxTaxClassRepositoryV1DeleteByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TaxTaxClassRepositoryV1DeleteByIDDeleteOK), nil

}

/*
TaxTaxClassRepositoryV1GetGet Get a tax class with the given tax class id.
*/
func (a *Client) TaxTaxClassRepositoryV1GetGet(params *TaxTaxClassRepositoryV1GetGetParams) (*TaxTaxClassRepositoryV1GetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaxTaxClassRepositoryV1GetGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "taxTaxClassRepositoryV1GetGet",
		Method:             "GET",
		PathPattern:        "/V1/taxClasses/{taxClassId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TaxTaxClassRepositoryV1GetGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TaxTaxClassRepositoryV1GetGetOK), nil

}

/*
TaxTaxClassRepositoryV1GetListGet Retrieve tax classes which match a specific criteria. This call returns an array of objects, but detailed information about each objectâ€™s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#TaxClassRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
*/
func (a *Client) TaxTaxClassRepositoryV1GetListGet(params *TaxTaxClassRepositoryV1GetListGetParams) (*TaxTaxClassRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaxTaxClassRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "taxTaxClassRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/taxClasses/search",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TaxTaxClassRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TaxTaxClassRepositoryV1GetListGetOK), nil

}

/*
TaxTaxClassRepositoryV1SavePost Create a Tax Class
*/
func (a *Client) TaxTaxClassRepositoryV1SavePost(params *TaxTaxClassRepositoryV1SavePostParams) (*TaxTaxClassRepositoryV1SavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaxTaxClassRepositoryV1SavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "taxTaxClassRepositoryV1SavePost",
		Method:             "POST",
		PathPattern:        "/V1/taxClasses",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TaxTaxClassRepositoryV1SavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TaxTaxClassRepositoryV1SavePostOK), nil

}

/*
TaxTaxClassRepositoryV1SavePut Create a Tax Class
*/
func (a *Client) TaxTaxClassRepositoryV1SavePut(params *TaxTaxClassRepositoryV1SavePutParams) (*TaxTaxClassRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaxTaxClassRepositoryV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "taxTaxClassRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/taxClasses/{classId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TaxTaxClassRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TaxTaxClassRepositoryV1SavePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
