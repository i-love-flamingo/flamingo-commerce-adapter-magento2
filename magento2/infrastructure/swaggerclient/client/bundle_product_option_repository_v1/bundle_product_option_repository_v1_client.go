// Code generated by go-swagger; DO NOT EDIT.

package bundle_product_option_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new bundle product option repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bundle product option repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
BundleProductOptionRepositoryV1DeleteByIDDelete Remove bundle option
*/
func (a *Client) BundleProductOptionRepositoryV1DeleteByIDDelete(params *BundleProductOptionRepositoryV1DeleteByIDDeleteParams) (*BundleProductOptionRepositoryV1DeleteByIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBundleProductOptionRepositoryV1DeleteByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bundleProductOptionRepositoryV1DeleteByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/bundle-products/{sku}/options/{optionId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BundleProductOptionRepositoryV1DeleteByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BundleProductOptionRepositoryV1DeleteByIDDeleteOK), nil

}

/*
BundleProductOptionRepositoryV1GetGet Get option for bundle product
*/
func (a *Client) BundleProductOptionRepositoryV1GetGet(params *BundleProductOptionRepositoryV1GetGetParams) (*BundleProductOptionRepositoryV1GetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBundleProductOptionRepositoryV1GetGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bundleProductOptionRepositoryV1GetGet",
		Method:             "GET",
		PathPattern:        "/V1/bundle-products/{sku}/options/{optionId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BundleProductOptionRepositoryV1GetGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BundleProductOptionRepositoryV1GetGetOK), nil

}

/*
BundleProductOptionRepositoryV1GetListGet Get all options for bundle product
*/
func (a *Client) BundleProductOptionRepositoryV1GetListGet(params *BundleProductOptionRepositoryV1GetListGetParams) (*BundleProductOptionRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBundleProductOptionRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bundleProductOptionRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/bundle-products/{sku}/options/all",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BundleProductOptionRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BundleProductOptionRepositoryV1GetListGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
