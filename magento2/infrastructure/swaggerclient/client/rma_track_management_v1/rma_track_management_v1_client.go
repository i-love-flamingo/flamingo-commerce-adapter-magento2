// Code generated by go-swagger; DO NOT EDIT.

package rma_track_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new rma track management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rma track management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
RmaTrackManagementV1AddTrackPost Add track
*/
func (a *Client) RmaTrackManagementV1AddTrackPost(params *RmaTrackManagementV1AddTrackPostParams) (*RmaTrackManagementV1AddTrackPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRmaTrackManagementV1AddTrackPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rmaTrackManagementV1AddTrackPost",
		Method:             "POST",
		PathPattern:        "/V1/returns/{id}/tracking-numbers",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RmaTrackManagementV1AddTrackPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RmaTrackManagementV1AddTrackPostOK), nil

}

/*
RmaTrackManagementV1GetShippingLabelPdfGet Get shipping label int the PDF format
*/
func (a *Client) RmaTrackManagementV1GetShippingLabelPdfGet(params *RmaTrackManagementV1GetShippingLabelPdfGetParams) (*RmaTrackManagementV1GetShippingLabelPdfGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRmaTrackManagementV1GetShippingLabelPdfGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rmaTrackManagementV1GetShippingLabelPdfGet",
		Method:             "GET",
		PathPattern:        "/V1/returns/{id}/labels",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RmaTrackManagementV1GetShippingLabelPdfGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RmaTrackManagementV1GetShippingLabelPdfGetOK), nil

}

/*
RmaTrackManagementV1GetTracksGet Get track list
*/
func (a *Client) RmaTrackManagementV1GetTracksGet(params *RmaTrackManagementV1GetTracksGetParams) (*RmaTrackManagementV1GetTracksGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRmaTrackManagementV1GetTracksGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rmaTrackManagementV1GetTracksGet",
		Method:             "GET",
		PathPattern:        "/V1/returns/{id}/tracking-numbers",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RmaTrackManagementV1GetTracksGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RmaTrackManagementV1GetTracksGetOK), nil

}

/*
RmaTrackManagementV1RemoveTrackByIDDelete Remove track by id
*/
func (a *Client) RmaTrackManagementV1RemoveTrackByIDDelete(params *RmaTrackManagementV1RemoveTrackByIDDeleteParams) (*RmaTrackManagementV1RemoveTrackByIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRmaTrackManagementV1RemoveTrackByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rmaTrackManagementV1RemoveTrackByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/returns/{id}/tracking-numbers/{trackId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RmaTrackManagementV1RemoveTrackByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RmaTrackManagementV1RemoveTrackByIDDeleteOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
