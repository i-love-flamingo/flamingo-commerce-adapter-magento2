// Code generated by go-swagger; DO NOT EDIT.

package sales_order_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new sales order management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sales order management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SalesOrderManagementV1AddCommentPost Adds a comment to a specified order.
*/
func (a *Client) SalesOrderManagementV1AddCommentPost(params *SalesOrderManagementV1AddCommentPostParams) (*SalesOrderManagementV1AddCommentPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesOrderManagementV1AddCommentPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "salesOrderManagementV1AddCommentPost",
		Method:             "POST",
		PathPattern:        "/V1/orders/{id}/comments",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SalesOrderManagementV1AddCommentPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SalesOrderManagementV1AddCommentPostOK), nil

}

/*
SalesOrderManagementV1CancelPost Cancels a specified order.
*/
func (a *Client) SalesOrderManagementV1CancelPost(params *SalesOrderManagementV1CancelPostParams) (*SalesOrderManagementV1CancelPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesOrderManagementV1CancelPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "salesOrderManagementV1CancelPost",
		Method:             "POST",
		PathPattern:        "/V1/orders/{id}/cancel",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SalesOrderManagementV1CancelPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SalesOrderManagementV1CancelPostOK), nil

}

/*
SalesOrderManagementV1GetCommentsListGet Lists comments for a specified order.
*/
func (a *Client) SalesOrderManagementV1GetCommentsListGet(params *SalesOrderManagementV1GetCommentsListGetParams) (*SalesOrderManagementV1GetCommentsListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesOrderManagementV1GetCommentsListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "salesOrderManagementV1GetCommentsListGet",
		Method:             "GET",
		PathPattern:        "/V1/orders/{id}/comments",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SalesOrderManagementV1GetCommentsListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SalesOrderManagementV1GetCommentsListGetOK), nil

}

/*
SalesOrderManagementV1GetStatusGet Gets the status for a specified order.
*/
func (a *Client) SalesOrderManagementV1GetStatusGet(params *SalesOrderManagementV1GetStatusGetParams) (*SalesOrderManagementV1GetStatusGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesOrderManagementV1GetStatusGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "salesOrderManagementV1GetStatusGet",
		Method:             "GET",
		PathPattern:        "/V1/orders/{id}/statuses",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SalesOrderManagementV1GetStatusGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SalesOrderManagementV1GetStatusGetOK), nil

}

/*
SalesOrderManagementV1HoldPost Holds a specified order.
*/
func (a *Client) SalesOrderManagementV1HoldPost(params *SalesOrderManagementV1HoldPostParams) (*SalesOrderManagementV1HoldPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesOrderManagementV1HoldPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "salesOrderManagementV1HoldPost",
		Method:             "POST",
		PathPattern:        "/V1/orders/{id}/hold",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SalesOrderManagementV1HoldPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SalesOrderManagementV1HoldPostOK), nil

}

/*
SalesOrderManagementV1NotifyPost Emails a user a specified order.
*/
func (a *Client) SalesOrderManagementV1NotifyPost(params *SalesOrderManagementV1NotifyPostParams) (*SalesOrderManagementV1NotifyPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesOrderManagementV1NotifyPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "salesOrderManagementV1NotifyPost",
		Method:             "POST",
		PathPattern:        "/V1/orders/{id}/emails",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SalesOrderManagementV1NotifyPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SalesOrderManagementV1NotifyPostOK), nil

}

/*
SalesOrderManagementV1UnHoldPost Releases a specified order from hold status.
*/
func (a *Client) SalesOrderManagementV1UnHoldPost(params *SalesOrderManagementV1UnHoldPostParams) (*SalesOrderManagementV1UnHoldPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesOrderManagementV1UnHoldPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "salesOrderManagementV1UnHoldPost",
		Method:             "POST",
		PathPattern:        "/V1/orders/{id}/unhold",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SalesOrderManagementV1UnHoldPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SalesOrderManagementV1UnHoldPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
