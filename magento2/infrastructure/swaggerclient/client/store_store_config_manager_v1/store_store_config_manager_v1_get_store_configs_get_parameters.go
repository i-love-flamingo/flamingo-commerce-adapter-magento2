// Code generated by go-swagger; DO NOT EDIT.

package store_store_config_manager_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStoreStoreConfigManagerV1GetStoreConfigsGetParams creates a new StoreStoreConfigManagerV1GetStoreConfigsGetParams object
// with the default values initialized.
func NewStoreStoreConfigManagerV1GetStoreConfigsGetParams() *StoreStoreConfigManagerV1GetStoreConfigsGetParams {
	var ()
	return &StoreStoreConfigManagerV1GetStoreConfigsGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStoreStoreConfigManagerV1GetStoreConfigsGetParamsWithTimeout creates a new StoreStoreConfigManagerV1GetStoreConfigsGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStoreStoreConfigManagerV1GetStoreConfigsGetParamsWithTimeout(timeout time.Duration) *StoreStoreConfigManagerV1GetStoreConfigsGetParams {
	var ()
	return &StoreStoreConfigManagerV1GetStoreConfigsGetParams{

		timeout: timeout,
	}
}

// NewStoreStoreConfigManagerV1GetStoreConfigsGetParamsWithContext creates a new StoreStoreConfigManagerV1GetStoreConfigsGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewStoreStoreConfigManagerV1GetStoreConfigsGetParamsWithContext(ctx context.Context) *StoreStoreConfigManagerV1GetStoreConfigsGetParams {
	var ()
	return &StoreStoreConfigManagerV1GetStoreConfigsGetParams{

		Context: ctx,
	}
}

// NewStoreStoreConfigManagerV1GetStoreConfigsGetParamsWithHTTPClient creates a new StoreStoreConfigManagerV1GetStoreConfigsGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStoreStoreConfigManagerV1GetStoreConfigsGetParamsWithHTTPClient(client *http.Client) *StoreStoreConfigManagerV1GetStoreConfigsGetParams {
	var ()
	return &StoreStoreConfigManagerV1GetStoreConfigsGetParams{
		HTTPClient: client,
	}
}

/*StoreStoreConfigManagerV1GetStoreConfigsGetParams contains all the parameters to send to the API endpoint
for the store store config manager v1 get store configs get operation typically these are written to a http.Request
*/
type StoreStoreConfigManagerV1GetStoreConfigsGetParams struct {

	/*StoreCodes*/
	StoreCodes []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the store store config manager v1 get store configs get params
func (o *StoreStoreConfigManagerV1GetStoreConfigsGetParams) WithTimeout(timeout time.Duration) *StoreStoreConfigManagerV1GetStoreConfigsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the store store config manager v1 get store configs get params
func (o *StoreStoreConfigManagerV1GetStoreConfigsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the store store config manager v1 get store configs get params
func (o *StoreStoreConfigManagerV1GetStoreConfigsGetParams) WithContext(ctx context.Context) *StoreStoreConfigManagerV1GetStoreConfigsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the store store config manager v1 get store configs get params
func (o *StoreStoreConfigManagerV1GetStoreConfigsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the store store config manager v1 get store configs get params
func (o *StoreStoreConfigManagerV1GetStoreConfigsGetParams) WithHTTPClient(client *http.Client) *StoreStoreConfigManagerV1GetStoreConfigsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the store store config manager v1 get store configs get params
func (o *StoreStoreConfigManagerV1GetStoreConfigsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithStoreCodes adds the storeCodes to the store store config manager v1 get store configs get params
func (o *StoreStoreConfigManagerV1GetStoreConfigsGetParams) WithStoreCodes(storeCodes []string) *StoreStoreConfigManagerV1GetStoreConfigsGetParams {
	o.SetStoreCodes(storeCodes)
	return o
}

// SetStoreCodes adds the storeCodes to the store store config manager v1 get store configs get params
func (o *StoreStoreConfigManagerV1GetStoreConfigsGetParams) SetStoreCodes(storeCodes []string) {
	o.StoreCodes = storeCodes
}

// WriteToRequest writes these params to a swagger request
func (o *StoreStoreConfigManagerV1GetStoreConfigsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesStoreCodes := o.StoreCodes

	joinedStoreCodes := swag.JoinByFormat(valuesStoreCodes, "")
	// query array param storeCodes
	if err := r.SetQueryParam("storeCodes", joinedStoreCodes...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
