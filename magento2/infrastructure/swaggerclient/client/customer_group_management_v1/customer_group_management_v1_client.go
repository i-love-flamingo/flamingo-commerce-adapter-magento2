// Code generated by go-swagger; DO NOT EDIT.

package customer_group_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new customer group management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer group management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CustomerGroupManagementV1GetDefaultGroupGet Get default customer group.
*/
func (a *Client) CustomerGroupManagementV1GetDefaultGroupGet(params *CustomerGroupManagementV1GetDefaultGroupGetParams) (*CustomerGroupManagementV1GetDefaultGroupGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGroupManagementV1GetDefaultGroupGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerGroupManagementV1GetDefaultGroupGet",
		Method:             "GET",
		PathPattern:        "/V1/customerGroups/default",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerGroupManagementV1GetDefaultGroupGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomerGroupManagementV1GetDefaultGroupGetOK), nil

}

/*
CustomerGroupManagementV1GetDefaultGroupGetStore Get default customer group.
*/
func (a *Client) CustomerGroupManagementV1GetDefaultGroupGetStore(params *CustomerGroupManagementV1GetDefaultGroupGetStoreParams) (*CustomerGroupManagementV1GetDefaultGroupGetStoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGroupManagementV1GetDefaultGroupGetStoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerGroupManagementV1GetDefaultGroupGetStore",
		Method:             "GET",
		PathPattern:        "/V1/customerGroups/default/{storeId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerGroupManagementV1GetDefaultGroupGetStoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomerGroupManagementV1GetDefaultGroupGetStoreOK), nil

}

/*
CustomerGroupManagementV1IsReadonlyGet Check if customer group can be deleted.
*/
func (a *Client) CustomerGroupManagementV1IsReadonlyGet(params *CustomerGroupManagementV1IsReadonlyGetParams) (*CustomerGroupManagementV1IsReadonlyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGroupManagementV1IsReadonlyGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerGroupManagementV1IsReadonlyGet",
		Method:             "GET",
		PathPattern:        "/V1/customerGroups/{id}/permissions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerGroupManagementV1IsReadonlyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomerGroupManagementV1IsReadonlyGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
