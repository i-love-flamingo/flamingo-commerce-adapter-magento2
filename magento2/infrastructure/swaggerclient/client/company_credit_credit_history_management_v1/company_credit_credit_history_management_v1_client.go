// Code generated by go-swagger; DO NOT EDIT.

package company_credit_credit_history_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new company credit credit history management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for company credit credit history management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CompanyCreditCreditHistoryManagementV1GetListGet Returns the credit history for one or more companies.
*/
func (a *Client) CompanyCreditCreditHistoryManagementV1GetListGet(params *CompanyCreditCreditHistoryManagementV1GetListGetParams) (*CompanyCreditCreditHistoryManagementV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyCreditCreditHistoryManagementV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyCreditCreditHistoryManagementV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/companyCredits/history",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyCreditCreditHistoryManagementV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyCreditCreditHistoryManagementV1GetListGetOK), nil

}

/*
CompanyCreditCreditHistoryManagementV1UpdatePut Update the PO Number and/or comment for a Reimburse transaction.
*/
func (a *Client) CompanyCreditCreditHistoryManagementV1UpdatePut(params *CompanyCreditCreditHistoryManagementV1UpdatePutParams) (*CompanyCreditCreditHistoryManagementV1UpdatePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyCreditCreditHistoryManagementV1UpdatePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyCreditCreditHistoryManagementV1UpdatePut",
		Method:             "PUT",
		PathPattern:        "/V1/companyCredits/history/{historyId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyCreditCreditHistoryManagementV1UpdatePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyCreditCreditHistoryManagementV1UpdatePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
