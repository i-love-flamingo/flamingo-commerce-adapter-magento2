// Code generated by go-swagger; DO NOT EDIT.

package catalog_base_price_storage_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new catalog base price storage v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog base price storage v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CatalogBasePriceStorageV1GetPost Return product prices. In case of at least one of skus is not found exception will be thrown.
*/
func (a *Client) CatalogBasePriceStorageV1GetPost(params *CatalogBasePriceStorageV1GetPostParams) (*CatalogBasePriceStorageV1GetPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogBasePriceStorageV1GetPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogBasePriceStorageV1GetPost",
		Method:             "POST",
		PathPattern:        "/V1/products/base-prices-information",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogBasePriceStorageV1GetPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogBasePriceStorageV1GetPostOK), nil

}

/*
CatalogBasePriceStorageV1UpdatePost Add or update product prices. Input item should correspond \Magento\Catalog\Api\Data\CostInterface. If any items will have invalid price, store id or sku, they will be marked as failed and excluded from update list and \Magento\Catalog\Api\Data\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
*/
func (a *Client) CatalogBasePriceStorageV1UpdatePost(params *CatalogBasePriceStorageV1UpdatePostParams) (*CatalogBasePriceStorageV1UpdatePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogBasePriceStorageV1UpdatePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogBasePriceStorageV1UpdatePost",
		Method:             "POST",
		PathPattern:        "/V1/products/base-prices",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogBasePriceStorageV1UpdatePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogBasePriceStorageV1UpdatePostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
