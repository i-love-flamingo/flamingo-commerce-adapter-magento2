// Code generated by go-swagger; DO NOT EDIT.

package quote_cart_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "flamingo.me/flamingo-commerce-adapter-magento2/magento2/infrastructure/swaggerclient/models"
)

// QuoteCartManagementV1GetCartForCustomerGetReader is a Reader for the QuoteCartManagementV1GetCartForCustomerGet structure.
type QuoteCartManagementV1GetCartForCustomerGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QuoteCartManagementV1GetCartForCustomerGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewQuoteCartManagementV1GetCartForCustomerGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewQuoteCartManagementV1GetCartForCustomerGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewQuoteCartManagementV1GetCartForCustomerGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewQuoteCartManagementV1GetCartForCustomerGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewQuoteCartManagementV1GetCartForCustomerGetOK creates a QuoteCartManagementV1GetCartForCustomerGetOK with default headers values
func NewQuoteCartManagementV1GetCartForCustomerGetOK() *QuoteCartManagementV1GetCartForCustomerGetOK {
	return &QuoteCartManagementV1GetCartForCustomerGetOK{}
}

/*QuoteCartManagementV1GetCartForCustomerGetOK handles this case with default header values.

200 Success.
*/
type QuoteCartManagementV1GetCartForCustomerGetOK struct {
	Payload *models.QuoteDataCartInterface
}

func (o *QuoteCartManagementV1GetCartForCustomerGetOK) Error() string {
	return fmt.Sprintf("[GET /V1/carts/mine][%d] quoteCartManagementV1GetCartForCustomerGetOK  %+v", 200, o.Payload)
}

func (o *QuoteCartManagementV1GetCartForCustomerGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.QuoteDataCartInterface)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQuoteCartManagementV1GetCartForCustomerGetBadRequest creates a QuoteCartManagementV1GetCartForCustomerGetBadRequest with default headers values
func NewQuoteCartManagementV1GetCartForCustomerGetBadRequest() *QuoteCartManagementV1GetCartForCustomerGetBadRequest {
	return &QuoteCartManagementV1GetCartForCustomerGetBadRequest{}
}

/*QuoteCartManagementV1GetCartForCustomerGetBadRequest handles this case with default header values.

400 Bad Request
*/
type QuoteCartManagementV1GetCartForCustomerGetBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *QuoteCartManagementV1GetCartForCustomerGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /V1/carts/mine][%d] quoteCartManagementV1GetCartForCustomerGetBadRequest  %+v", 400, o.Payload)
}

func (o *QuoteCartManagementV1GetCartForCustomerGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQuoteCartManagementV1GetCartForCustomerGetUnauthorized creates a QuoteCartManagementV1GetCartForCustomerGetUnauthorized with default headers values
func NewQuoteCartManagementV1GetCartForCustomerGetUnauthorized() *QuoteCartManagementV1GetCartForCustomerGetUnauthorized {
	return &QuoteCartManagementV1GetCartForCustomerGetUnauthorized{}
}

/*QuoteCartManagementV1GetCartForCustomerGetUnauthorized handles this case with default header values.

401 Unauthorized
*/
type QuoteCartManagementV1GetCartForCustomerGetUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *QuoteCartManagementV1GetCartForCustomerGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /V1/carts/mine][%d] quoteCartManagementV1GetCartForCustomerGetUnauthorized  %+v", 401, o.Payload)
}

func (o *QuoteCartManagementV1GetCartForCustomerGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQuoteCartManagementV1GetCartForCustomerGetDefault creates a QuoteCartManagementV1GetCartForCustomerGetDefault with default headers values
func NewQuoteCartManagementV1GetCartForCustomerGetDefault(code int) *QuoteCartManagementV1GetCartForCustomerGetDefault {
	return &QuoteCartManagementV1GetCartForCustomerGetDefault{
		_statusCode: code,
	}
}

/*QuoteCartManagementV1GetCartForCustomerGetDefault handles this case with default header values.

Unexpected error
*/
type QuoteCartManagementV1GetCartForCustomerGetDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the quote cart management v1 get cart for customer get default response
func (o *QuoteCartManagementV1GetCartForCustomerGetDefault) Code() int {
	return o._statusCode
}

func (o *QuoteCartManagementV1GetCartForCustomerGetDefault) Error() string {
	return fmt.Sprintf("[GET /V1/carts/mine][%d] quoteCartManagementV1GetCartForCustomerGet default  %+v", o._statusCode, o.Payload)
}

func (o *QuoteCartManagementV1GetCartForCustomerGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
