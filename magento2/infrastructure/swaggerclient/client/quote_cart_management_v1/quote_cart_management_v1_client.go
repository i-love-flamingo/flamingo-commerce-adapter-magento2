// Code generated by go-swagger; DO NOT EDIT.

package quote_cart_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new quote cart management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for quote cart management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
QuoteCartManagementV1AssignCustomerPut Assigns a specified customer to a specified shopping cart.
*/
func (a *Client) QuoteCartManagementV1AssignCustomerPut(params *QuoteCartManagementV1AssignCustomerPutParams) (*QuoteCartManagementV1AssignCustomerPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartManagementV1AssignCustomerPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartManagementV1AssignCustomerPut",
		Method:             "PUT",
		PathPattern:        "/V1/carts/{cartId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartManagementV1AssignCustomerPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartManagementV1AssignCustomerPutOK), nil

}

/*
QuoteCartManagementV1CreateEmptyCartForCustomerPost Creates an empty cart and quote for a specified customer if customer does not have a cart yet.
*/
func (a *Client) QuoteCartManagementV1CreateEmptyCartForCustomerPost(params *QuoteCartManagementV1CreateEmptyCartForCustomerPostParams) (*QuoteCartManagementV1CreateEmptyCartForCustomerPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartManagementV1CreateEmptyCartForCustomerPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartManagementV1CreateEmptyCartForCustomerPost",
		Method:             "POST",
		PathPattern:        "/V1/carts/mine",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartManagementV1CreateEmptyCartForCustomerPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartManagementV1CreateEmptyCartForCustomerPostOK), nil

}

/*
QuoteCartManagementV1CreateEmptyCartForCustomerPostMine Creates an empty cart and quote for a specified customer if customer does not have a cart yet.
*/
func (a *Client) QuoteCartManagementV1CreateEmptyCartForCustomerPostMine(params *QuoteCartManagementV1CreateEmptyCartForCustomerPostMineParams) (*QuoteCartManagementV1CreateEmptyCartForCustomerPostMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartManagementV1CreateEmptyCartForCustomerPostMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartManagementV1CreateEmptyCartForCustomerPostMine",
		Method:             "POST",
		PathPattern:        "/V1/customers/{customerId}/carts",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartManagementV1CreateEmptyCartForCustomerPostMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartManagementV1CreateEmptyCartForCustomerPostMineOK), nil

}

/*
QuoteCartManagementV1CreateEmptyCartPost Creates an empty cart and quote for a guest.
*/
func (a *Client) QuoteCartManagementV1CreateEmptyCartPost(params *QuoteCartManagementV1CreateEmptyCartPostParams) (*QuoteCartManagementV1CreateEmptyCartPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartManagementV1CreateEmptyCartPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartManagementV1CreateEmptyCartPost",
		Method:             "POST",
		PathPattern:        "/V1/carts/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartManagementV1CreateEmptyCartPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartManagementV1CreateEmptyCartPostOK), nil

}

/*
QuoteCartManagementV1GetCartForCustomerGet Returns information for the cart for a specified customer.
*/
func (a *Client) QuoteCartManagementV1GetCartForCustomerGet(params *QuoteCartManagementV1GetCartForCustomerGetParams) (*QuoteCartManagementV1GetCartForCustomerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartManagementV1GetCartForCustomerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartManagementV1GetCartForCustomerGet",
		Method:             "GET",
		PathPattern:        "/V1/carts/mine",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartManagementV1GetCartForCustomerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartManagementV1GetCartForCustomerGetOK), nil

}

/*
QuoteCartManagementV1PlaceOrderPut Places an order for a specified cart.
*/
func (a *Client) QuoteCartManagementV1PlaceOrderPut(params *QuoteCartManagementV1PlaceOrderPutParams) (*QuoteCartManagementV1PlaceOrderPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartManagementV1PlaceOrderPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartManagementV1PlaceOrderPut",
		Method:             "PUT",
		PathPattern:        "/V1/carts/{cartId}/order",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartManagementV1PlaceOrderPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartManagementV1PlaceOrderPutOK), nil

}

/*
QuoteCartManagementV1PlaceOrderPutMine Places an order for a specified cart.
*/
func (a *Client) QuoteCartManagementV1PlaceOrderPutMine(params *QuoteCartManagementV1PlaceOrderPutMineParams) (*QuoteCartManagementV1PlaceOrderPutMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCartManagementV1PlaceOrderPutMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCartManagementV1PlaceOrderPutMine",
		Method:             "PUT",
		PathPattern:        "/V1/carts/mine/order",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCartManagementV1PlaceOrderPutMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCartManagementV1PlaceOrderPutMineOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
