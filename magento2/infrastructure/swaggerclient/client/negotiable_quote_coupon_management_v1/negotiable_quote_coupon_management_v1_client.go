// Code generated by go-swagger; DO NOT EDIT.

package negotiable_quote_coupon_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new negotiable quote coupon management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for negotiable quote coupon management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
NegotiableQuoteCouponManagementV1RemoveDelete Deletes a coupon from a specified cart.
*/
func (a *Client) NegotiableQuoteCouponManagementV1RemoveDelete(params *NegotiableQuoteCouponManagementV1RemoveDeleteParams) (*NegotiableQuoteCouponManagementV1RemoveDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNegotiableQuoteCouponManagementV1RemoveDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "negotiableQuoteCouponManagementV1RemoveDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/negotiable-carts/{cartId}/coupons",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NegotiableQuoteCouponManagementV1RemoveDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NegotiableQuoteCouponManagementV1RemoveDeleteOK), nil

}

/*
NegotiableQuoteCouponManagementV1SetPut Adds a coupon by code to a specified cart.
*/
func (a *Client) NegotiableQuoteCouponManagementV1SetPut(params *NegotiableQuoteCouponManagementV1SetPutParams) (*NegotiableQuoteCouponManagementV1SetPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNegotiableQuoteCouponManagementV1SetPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "negotiableQuoteCouponManagementV1SetPut",
		Method:             "PUT",
		PathPattern:        "/V1/negotiable-carts/{cartId}/coupons/{couponCode}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NegotiableQuoteCouponManagementV1SetPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NegotiableQuoteCouponManagementV1SetPutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
