// Code generated by go-swagger; DO NOT EDIT.

package downloadable_link_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new downloadable link repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for downloadable link repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DownloadableLinkRepositoryV1DeleteDelete Delete downloadable link
*/
func (a *Client) DownloadableLinkRepositoryV1DeleteDelete(params *DownloadableLinkRepositoryV1DeleteDeleteParams) (*DownloadableLinkRepositoryV1DeleteDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadableLinkRepositoryV1DeleteDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadableLinkRepositoryV1DeleteDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/products/downloadable-links/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadableLinkRepositoryV1DeleteDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DownloadableLinkRepositoryV1DeleteDeleteOK), nil

}

/*
DownloadableLinkRepositoryV1GetListGet List of links with associated samples
*/
func (a *Client) DownloadableLinkRepositoryV1GetListGet(params *DownloadableLinkRepositoryV1GetListGetParams) (*DownloadableLinkRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadableLinkRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadableLinkRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/products/{sku}/downloadable-links",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadableLinkRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DownloadableLinkRepositoryV1GetListGetOK), nil

}

/*
DownloadableLinkRepositoryV1SavePost Update downloadable link of the given product (link type and its resources cannot be changed)
*/
func (a *Client) DownloadableLinkRepositoryV1SavePost(params *DownloadableLinkRepositoryV1SavePostParams) (*DownloadableLinkRepositoryV1SavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadableLinkRepositoryV1SavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadableLinkRepositoryV1SavePost",
		Method:             "POST",
		PathPattern:        "/V1/products/{sku}/downloadable-links",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadableLinkRepositoryV1SavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DownloadableLinkRepositoryV1SavePostOK), nil

}

/*
DownloadableLinkRepositoryV1SavePut Update downloadable link of the given product (link type and its resources cannot be changed)
*/
func (a *Client) DownloadableLinkRepositoryV1SavePut(params *DownloadableLinkRepositoryV1SavePutParams) (*DownloadableLinkRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadableLinkRepositoryV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadableLinkRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/products/{sku}/downloadable-links/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadableLinkRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DownloadableLinkRepositoryV1SavePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
