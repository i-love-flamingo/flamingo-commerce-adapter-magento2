// Code generated by go-swagger; DO NOT EDIT.

package rma_rma_attributes_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new rma rma attributes management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rma rma attributes management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
RmaRmaAttributesManagementV1GetAllAttributesMetadataGet Get all attribute metadata.
*/
func (a *Client) RmaRmaAttributesManagementV1GetAllAttributesMetadataGet(params *RmaRmaAttributesManagementV1GetAllAttributesMetadataGetParams) (*RmaRmaAttributesManagementV1GetAllAttributesMetadataGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRmaRmaAttributesManagementV1GetAllAttributesMetadataGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rmaRmaAttributesManagementV1GetAllAttributesMetadataGet",
		Method:             "GET",
		PathPattern:        "/V1/returnsAttributeMetadata",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RmaRmaAttributesManagementV1GetAllAttributesMetadataGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RmaRmaAttributesManagementV1GetAllAttributesMetadataGetOK), nil

}

/*
RmaRmaAttributesManagementV1GetAttributeMetadataGet Retrieve attribute metadata.
*/
func (a *Client) RmaRmaAttributesManagementV1GetAttributeMetadataGet(params *RmaRmaAttributesManagementV1GetAttributeMetadataGetParams) (*RmaRmaAttributesManagementV1GetAttributeMetadataGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRmaRmaAttributesManagementV1GetAttributeMetadataGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rmaRmaAttributesManagementV1GetAttributeMetadataGet",
		Method:             "GET",
		PathPattern:        "/V1/returnsAttributeMetadata/{attributeCode}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RmaRmaAttributesManagementV1GetAttributeMetadataGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RmaRmaAttributesManagementV1GetAttributeMetadataGetOK), nil

}

/*
RmaRmaAttributesManagementV1GetAttributesGet Retrieve all attributes filtered by form code
*/
func (a *Client) RmaRmaAttributesManagementV1GetAttributesGet(params *RmaRmaAttributesManagementV1GetAttributesGetParams) (*RmaRmaAttributesManagementV1GetAttributesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRmaRmaAttributesManagementV1GetAttributesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rmaRmaAttributesManagementV1GetAttributesGet",
		Method:             "GET",
		PathPattern:        "/V1/returnsAttributeMetadata/form/{formCode}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RmaRmaAttributesManagementV1GetAttributesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RmaRmaAttributesManagementV1GetAttributesGetOK), nil

}

/*
RmaRmaAttributesManagementV1GetCustomAttributesMetadataGet Get custom attribute metadata for the given Data object's attribute set
*/
func (a *Client) RmaRmaAttributesManagementV1GetCustomAttributesMetadataGet(params *RmaRmaAttributesManagementV1GetCustomAttributesMetadataGetParams) (*RmaRmaAttributesManagementV1GetCustomAttributesMetadataGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRmaRmaAttributesManagementV1GetCustomAttributesMetadataGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rmaRmaAttributesManagementV1GetCustomAttributesMetadataGet",
		Method:             "GET",
		PathPattern:        "/V1/returnsAttributeMetadata/custom",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RmaRmaAttributesManagementV1GetCustomAttributesMetadataGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RmaRmaAttributesManagementV1GetCustomAttributesMetadataGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
