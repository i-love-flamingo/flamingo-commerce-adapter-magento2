// Code generated by go-swagger; DO NOT EDIT.

package bundle_product_link_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new bundle product link management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bundle product link management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
BundleProductLinkManagementV1AddChildByProductSkuPost Add child product to specified Bundle option by product sku
*/
func (a *Client) BundleProductLinkManagementV1AddChildByProductSkuPost(params *BundleProductLinkManagementV1AddChildByProductSkuPostParams) (*BundleProductLinkManagementV1AddChildByProductSkuPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBundleProductLinkManagementV1AddChildByProductSkuPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bundleProductLinkManagementV1AddChildByProductSkuPost",
		Method:             "POST",
		PathPattern:        "/V1/bundle-products/{sku}/links/{optionId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BundleProductLinkManagementV1AddChildByProductSkuPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BundleProductLinkManagementV1AddChildByProductSkuPostOK), nil

}

/*
BundleProductLinkManagementV1GetChildrenGet Get all children for Bundle product
*/
func (a *Client) BundleProductLinkManagementV1GetChildrenGet(params *BundleProductLinkManagementV1GetChildrenGetParams) (*BundleProductLinkManagementV1GetChildrenGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBundleProductLinkManagementV1GetChildrenGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bundleProductLinkManagementV1GetChildrenGet",
		Method:             "GET",
		PathPattern:        "/V1/bundle-products/{productSku}/children",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BundleProductLinkManagementV1GetChildrenGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BundleProductLinkManagementV1GetChildrenGetOK), nil

}

/*
BundleProductLinkManagementV1RemoveChildDelete Remove product from Bundle product option
*/
func (a *Client) BundleProductLinkManagementV1RemoveChildDelete(params *BundleProductLinkManagementV1RemoveChildDeleteParams) (*BundleProductLinkManagementV1RemoveChildDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBundleProductLinkManagementV1RemoveChildDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bundleProductLinkManagementV1RemoveChildDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/bundle-products/{sku}/options/{optionId}/children/{childSku}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BundleProductLinkManagementV1RemoveChildDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BundleProductLinkManagementV1RemoveChildDeleteOK), nil

}

/*
BundleProductLinkManagementV1SaveChildPut bundle product link management v1 save child put API
*/
func (a *Client) BundleProductLinkManagementV1SaveChildPut(params *BundleProductLinkManagementV1SaveChildPutParams) (*BundleProductLinkManagementV1SaveChildPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBundleProductLinkManagementV1SaveChildPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bundleProductLinkManagementV1SaveChildPut",
		Method:             "PUT",
		PathPattern:        "/V1/bundle-products/{sku}/links/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BundleProductLinkManagementV1SaveChildPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BundleProductLinkManagementV1SaveChildPutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
