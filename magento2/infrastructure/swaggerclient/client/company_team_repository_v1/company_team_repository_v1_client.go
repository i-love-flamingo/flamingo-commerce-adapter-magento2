// Code generated by go-swagger; DO NOT EDIT.

package company_team_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new company team repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for company team repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CompanyTeamRepositoryV1CreatePost Create a team in the company structure.
*/
func (a *Client) CompanyTeamRepositoryV1CreatePost(params *CompanyTeamRepositoryV1CreatePostParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyTeamRepositoryV1CreatePostParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyTeamRepositoryV1CreatePost",
		Method:             "POST",
		PathPattern:        "/V1/team/{companyId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyTeamRepositoryV1CreatePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
CompanyTeamRepositoryV1DeleteByIDDelete Delete a team from the company structure.
*/
func (a *Client) CompanyTeamRepositoryV1DeleteByIDDelete(params *CompanyTeamRepositoryV1DeleteByIDDeleteParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyTeamRepositoryV1DeleteByIDDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyTeamRepositoryV1DeleteByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/team/{teamId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyTeamRepositoryV1DeleteByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
CompanyTeamRepositoryV1GetGet Returns data for a team in the company, by entity id.
*/
func (a *Client) CompanyTeamRepositoryV1GetGet(params *CompanyTeamRepositoryV1GetGetParams) (*CompanyTeamRepositoryV1GetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyTeamRepositoryV1GetGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyTeamRepositoryV1GetGet",
		Method:             "GET",
		PathPattern:        "/V1/team/{teamId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyTeamRepositoryV1GetGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyTeamRepositoryV1GetGetOK), nil

}

/*
CompanyTeamRepositoryV1GetListGet Returns the list of teams for the specified search criteria (team name or description).
*/
func (a *Client) CompanyTeamRepositoryV1GetListGet(params *CompanyTeamRepositoryV1GetListGetParams) (*CompanyTeamRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyTeamRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyTeamRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/team/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyTeamRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyTeamRepositoryV1GetListGetOK), nil

}

/*
CompanyTeamRepositoryV1SavePut Update a team in the company structure.
*/
func (a *Client) CompanyTeamRepositoryV1SavePut(params *CompanyTeamRepositoryV1SavePutParams) (*CompanyTeamRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyTeamRepositoryV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyTeamRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/team/{teamId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyTeamRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyTeamRepositoryV1SavePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
