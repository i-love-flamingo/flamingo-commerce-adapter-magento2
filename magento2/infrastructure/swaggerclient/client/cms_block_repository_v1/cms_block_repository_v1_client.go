// Code generated by go-swagger; DO NOT EDIT.

package cms_block_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new cms block repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cms block repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CmsBlockRepositoryV1DeleteByIDDelete Delete block by ID.
*/
func (a *Client) CmsBlockRepositoryV1DeleteByIDDelete(params *CmsBlockRepositoryV1DeleteByIDDeleteParams) (*CmsBlockRepositoryV1DeleteByIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCmsBlockRepositoryV1DeleteByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cmsBlockRepositoryV1DeleteByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/cmsBlock/{blockId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CmsBlockRepositoryV1DeleteByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CmsBlockRepositoryV1DeleteByIDDeleteOK), nil

}

/*
CmsBlockRepositoryV1GetByIDGet Retrieve block.
*/
func (a *Client) CmsBlockRepositoryV1GetByIDGet(params *CmsBlockRepositoryV1GetByIDGetParams) (*CmsBlockRepositoryV1GetByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCmsBlockRepositoryV1GetByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cmsBlockRepositoryV1GetByIdGet",
		Method:             "GET",
		PathPattern:        "/V1/cmsBlock/{blockId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CmsBlockRepositoryV1GetByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CmsBlockRepositoryV1GetByIDGetOK), nil

}

/*
CmsBlockRepositoryV1GetListGet Retrieve blocks matching the specified criteria.
*/
func (a *Client) CmsBlockRepositoryV1GetListGet(params *CmsBlockRepositoryV1GetListGetParams) (*CmsBlockRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCmsBlockRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cmsBlockRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/cmsBlock/search",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CmsBlockRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CmsBlockRepositoryV1GetListGetOK), nil

}

/*
CmsBlockRepositoryV1SavePost Save block.
*/
func (a *Client) CmsBlockRepositoryV1SavePost(params *CmsBlockRepositoryV1SavePostParams) (*CmsBlockRepositoryV1SavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCmsBlockRepositoryV1SavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cmsBlockRepositoryV1SavePost",
		Method:             "POST",
		PathPattern:        "/V1/cmsBlock",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CmsBlockRepositoryV1SavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CmsBlockRepositoryV1SavePostOK), nil

}

/*
CmsBlockRepositoryV1SavePut Save block.
*/
func (a *Client) CmsBlockRepositoryV1SavePut(params *CmsBlockRepositoryV1SavePutParams) (*CmsBlockRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCmsBlockRepositoryV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cmsBlockRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/cmsBlock/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CmsBlockRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CmsBlockRepositoryV1SavePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
