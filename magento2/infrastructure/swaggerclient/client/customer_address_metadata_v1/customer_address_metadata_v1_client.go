// Code generated by go-swagger; DO NOT EDIT.

package customer_address_metadata_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new customer address metadata v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer address metadata v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CustomerAddressMetadataV1GetAllAttributesMetadataGet Get all attribute metadata.
*/
func (a *Client) CustomerAddressMetadataV1GetAllAttributesMetadataGet(params *CustomerAddressMetadataV1GetAllAttributesMetadataGetParams) (*CustomerAddressMetadataV1GetAllAttributesMetadataGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerAddressMetadataV1GetAllAttributesMetadataGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerAddressMetadataV1GetAllAttributesMetadataGet",
		Method:             "GET",
		PathPattern:        "/V1/attributeMetadata/customerAddress",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerAddressMetadataV1GetAllAttributesMetadataGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomerAddressMetadataV1GetAllAttributesMetadataGetOK), nil

}

/*
CustomerAddressMetadataV1GetAttributeMetadataGet Retrieve attribute metadata.
*/
func (a *Client) CustomerAddressMetadataV1GetAttributeMetadataGet(params *CustomerAddressMetadataV1GetAttributeMetadataGetParams) (*CustomerAddressMetadataV1GetAttributeMetadataGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerAddressMetadataV1GetAttributeMetadataGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerAddressMetadataV1GetAttributeMetadataGet",
		Method:             "GET",
		PathPattern:        "/V1/attributeMetadata/customerAddress/attribute/{attributeCode}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerAddressMetadataV1GetAttributeMetadataGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomerAddressMetadataV1GetAttributeMetadataGetOK), nil

}

/*
CustomerAddressMetadataV1GetAttributesGet Retrieve all attributes filtered by form code
*/
func (a *Client) CustomerAddressMetadataV1GetAttributesGet(params *CustomerAddressMetadataV1GetAttributesGetParams) (*CustomerAddressMetadataV1GetAttributesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerAddressMetadataV1GetAttributesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerAddressMetadataV1GetAttributesGet",
		Method:             "GET",
		PathPattern:        "/V1/attributeMetadata/customerAddress/form/{formCode}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerAddressMetadataV1GetAttributesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomerAddressMetadataV1GetAttributesGetOK), nil

}

/*
CustomerAddressMetadataV1GetCustomAttributesMetadataGet Get custom attributes metadata for the given data interface.
*/
func (a *Client) CustomerAddressMetadataV1GetCustomAttributesMetadataGet(params *CustomerAddressMetadataV1GetCustomAttributesMetadataGetParams) (*CustomerAddressMetadataV1GetCustomAttributesMetadataGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerAddressMetadataV1GetCustomAttributesMetadataGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerAddressMetadataV1GetCustomAttributesMetadataGet",
		Method:             "GET",
		PathPattern:        "/V1/attributeMetadata/customerAddress/custom",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerAddressMetadataV1GetCustomAttributesMetadataGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomerAddressMetadataV1GetCustomAttributesMetadataGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
