// Code generated by go-swagger; DO NOT EDIT.

package shared_catalog_shared_catalog_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new shared catalog shared catalog repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for shared catalog shared catalog repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SharedCatalogSharedCatalogRepositoryV1DeleteByIDDelete Delete a shared catalog by ID.
*/
func (a *Client) SharedCatalogSharedCatalogRepositoryV1DeleteByIDDelete(params *SharedCatalogSharedCatalogRepositoryV1DeleteByIDDeleteParams) (*SharedCatalogSharedCatalogRepositoryV1DeleteByIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSharedCatalogSharedCatalogRepositoryV1DeleteByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sharedCatalogSharedCatalogRepositoryV1DeleteByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/sharedCatalog/{sharedCatalogId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SharedCatalogSharedCatalogRepositoryV1DeleteByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SharedCatalogSharedCatalogRepositoryV1DeleteByIDDeleteOK), nil

}

/*
SharedCatalogSharedCatalogRepositoryV1GetGet Return the following properties for the selected shared catalog: ID, Store Group ID, Name, Type, Description, Customer Group, Tax Class.
*/
func (a *Client) SharedCatalogSharedCatalogRepositoryV1GetGet(params *SharedCatalogSharedCatalogRepositoryV1GetGetParams) (*SharedCatalogSharedCatalogRepositoryV1GetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSharedCatalogSharedCatalogRepositoryV1GetGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sharedCatalogSharedCatalogRepositoryV1GetGet",
		Method:             "GET",
		PathPattern:        "/V1/sharedCatalog/{sharedCatalogId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SharedCatalogSharedCatalogRepositoryV1GetGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SharedCatalogSharedCatalogRepositoryV1GetGetOK), nil

}

/*
SharedCatalogSharedCatalogRepositoryV1GetListGet Return the list of shared catalogs and basic properties for each catalog.
*/
func (a *Client) SharedCatalogSharedCatalogRepositoryV1GetListGet(params *SharedCatalogSharedCatalogRepositoryV1GetListGetParams) (*SharedCatalogSharedCatalogRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSharedCatalogSharedCatalogRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sharedCatalogSharedCatalogRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/sharedCatalog/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SharedCatalogSharedCatalogRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SharedCatalogSharedCatalogRepositoryV1GetListGetOK), nil

}

/*
SharedCatalogSharedCatalogRepositoryV1SavePost Create or update Shared Catalog service.
*/
func (a *Client) SharedCatalogSharedCatalogRepositoryV1SavePost(params *SharedCatalogSharedCatalogRepositoryV1SavePostParams) (*SharedCatalogSharedCatalogRepositoryV1SavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSharedCatalogSharedCatalogRepositoryV1SavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sharedCatalogSharedCatalogRepositoryV1SavePost",
		Method:             "POST",
		PathPattern:        "/V1/sharedCatalog",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SharedCatalogSharedCatalogRepositoryV1SavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SharedCatalogSharedCatalogRepositoryV1SavePostOK), nil

}

/*
SharedCatalogSharedCatalogRepositoryV1SavePut Create or update Shared Catalog service.
*/
func (a *Client) SharedCatalogSharedCatalogRepositoryV1SavePut(params *SharedCatalogSharedCatalogRepositoryV1SavePutParams) (*SharedCatalogSharedCatalogRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSharedCatalogSharedCatalogRepositoryV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sharedCatalogSharedCatalogRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/sharedCatalog/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SharedCatalogSharedCatalogRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SharedCatalogSharedCatalogRepositoryV1SavePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
