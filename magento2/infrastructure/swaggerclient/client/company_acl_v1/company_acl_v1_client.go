// Code generated by go-swagger; DO NOT EDIT.

package company_acl_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new company acl v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for company acl v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CompanyACLV1AssignRolesPut Change a role for a company user.
*/
func (a *Client) CompanyACLV1AssignRolesPut(params *CompanyACLV1AssignRolesPutParams) (*CompanyACLV1AssignRolesPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyACLV1AssignRolesPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyAclV1AssignRolesPut",
		Method:             "PUT",
		PathPattern:        "/V1/company/assignRoles",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyACLV1AssignRolesPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyACLV1AssignRolesPutOK), nil

}

/*
CompanyACLV1GetUsersByRoleIDGet View the list of company users assigned to a specified role.
*/
func (a *Client) CompanyACLV1GetUsersByRoleIDGet(params *CompanyACLV1GetUsersByRoleIDGetParams) (*CompanyACLV1GetUsersByRoleIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyACLV1GetUsersByRoleIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyAclV1GetUsersByRoleIdGet",
		Method:             "GET",
		PathPattern:        "/V1/company/role/{roleId}/users",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyACLV1GetUsersByRoleIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyACLV1GetUsersByRoleIDGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
