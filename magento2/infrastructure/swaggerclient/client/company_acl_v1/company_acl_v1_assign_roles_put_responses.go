// Code generated by go-swagger; DO NOT EDIT.

package company_acl_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "flamingo.me/flamingo-commerce-adapter-magento2/magento2/infrastructure/swaggerclient/models"
)

// CompanyACLV1AssignRolesPutReader is a Reader for the CompanyACLV1AssignRolesPut structure.
type CompanyACLV1AssignRolesPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CompanyACLV1AssignRolesPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCompanyACLV1AssignRolesPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCompanyACLV1AssignRolesPutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCompanyACLV1AssignRolesPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCompanyACLV1AssignRolesPutDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCompanyACLV1AssignRolesPutOK creates a CompanyACLV1AssignRolesPutOK with default headers values
func NewCompanyACLV1AssignRolesPutOK() *CompanyACLV1AssignRolesPutOK {
	return &CompanyACLV1AssignRolesPutOK{}
}

/*CompanyACLV1AssignRolesPutOK handles this case with default header values.

200 Success.
*/
type CompanyACLV1AssignRolesPutOK struct {
	Payload bool
}

func (o *CompanyACLV1AssignRolesPutOK) Error() string {
	return fmt.Sprintf("[PUT /V1/company/assignRoles][%d] companyAclV1AssignRolesPutOK  %+v", 200, o.Payload)
}

func (o *CompanyACLV1AssignRolesPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompanyACLV1AssignRolesPutBadRequest creates a CompanyACLV1AssignRolesPutBadRequest with default headers values
func NewCompanyACLV1AssignRolesPutBadRequest() *CompanyACLV1AssignRolesPutBadRequest {
	return &CompanyACLV1AssignRolesPutBadRequest{}
}

/*CompanyACLV1AssignRolesPutBadRequest handles this case with default header values.

400 Bad Request
*/
type CompanyACLV1AssignRolesPutBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *CompanyACLV1AssignRolesPutBadRequest) Error() string {
	return fmt.Sprintf("[PUT /V1/company/assignRoles][%d] companyAclV1AssignRolesPutBadRequest  %+v", 400, o.Payload)
}

func (o *CompanyACLV1AssignRolesPutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompanyACLV1AssignRolesPutUnauthorized creates a CompanyACLV1AssignRolesPutUnauthorized with default headers values
func NewCompanyACLV1AssignRolesPutUnauthorized() *CompanyACLV1AssignRolesPutUnauthorized {
	return &CompanyACLV1AssignRolesPutUnauthorized{}
}

/*CompanyACLV1AssignRolesPutUnauthorized handles this case with default header values.

401 Unauthorized
*/
type CompanyACLV1AssignRolesPutUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *CompanyACLV1AssignRolesPutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /V1/company/assignRoles][%d] companyAclV1AssignRolesPutUnauthorized  %+v", 401, o.Payload)
}

func (o *CompanyACLV1AssignRolesPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompanyACLV1AssignRolesPutDefault creates a CompanyACLV1AssignRolesPutDefault with default headers values
func NewCompanyACLV1AssignRolesPutDefault(code int) *CompanyACLV1AssignRolesPutDefault {
	return &CompanyACLV1AssignRolesPutDefault{
		_statusCode: code,
	}
}

/*CompanyACLV1AssignRolesPutDefault handles this case with default header values.

Unexpected error
*/
type CompanyACLV1AssignRolesPutDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the company Acl v1 assign roles put default response
func (o *CompanyACLV1AssignRolesPutDefault) Code() int {
	return o._statusCode
}

func (o *CompanyACLV1AssignRolesPutDefault) Error() string {
	return fmt.Sprintf("[PUT /V1/company/assignRoles][%d] companyAclV1AssignRolesPut default  %+v", o._statusCode, o.Payload)
}

func (o *CompanyACLV1AssignRolesPutDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CompanyACLV1AssignRolesPutBody company ACL v1 assign roles put body
swagger:model CompanyACLV1AssignRolesPutBody
*/
type CompanyACLV1AssignRolesPutBody struct {

	// roles
	// Required: true
	Roles []*models.CompanyDataRoleInterface `json:"roles"`

	// user Id
	// Required: true
	UserID *int64 `json:"userId"`
}

// Validate validates this company ACL v1 assign roles put body
func (o *CompanyACLV1AssignRolesPutBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CompanyACLV1AssignRolesPutBody) validateRoles(formats strfmt.Registry) error {

	if err := validate.Required("companyAclV1AssignRolesPutBody"+"."+"roles", "body", o.Roles); err != nil {
		return err
	}

	for i := 0; i < len(o.Roles); i++ {
		if swag.IsZero(o.Roles[i]) { // not required
			continue
		}

		if o.Roles[i] != nil {
			if err := o.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("companyAclV1AssignRolesPutBody" + "." + "roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CompanyACLV1AssignRolesPutBody) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("companyAclV1AssignRolesPutBody"+"."+"userId", "body", o.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CompanyACLV1AssignRolesPutBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CompanyACLV1AssignRolesPutBody) UnmarshalBinary(b []byte) error {
	var res CompanyACLV1AssignRolesPutBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
