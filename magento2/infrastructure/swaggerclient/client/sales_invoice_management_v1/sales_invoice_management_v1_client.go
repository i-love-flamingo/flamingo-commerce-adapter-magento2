// Code generated by go-swagger; DO NOT EDIT.

package sales_invoice_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new sales invoice management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sales invoice management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SalesInvoiceManagementV1GetCommentsListGet Lists comments for a specified invoice.
*/
func (a *Client) SalesInvoiceManagementV1GetCommentsListGet(params *SalesInvoiceManagementV1GetCommentsListGetParams) (*SalesInvoiceManagementV1GetCommentsListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesInvoiceManagementV1GetCommentsListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "salesInvoiceManagementV1GetCommentsListGet",
		Method:             "GET",
		PathPattern:        "/V1/invoices/{id}/comments",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SalesInvoiceManagementV1GetCommentsListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SalesInvoiceManagementV1GetCommentsListGetOK), nil

}

/*
SalesInvoiceManagementV1NotifyPost Emails a user a specified invoice.
*/
func (a *Client) SalesInvoiceManagementV1NotifyPost(params *SalesInvoiceManagementV1NotifyPostParams) (*SalesInvoiceManagementV1NotifyPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesInvoiceManagementV1NotifyPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "salesInvoiceManagementV1NotifyPost",
		Method:             "POST",
		PathPattern:        "/V1/invoices/{id}/emails",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SalesInvoiceManagementV1NotifyPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SalesInvoiceManagementV1NotifyPostOK), nil

}

/*
SalesInvoiceManagementV1SetCapturePost Sets invoice capture.
*/
func (a *Client) SalesInvoiceManagementV1SetCapturePost(params *SalesInvoiceManagementV1SetCapturePostParams) (*SalesInvoiceManagementV1SetCapturePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesInvoiceManagementV1SetCapturePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "salesInvoiceManagementV1SetCapturePost",
		Method:             "POST",
		PathPattern:        "/V1/invoices/{id}/capture",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SalesInvoiceManagementV1SetCapturePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SalesInvoiceManagementV1SetCapturePostOK), nil

}

/*
SalesInvoiceManagementV1SetVoidPost Voids a specified invoice.
*/
func (a *Client) SalesInvoiceManagementV1SetVoidPost(params *SalesInvoiceManagementV1SetVoidPostParams) (*SalesInvoiceManagementV1SetVoidPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalesInvoiceManagementV1SetVoidPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "salesInvoiceManagementV1SetVoidPost",
		Method:             "POST",
		PathPattern:        "/V1/invoices/{id}/void",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SalesInvoiceManagementV1SetVoidPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SalesInvoiceManagementV1SetVoidPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
