// Code generated by go-swagger; DO NOT EDIT.

package catalog_product_tier_price_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new catalog product tier price management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog product tier price management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CatalogProductTierPriceManagementV1AddPost Create tier price for product
*/
func (a *Client) CatalogProductTierPriceManagementV1AddPost(params *CatalogProductTierPriceManagementV1AddPostParams) (*CatalogProductTierPriceManagementV1AddPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogProductTierPriceManagementV1AddPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogProductTierPriceManagementV1AddPost",
		Method:             "POST",
		PathPattern:        "/V1/products/{sku}/group-prices/{customerGroupId}/tiers/{qty}/price/{price}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogProductTierPriceManagementV1AddPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogProductTierPriceManagementV1AddPostOK), nil

}

/*
CatalogProductTierPriceManagementV1GetListGet Get tier price of product
*/
func (a *Client) CatalogProductTierPriceManagementV1GetListGet(params *CatalogProductTierPriceManagementV1GetListGetParams) (*CatalogProductTierPriceManagementV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogProductTierPriceManagementV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogProductTierPriceManagementV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/products/{sku}/group-prices/{customerGroupId}/tiers",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogProductTierPriceManagementV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogProductTierPriceManagementV1GetListGetOK), nil

}

/*
CatalogProductTierPriceManagementV1RemoveDelete Remove tier price from product
*/
func (a *Client) CatalogProductTierPriceManagementV1RemoveDelete(params *CatalogProductTierPriceManagementV1RemoveDeleteParams) (*CatalogProductTierPriceManagementV1RemoveDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogProductTierPriceManagementV1RemoveDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogProductTierPriceManagementV1RemoveDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/products/{sku}/group-prices/{customerGroupId}/tiers/{qty}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogProductTierPriceManagementV1RemoveDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogProductTierPriceManagementV1RemoveDeleteOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
