// Code generated by go-swagger; DO NOT EDIT.

package customer_group_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new customer group repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer group repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CustomerGroupRepositoryV1DeleteByIDDelete Delete customer group by ID.
*/
func (a *Client) CustomerGroupRepositoryV1DeleteByIDDelete(params *CustomerGroupRepositoryV1DeleteByIDDeleteParams) (*CustomerGroupRepositoryV1DeleteByIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGroupRepositoryV1DeleteByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerGroupRepositoryV1DeleteByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/customerGroups/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerGroupRepositoryV1DeleteByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomerGroupRepositoryV1DeleteByIDDeleteOK), nil

}

/*
CustomerGroupRepositoryV1GetByIDGet Get customer group by group ID.
*/
func (a *Client) CustomerGroupRepositoryV1GetByIDGet(params *CustomerGroupRepositoryV1GetByIDGetParams) (*CustomerGroupRepositoryV1GetByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGroupRepositoryV1GetByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerGroupRepositoryV1GetByIdGet",
		Method:             "GET",
		PathPattern:        "/V1/customerGroups/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerGroupRepositoryV1GetByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomerGroupRepositoryV1GetByIDGetOK), nil

}

/*
CustomerGroupRepositoryV1GetListGet Retrieve customer groups. The list of groups can be filtered to exclude the NOT_LOGGED_IN group using the first parameter and/or it can be filtered by tax class. This call returns an array of objects, but detailed information about each objectâ€™s attributes might not be included. See http://devdocs.magento.com/codelinks/attributes.html#GroupRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.
*/
func (a *Client) CustomerGroupRepositoryV1GetListGet(params *CustomerGroupRepositoryV1GetListGetParams) (*CustomerGroupRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGroupRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerGroupRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/customerGroups/search",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerGroupRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomerGroupRepositoryV1GetListGetOK), nil

}

/*
CustomerGroupRepositoryV1SavePost Save customer group.
*/
func (a *Client) CustomerGroupRepositoryV1SavePost(params *CustomerGroupRepositoryV1SavePostParams) (*CustomerGroupRepositoryV1SavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGroupRepositoryV1SavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerGroupRepositoryV1SavePost",
		Method:             "POST",
		PathPattern:        "/V1/customerGroups",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerGroupRepositoryV1SavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomerGroupRepositoryV1SavePostOK), nil

}

/*
CustomerGroupRepositoryV1SavePut Save customer group.
*/
func (a *Client) CustomerGroupRepositoryV1SavePut(params *CustomerGroupRepositoryV1SavePutParams) (*CustomerGroupRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGroupRepositoryV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerGroupRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/customerGroups/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerGroupRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CustomerGroupRepositoryV1SavePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
