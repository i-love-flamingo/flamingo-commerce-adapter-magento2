// Code generated by go-swagger; DO NOT EDIT.

package quote_shipping_method_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new quote shipping method management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for quote shipping method management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
QuoteShippingMethodManagementV1EstimateByAddressIDPost Estimate shipping
*/
func (a *Client) QuoteShippingMethodManagementV1EstimateByAddressIDPost(params *QuoteShippingMethodManagementV1EstimateByAddressIDPostParams) (*QuoteShippingMethodManagementV1EstimateByAddressIDPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteShippingMethodManagementV1EstimateByAddressIDPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteShippingMethodManagementV1EstimateByAddressIdPost",
		Method:             "POST",
		PathPattern:        "/V1/carts/{cartId}/estimate-shipping-methods-by-address-id",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteShippingMethodManagementV1EstimateByAddressIDPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteShippingMethodManagementV1EstimateByAddressIDPostOK), nil

}

/*
QuoteShippingMethodManagementV1EstimateByAddressIDPostMine Estimate shipping
*/
func (a *Client) QuoteShippingMethodManagementV1EstimateByAddressIDPostMine(params *QuoteShippingMethodManagementV1EstimateByAddressIDPostMineParams) (*QuoteShippingMethodManagementV1EstimateByAddressIDPostMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteShippingMethodManagementV1EstimateByAddressIDPostMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteShippingMethodManagementV1EstimateByAddressIdPostMine",
		Method:             "POST",
		PathPattern:        "/V1/carts/mine/estimate-shipping-methods-by-address-id",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteShippingMethodManagementV1EstimateByAddressIDPostMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteShippingMethodManagementV1EstimateByAddressIDPostMineOK), nil

}

/*
QuoteShippingMethodManagementV1GetListGet Lists applicable shipping methods for a specified quote.
*/
func (a *Client) QuoteShippingMethodManagementV1GetListGet(params *QuoteShippingMethodManagementV1GetListGetParams) (*QuoteShippingMethodManagementV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteShippingMethodManagementV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteShippingMethodManagementV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/carts/{cartId}/shipping-methods",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteShippingMethodManagementV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteShippingMethodManagementV1GetListGetOK), nil

}

/*
QuoteShippingMethodManagementV1GetListGetMine Lists applicable shipping methods for a specified quote.
*/
func (a *Client) QuoteShippingMethodManagementV1GetListGetMine(params *QuoteShippingMethodManagementV1GetListGetMineParams) (*QuoteShippingMethodManagementV1GetListGetMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteShippingMethodManagementV1GetListGetMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteShippingMethodManagementV1GetListGetMine",
		Method:             "GET",
		PathPattern:        "/V1/carts/mine/shipping-methods",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteShippingMethodManagementV1GetListGetMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteShippingMethodManagementV1GetListGetMineOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
