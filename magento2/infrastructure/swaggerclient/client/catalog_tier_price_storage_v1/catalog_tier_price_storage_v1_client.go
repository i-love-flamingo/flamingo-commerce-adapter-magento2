// Code generated by go-swagger; DO NOT EDIT.

package catalog_tier_price_storage_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new catalog tier price storage v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog tier price storage v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CatalogTierPriceStorageV1DeletePost Delete product tier prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from delete list and \Magento\Catalog\Api\Data\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
*/
func (a *Client) CatalogTierPriceStorageV1DeletePost(params *CatalogTierPriceStorageV1DeletePostParams) (*CatalogTierPriceStorageV1DeletePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogTierPriceStorageV1DeletePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogTierPriceStorageV1DeletePost",
		Method:             "POST",
		PathPattern:        "/V1/products/tier-prices-delete",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogTierPriceStorageV1DeletePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogTierPriceStorageV1DeletePostOK), nil

}

/*
CatalogTierPriceStorageV1GetPost Return product prices. In case of at least one of skus is not found exception will be thrown.
*/
func (a *Client) CatalogTierPriceStorageV1GetPost(params *CatalogTierPriceStorageV1GetPostParams) (*CatalogTierPriceStorageV1GetPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogTierPriceStorageV1GetPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogTierPriceStorageV1GetPost",
		Method:             "POST",
		PathPattern:        "/V1/products/tier-prices-information",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogTierPriceStorageV1GetPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogTierPriceStorageV1GetPostOK), nil

}

/*
CatalogTierPriceStorageV1ReplacePut Remove existing tier prices and replace them with the new ones. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from replace list and \Magento\Catalog\Api\Data\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
*/
func (a *Client) CatalogTierPriceStorageV1ReplacePut(params *CatalogTierPriceStorageV1ReplacePutParams) (*CatalogTierPriceStorageV1ReplacePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogTierPriceStorageV1ReplacePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogTierPriceStorageV1ReplacePut",
		Method:             "PUT",
		PathPattern:        "/V1/products/tier-prices",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogTierPriceStorageV1ReplacePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogTierPriceStorageV1ReplacePutOK), nil

}

/*
CatalogTierPriceStorageV1UpdatePost Add or update product prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from update list and \Magento\Catalog\Api\Data\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
*/
func (a *Client) CatalogTierPriceStorageV1UpdatePost(params *CatalogTierPriceStorageV1UpdatePostParams) (*CatalogTierPriceStorageV1UpdatePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogTierPriceStorageV1UpdatePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogTierPriceStorageV1UpdatePost",
		Method:             "POST",
		PathPattern:        "/V1/products/tier-prices",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogTierPriceStorageV1UpdatePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogTierPriceStorageV1UpdatePostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
