// Code generated by go-swagger; DO NOT EDIT.

package quote_coupon_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new quote coupon management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for quote coupon management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
QuoteCouponManagementV1GetGet Returns information for a coupon in a specified cart.
*/
func (a *Client) QuoteCouponManagementV1GetGet(params *QuoteCouponManagementV1GetGetParams) (*QuoteCouponManagementV1GetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCouponManagementV1GetGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCouponManagementV1GetGet",
		Method:             "GET",
		PathPattern:        "/V1/carts/{cartId}/coupons",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCouponManagementV1GetGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCouponManagementV1GetGetOK), nil

}

/*
QuoteCouponManagementV1GetGetMine Returns information for a coupon in a specified cart.
*/
func (a *Client) QuoteCouponManagementV1GetGetMine(params *QuoteCouponManagementV1GetGetMineParams) (*QuoteCouponManagementV1GetGetMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCouponManagementV1GetGetMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCouponManagementV1GetGetMine",
		Method:             "GET",
		PathPattern:        "/V1/carts/mine/coupons",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCouponManagementV1GetGetMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCouponManagementV1GetGetMineOK), nil

}

/*
QuoteCouponManagementV1RemoveDelete Deletes a coupon from a specified cart.
*/
func (a *Client) QuoteCouponManagementV1RemoveDelete(params *QuoteCouponManagementV1RemoveDeleteParams) (*QuoteCouponManagementV1RemoveDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCouponManagementV1RemoveDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCouponManagementV1RemoveDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/carts/{cartId}/coupons",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCouponManagementV1RemoveDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCouponManagementV1RemoveDeleteOK), nil

}

/*
QuoteCouponManagementV1RemoveDeleteMine Deletes a coupon from a specified cart.
*/
func (a *Client) QuoteCouponManagementV1RemoveDeleteMine(params *QuoteCouponManagementV1RemoveDeleteMineParams) (*QuoteCouponManagementV1RemoveDeleteMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCouponManagementV1RemoveDeleteMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCouponManagementV1RemoveDeleteMine",
		Method:             "DELETE",
		PathPattern:        "/V1/carts/mine/coupons",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCouponManagementV1RemoveDeleteMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCouponManagementV1RemoveDeleteMineOK), nil

}

/*
QuoteCouponManagementV1SetPut Adds a coupon by code to a specified cart.
*/
func (a *Client) QuoteCouponManagementV1SetPut(params *QuoteCouponManagementV1SetPutParams) (*QuoteCouponManagementV1SetPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCouponManagementV1SetPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCouponManagementV1SetPut",
		Method:             "PUT",
		PathPattern:        "/V1/carts/{cartId}/coupons/{couponCode}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCouponManagementV1SetPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCouponManagementV1SetPutOK), nil

}

/*
QuoteCouponManagementV1SetPutMine Adds a coupon by code to a specified cart.
*/
func (a *Client) QuoteCouponManagementV1SetPutMine(params *QuoteCouponManagementV1SetPutMineParams) (*QuoteCouponManagementV1SetPutMineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteCouponManagementV1SetPutMineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "quoteCouponManagementV1SetPutMine",
		Method:             "PUT",
		PathPattern:        "/V1/carts/mine/coupons/{couponCode}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuoteCouponManagementV1SetPutMineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QuoteCouponManagementV1SetPutMineOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
