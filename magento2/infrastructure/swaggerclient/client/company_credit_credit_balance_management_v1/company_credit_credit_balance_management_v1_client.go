// Code generated by go-swagger; DO NOT EDIT.

package company_credit_credit_balance_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new company credit credit balance management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for company credit credit balance management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CompanyCreditCreditBalanceManagementV1DecreasePost Decreases the company credit with an Update, Reimburse, or Purchase transaction. This transaction increases company's outstanding balance and decreases company's available credit.
*/
func (a *Client) CompanyCreditCreditBalanceManagementV1DecreasePost(params *CompanyCreditCreditBalanceManagementV1DecreasePostParams) (*CompanyCreditCreditBalanceManagementV1DecreasePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyCreditCreditBalanceManagementV1DecreasePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyCreditCreditBalanceManagementV1DecreasePost",
		Method:             "POST",
		PathPattern:        "/V1/companyCredits/{creditId}/decreaseBalance",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyCreditCreditBalanceManagementV1DecreasePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyCreditCreditBalanceManagementV1DecreasePostOK), nil

}

/*
CompanyCreditCreditBalanceManagementV1IncreasePost Increases the company credit with an Allocate, Update, Refund, Revert, or Reimburse transaction. This transaction decreases company's outstanding balance and increases company's available credit.
*/
func (a *Client) CompanyCreditCreditBalanceManagementV1IncreasePost(params *CompanyCreditCreditBalanceManagementV1IncreasePostParams) (*CompanyCreditCreditBalanceManagementV1IncreasePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyCreditCreditBalanceManagementV1IncreasePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyCreditCreditBalanceManagementV1IncreasePost",
		Method:             "POST",
		PathPattern:        "/V1/companyCredits/{creditId}/increaseBalance",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyCreditCreditBalanceManagementV1IncreasePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyCreditCreditBalanceManagementV1IncreasePostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
