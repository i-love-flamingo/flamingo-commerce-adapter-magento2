// Code generated by go-swagger; DO NOT EDIT.

package catalog_inventory_stock_registry_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new catalog inventory stock registry v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog inventory stock registry v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CatalogInventoryStockRegistryV1GetLowStockItemsGet Retrieves a list of SKU's with low inventory qty
*/
func (a *Client) CatalogInventoryStockRegistryV1GetLowStockItemsGet(params *CatalogInventoryStockRegistryV1GetLowStockItemsGetParams) (*CatalogInventoryStockRegistryV1GetLowStockItemsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogInventoryStockRegistryV1GetLowStockItemsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogInventoryStockRegistryV1GetLowStockItemsGet",
		Method:             "GET",
		PathPattern:        "/V1/stockItems/lowStock/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogInventoryStockRegistryV1GetLowStockItemsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogInventoryStockRegistryV1GetLowStockItemsGetOK), nil

}

/*
CatalogInventoryStockRegistryV1GetStockItemBySkuGet catalog inventory stock registry v1 get stock item by sku get API
*/
func (a *Client) CatalogInventoryStockRegistryV1GetStockItemBySkuGet(params *CatalogInventoryStockRegistryV1GetStockItemBySkuGetParams) (*CatalogInventoryStockRegistryV1GetStockItemBySkuGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogInventoryStockRegistryV1GetStockItemBySkuGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogInventoryStockRegistryV1GetStockItemBySkuGet",
		Method:             "GET",
		PathPattern:        "/V1/stockItems/{productSku}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogInventoryStockRegistryV1GetStockItemBySkuGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogInventoryStockRegistryV1GetStockItemBySkuGetOK), nil

}

/*
CatalogInventoryStockRegistryV1GetStockStatusBySkuGet catalog inventory stock registry v1 get stock status by sku get API
*/
func (a *Client) CatalogInventoryStockRegistryV1GetStockStatusBySkuGet(params *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams) (*CatalogInventoryStockRegistryV1GetStockStatusBySkuGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogInventoryStockRegistryV1GetStockStatusBySkuGet",
		Method:             "GET",
		PathPattern:        "/V1/stockStatuses/{productSku}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogInventoryStockRegistryV1GetStockStatusBySkuGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogInventoryStockRegistryV1GetStockStatusBySkuGetOK), nil

}

/*
CatalogInventoryStockRegistryV1UpdateStockItemBySkuPut catalog inventory stock registry v1 update stock item by sku put API
*/
func (a *Client) CatalogInventoryStockRegistryV1UpdateStockItemBySkuPut(params *CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutParams) (*CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogInventoryStockRegistryV1UpdateStockItemBySkuPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogInventoryStockRegistryV1UpdateStockItemBySkuPut",
		Method:             "PUT",
		PathPattern:        "/V1/products/{productSku}/stockItems/{itemId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
