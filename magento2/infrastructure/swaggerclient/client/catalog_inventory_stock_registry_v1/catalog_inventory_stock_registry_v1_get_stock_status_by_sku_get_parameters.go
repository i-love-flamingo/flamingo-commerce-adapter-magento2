// Code generated by go-swagger; DO NOT EDIT.

package catalog_inventory_stock_registry_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams creates a new CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams object
// with the default values initialized.
func NewCatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams() *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams {
	var ()
	return &CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCatalogInventoryStockRegistryV1GetStockStatusBySkuGetParamsWithTimeout creates a new CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCatalogInventoryStockRegistryV1GetStockStatusBySkuGetParamsWithTimeout(timeout time.Duration) *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams {
	var ()
	return &CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams{

		timeout: timeout,
	}
}

// NewCatalogInventoryStockRegistryV1GetStockStatusBySkuGetParamsWithContext creates a new CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewCatalogInventoryStockRegistryV1GetStockStatusBySkuGetParamsWithContext(ctx context.Context) *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams {
	var ()
	return &CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams{

		Context: ctx,
	}
}

// NewCatalogInventoryStockRegistryV1GetStockStatusBySkuGetParamsWithHTTPClient creates a new CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCatalogInventoryStockRegistryV1GetStockStatusBySkuGetParamsWithHTTPClient(client *http.Client) *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams {
	var ()
	return &CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams{
		HTTPClient: client,
	}
}

/*CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams contains all the parameters to send to the API endpoint
for the catalog inventory stock registry v1 get stock status by sku get operation typically these are written to a http.Request
*/
type CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams struct {

	/*ProductSku*/
	ProductSku string
	/*ScopeID*/
	ScopeID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the catalog inventory stock registry v1 get stock status by sku get params
func (o *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams) WithTimeout(timeout time.Duration) *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the catalog inventory stock registry v1 get stock status by sku get params
func (o *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the catalog inventory stock registry v1 get stock status by sku get params
func (o *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams) WithContext(ctx context.Context) *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the catalog inventory stock registry v1 get stock status by sku get params
func (o *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the catalog inventory stock registry v1 get stock status by sku get params
func (o *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams) WithHTTPClient(client *http.Client) *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the catalog inventory stock registry v1 get stock status by sku get params
func (o *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProductSku adds the productSku to the catalog inventory stock registry v1 get stock status by sku get params
func (o *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams) WithProductSku(productSku string) *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams {
	o.SetProductSku(productSku)
	return o
}

// SetProductSku adds the productSku to the catalog inventory stock registry v1 get stock status by sku get params
func (o *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams) SetProductSku(productSku string) {
	o.ProductSku = productSku
}

// WithScopeID adds the scopeID to the catalog inventory stock registry v1 get stock status by sku get params
func (o *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams) WithScopeID(scopeID *int64) *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams {
	o.SetScopeID(scopeID)
	return o
}

// SetScopeID adds the scopeId to the catalog inventory stock registry v1 get stock status by sku get params
func (o *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams) SetScopeID(scopeID *int64) {
	o.ScopeID = scopeID
}

// WriteToRequest writes these params to a swagger request
func (o *CatalogInventoryStockRegistryV1GetStockStatusBySkuGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param productSku
	if err := r.SetPathParam("productSku", o.ProductSku); err != nil {
		return err
	}

	if o.ScopeID != nil {

		// query param scopeId
		var qrScopeID int64
		if o.ScopeID != nil {
			qrScopeID = *o.ScopeID
		}
		qScopeID := swag.FormatInt64(qrScopeID)
		if qScopeID != "" {
			if err := r.SetQueryParam("scopeId", qScopeID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
