// Code generated by go-swagger; DO NOT EDIT.

package rma_rma_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "flamingo.me/flamingo-commerce-adapter-magento2/magento2/infrastructure/swaggerclient/models"
)

// RmaRmaManagementV1SaveRmaPostReader is a Reader for the RmaRmaManagementV1SaveRmaPost structure.
type RmaRmaManagementV1SaveRmaPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RmaRmaManagementV1SaveRmaPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRmaRmaManagementV1SaveRmaPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewRmaRmaManagementV1SaveRmaPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewRmaRmaManagementV1SaveRmaPostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRmaRmaManagementV1SaveRmaPostOK creates a RmaRmaManagementV1SaveRmaPostOK with default headers values
func NewRmaRmaManagementV1SaveRmaPostOK() *RmaRmaManagementV1SaveRmaPostOK {
	return &RmaRmaManagementV1SaveRmaPostOK{}
}

/*RmaRmaManagementV1SaveRmaPostOK handles this case with default header values.

200 Success.
*/
type RmaRmaManagementV1SaveRmaPostOK struct {
	Payload *models.RmaDataRmaInterface
}

func (o *RmaRmaManagementV1SaveRmaPostOK) Error() string {
	return fmt.Sprintf("[POST /V1/returns][%d] rmaRmaManagementV1SaveRmaPostOK  %+v", 200, o.Payload)
}

func (o *RmaRmaManagementV1SaveRmaPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RmaDataRmaInterface)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRmaRmaManagementV1SaveRmaPostUnauthorized creates a RmaRmaManagementV1SaveRmaPostUnauthorized with default headers values
func NewRmaRmaManagementV1SaveRmaPostUnauthorized() *RmaRmaManagementV1SaveRmaPostUnauthorized {
	return &RmaRmaManagementV1SaveRmaPostUnauthorized{}
}

/*RmaRmaManagementV1SaveRmaPostUnauthorized handles this case with default header values.

401 Unauthorized
*/
type RmaRmaManagementV1SaveRmaPostUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *RmaRmaManagementV1SaveRmaPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /V1/returns][%d] rmaRmaManagementV1SaveRmaPostUnauthorized  %+v", 401, o.Payload)
}

func (o *RmaRmaManagementV1SaveRmaPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRmaRmaManagementV1SaveRmaPostDefault creates a RmaRmaManagementV1SaveRmaPostDefault with default headers values
func NewRmaRmaManagementV1SaveRmaPostDefault(code int) *RmaRmaManagementV1SaveRmaPostDefault {
	return &RmaRmaManagementV1SaveRmaPostDefault{
		_statusCode: code,
	}
}

/*RmaRmaManagementV1SaveRmaPostDefault handles this case with default header values.

Unexpected error
*/
type RmaRmaManagementV1SaveRmaPostDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the rma rma management v1 save rma post default response
func (o *RmaRmaManagementV1SaveRmaPostDefault) Code() int {
	return o._statusCode
}

func (o *RmaRmaManagementV1SaveRmaPostDefault) Error() string {
	return fmt.Sprintf("[POST /V1/returns][%d] rmaRmaManagementV1SaveRmaPost default  %+v", o._statusCode, o.Payload)
}

func (o *RmaRmaManagementV1SaveRmaPostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*RmaRmaManagementV1SaveRmaPostBody rma rma management v1 save rma post body
swagger:model RmaRmaManagementV1SaveRmaPostBody
*/
type RmaRmaManagementV1SaveRmaPostBody struct {

	// rma data object
	// Required: true
	RmaDataObject *models.RmaDataRmaInterface `json:"rmaDataObject"`
}

// Validate validates this rma rma management v1 save rma post body
func (o *RmaRmaManagementV1SaveRmaPostBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRmaDataObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RmaRmaManagementV1SaveRmaPostBody) validateRmaDataObject(formats strfmt.Registry) error {

	if err := validate.Required("rmaRmaManagementV1SaveRmaPostBody"+"."+"rmaDataObject", "body", o.RmaDataObject); err != nil {
		return err
	}

	if o.RmaDataObject != nil {
		if err := o.RmaDataObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rmaRmaManagementV1SaveRmaPostBody" + "." + "rmaDataObject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RmaRmaManagementV1SaveRmaPostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RmaRmaManagementV1SaveRmaPostBody) UnmarshalBinary(b []byte) error {
	var res RmaRmaManagementV1SaveRmaPostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
