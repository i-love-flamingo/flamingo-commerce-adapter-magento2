// Code generated by go-swagger; DO NOT EDIT.

package rma_rma_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new rma rma management v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rma rma management v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
RmaRmaManagementV1SaveRmaPost Save RMA
*/
func (a *Client) RmaRmaManagementV1SaveRmaPost(params *RmaRmaManagementV1SaveRmaPostParams) (*RmaRmaManagementV1SaveRmaPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRmaRmaManagementV1SaveRmaPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rmaRmaManagementV1SaveRmaPost",
		Method:             "POST",
		PathPattern:        "/V1/returns",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RmaRmaManagementV1SaveRmaPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RmaRmaManagementV1SaveRmaPostOK), nil

}

/*
RmaRmaManagementV1SaveRmaPut Save RMA
*/
func (a *Client) RmaRmaManagementV1SaveRmaPut(params *RmaRmaManagementV1SaveRmaPutParams) (*RmaRmaManagementV1SaveRmaPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRmaRmaManagementV1SaveRmaPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rmaRmaManagementV1SaveRmaPut",
		Method:             "PUT",
		PathPattern:        "/V1/returns/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RmaRmaManagementV1SaveRmaPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RmaRmaManagementV1SaveRmaPutOK), nil

}

/*
RmaRmaManagementV1SearchGet Return list of rma data objects based on search criteria
*/
func (a *Client) RmaRmaManagementV1SearchGet(params *RmaRmaManagementV1SearchGetParams) (*RmaRmaManagementV1SearchGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRmaRmaManagementV1SearchGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rmaRmaManagementV1SearchGet",
		Method:             "GET",
		PathPattern:        "/V1/returns",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RmaRmaManagementV1SearchGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RmaRmaManagementV1SearchGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
