// Code generated by go-swagger; DO NOT EDIT.

package rma_rma_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "flamingo.me/flamingo-commerce-adapter-magento2/magento2/infrastructure/swaggerclient/models"
)

// RmaRmaManagementV1SearchGetReader is a Reader for the RmaRmaManagementV1SearchGet structure.
type RmaRmaManagementV1SearchGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RmaRmaManagementV1SearchGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRmaRmaManagementV1SearchGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewRmaRmaManagementV1SearchGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewRmaRmaManagementV1SearchGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRmaRmaManagementV1SearchGetOK creates a RmaRmaManagementV1SearchGetOK with default headers values
func NewRmaRmaManagementV1SearchGetOK() *RmaRmaManagementV1SearchGetOK {
	return &RmaRmaManagementV1SearchGetOK{}
}

/*RmaRmaManagementV1SearchGetOK handles this case with default header values.

200 Success.
*/
type RmaRmaManagementV1SearchGetOK struct {
	Payload *models.RmaDataRmaSearchResultInterface
}

func (o *RmaRmaManagementV1SearchGetOK) Error() string {
	return fmt.Sprintf("[GET /V1/returns][%d] rmaRmaManagementV1SearchGetOK  %+v", 200, o.Payload)
}

func (o *RmaRmaManagementV1SearchGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RmaDataRmaSearchResultInterface)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRmaRmaManagementV1SearchGetUnauthorized creates a RmaRmaManagementV1SearchGetUnauthorized with default headers values
func NewRmaRmaManagementV1SearchGetUnauthorized() *RmaRmaManagementV1SearchGetUnauthorized {
	return &RmaRmaManagementV1SearchGetUnauthorized{}
}

/*RmaRmaManagementV1SearchGetUnauthorized handles this case with default header values.

401 Unauthorized
*/
type RmaRmaManagementV1SearchGetUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *RmaRmaManagementV1SearchGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /V1/returns][%d] rmaRmaManagementV1SearchGetUnauthorized  %+v", 401, o.Payload)
}

func (o *RmaRmaManagementV1SearchGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRmaRmaManagementV1SearchGetDefault creates a RmaRmaManagementV1SearchGetDefault with default headers values
func NewRmaRmaManagementV1SearchGetDefault(code int) *RmaRmaManagementV1SearchGetDefault {
	return &RmaRmaManagementV1SearchGetDefault{
		_statusCode: code,
	}
}

/*RmaRmaManagementV1SearchGetDefault handles this case with default header values.

Unexpected error
*/
type RmaRmaManagementV1SearchGetDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the rma rma management v1 search get default response
func (o *RmaRmaManagementV1SearchGetDefault) Code() int {
	return o._statusCode
}

func (o *RmaRmaManagementV1SearchGetDefault) Error() string {
	return fmt.Sprintf("[GET /V1/returns][%d] rmaRmaManagementV1SearchGet default  %+v", o._statusCode, o.Payload)
}

func (o *RmaRmaManagementV1SearchGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
