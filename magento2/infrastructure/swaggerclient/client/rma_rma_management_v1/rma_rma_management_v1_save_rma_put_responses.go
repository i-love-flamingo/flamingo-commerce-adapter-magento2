// Code generated by go-swagger; DO NOT EDIT.

package rma_rma_management_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "flamingo.me/flamingo-commerce-adapter-magento2/magento2/infrastructure/swaggerclient/models"
)

// RmaRmaManagementV1SaveRmaPutReader is a Reader for the RmaRmaManagementV1SaveRmaPut structure.
type RmaRmaManagementV1SaveRmaPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RmaRmaManagementV1SaveRmaPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRmaRmaManagementV1SaveRmaPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewRmaRmaManagementV1SaveRmaPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewRmaRmaManagementV1SaveRmaPutDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRmaRmaManagementV1SaveRmaPutOK creates a RmaRmaManagementV1SaveRmaPutOK with default headers values
func NewRmaRmaManagementV1SaveRmaPutOK() *RmaRmaManagementV1SaveRmaPutOK {
	return &RmaRmaManagementV1SaveRmaPutOK{}
}

/*RmaRmaManagementV1SaveRmaPutOK handles this case with default header values.

200 Success.
*/
type RmaRmaManagementV1SaveRmaPutOK struct {
	Payload *models.RmaDataRmaInterface
}

func (o *RmaRmaManagementV1SaveRmaPutOK) Error() string {
	return fmt.Sprintf("[PUT /V1/returns/{id}][%d] rmaRmaManagementV1SaveRmaPutOK  %+v", 200, o.Payload)
}

func (o *RmaRmaManagementV1SaveRmaPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RmaDataRmaInterface)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRmaRmaManagementV1SaveRmaPutUnauthorized creates a RmaRmaManagementV1SaveRmaPutUnauthorized with default headers values
func NewRmaRmaManagementV1SaveRmaPutUnauthorized() *RmaRmaManagementV1SaveRmaPutUnauthorized {
	return &RmaRmaManagementV1SaveRmaPutUnauthorized{}
}

/*RmaRmaManagementV1SaveRmaPutUnauthorized handles this case with default header values.

401 Unauthorized
*/
type RmaRmaManagementV1SaveRmaPutUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *RmaRmaManagementV1SaveRmaPutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /V1/returns/{id}][%d] rmaRmaManagementV1SaveRmaPutUnauthorized  %+v", 401, o.Payload)
}

func (o *RmaRmaManagementV1SaveRmaPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRmaRmaManagementV1SaveRmaPutDefault creates a RmaRmaManagementV1SaveRmaPutDefault with default headers values
func NewRmaRmaManagementV1SaveRmaPutDefault(code int) *RmaRmaManagementV1SaveRmaPutDefault {
	return &RmaRmaManagementV1SaveRmaPutDefault{
		_statusCode: code,
	}
}

/*RmaRmaManagementV1SaveRmaPutDefault handles this case with default header values.

Unexpected error
*/
type RmaRmaManagementV1SaveRmaPutDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the rma rma management v1 save rma put default response
func (o *RmaRmaManagementV1SaveRmaPutDefault) Code() int {
	return o._statusCode
}

func (o *RmaRmaManagementV1SaveRmaPutDefault) Error() string {
	return fmt.Sprintf("[PUT /V1/returns/{id}][%d] rmaRmaManagementV1SaveRmaPut default  %+v", o._statusCode, o.Payload)
}

func (o *RmaRmaManagementV1SaveRmaPutDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*RmaRmaManagementV1SaveRmaPutBody rma rma management v1 save rma put body
swagger:model RmaRmaManagementV1SaveRmaPutBody
*/
type RmaRmaManagementV1SaveRmaPutBody struct {

	// rma data object
	// Required: true
	RmaDataObject *models.RmaDataRmaInterface `json:"rmaDataObject"`
}

// Validate validates this rma rma management v1 save rma put body
func (o *RmaRmaManagementV1SaveRmaPutBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRmaDataObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RmaRmaManagementV1SaveRmaPutBody) validateRmaDataObject(formats strfmt.Registry) error {

	if err := validate.Required("rmaRmaManagementV1SaveRmaPutBody"+"."+"rmaDataObject", "body", o.RmaDataObject); err != nil {
		return err
	}

	if o.RmaDataObject != nil {
		if err := o.RmaDataObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rmaRmaManagementV1SaveRmaPutBody" + "." + "rmaDataObject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RmaRmaManagementV1SaveRmaPutBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RmaRmaManagementV1SaveRmaPutBody) UnmarshalBinary(b []byte) error {
	var res RmaRmaManagementV1SaveRmaPutBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
