// Code generated by go-swagger; DO NOT EDIT.

package company_role_repository_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new company role repository v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for company role repository v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CompanyRoleRepositoryV1DeleteDelete Delete a role.
*/
func (a *Client) CompanyRoleRepositoryV1DeleteDelete(params *CompanyRoleRepositoryV1DeleteDeleteParams) (*CompanyRoleRepositoryV1DeleteDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyRoleRepositoryV1DeleteDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyRoleRepositoryV1DeleteDelete",
		Method:             "DELETE",
		PathPattern:        "/V1/company/role/{roleId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyRoleRepositoryV1DeleteDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyRoleRepositoryV1DeleteDeleteOK), nil

}

/*
CompanyRoleRepositoryV1GetGet Returns the list of permissions for a specified role.
*/
func (a *Client) CompanyRoleRepositoryV1GetGet(params *CompanyRoleRepositoryV1GetGetParams) (*CompanyRoleRepositoryV1GetGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyRoleRepositoryV1GetGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyRoleRepositoryV1GetGet",
		Method:             "GET",
		PathPattern:        "/V1/company/role/{roleId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyRoleRepositoryV1GetGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyRoleRepositoryV1GetGetOK), nil

}

/*
CompanyRoleRepositoryV1GetListGet Returns the list of roles and permissions for a specified company.
*/
func (a *Client) CompanyRoleRepositoryV1GetListGet(params *CompanyRoleRepositoryV1GetListGetParams) (*CompanyRoleRepositoryV1GetListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyRoleRepositoryV1GetListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyRoleRepositoryV1GetListGet",
		Method:             "GET",
		PathPattern:        "/V1/company/role/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyRoleRepositoryV1GetListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyRoleRepositoryV1GetListGetOK), nil

}

/*
CompanyRoleRepositoryV1SavePost Create or update a role for a selected company.
*/
func (a *Client) CompanyRoleRepositoryV1SavePost(params *CompanyRoleRepositoryV1SavePostParams) (*CompanyRoleRepositoryV1SavePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyRoleRepositoryV1SavePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyRoleRepositoryV1SavePost",
		Method:             "POST",
		PathPattern:        "/V1/company/role/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyRoleRepositoryV1SavePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyRoleRepositoryV1SavePostOK), nil

}

/*
CompanyRoleRepositoryV1SavePut Create or update a role for a selected company.
*/
func (a *Client) CompanyRoleRepositoryV1SavePut(params *CompanyRoleRepositoryV1SavePutParams) (*CompanyRoleRepositoryV1SavePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompanyRoleRepositoryV1SavePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "companyRoleRepositoryV1SavePut",
		Method:             "PUT",
		PathPattern:        "/V1/company/role/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompanyRoleRepositoryV1SavePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompanyRoleRepositoryV1SavePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
